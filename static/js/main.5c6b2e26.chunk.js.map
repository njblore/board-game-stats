{"version":3,"sources":["Components/2PlayerPie.jsx","Components/PieCharts.jsx","Components/FinalScoresBar.jsx","Components/CategoryAverages.jsx","Components/Stats.jsx","Components/MultiplayerRadial.jsx","Components/ScatterRelationships.jsx","App.js","index.js"],"names":["TwoPlayerPie","props","maxes","tashVsThom","reduce","acc","game","totals","players","map","player","score","Object","values","scores","sum","name","totalScoreArray","highScore","Math","max","every","forEach","data","labels","datasets","backgroundColor","hoverBackgroundColor","borderColor","borderWidth","className","title","PieCharts","filter","location","FinalScoresBar","useState","twoPlayer","pool","setPool","includes","push","blankScores","totalScore","colours","sets","i","label","hoverBorderColor","date","split","onClick","multiplayer","games","height","CategoryAverage","fields","pastures","grain","vegetables","sheep","cattle","categoryScores","category","averages","avg","length","toFixed","categories","keys","Thom","Stats","min","overallTotal","scoreCount","playerBest","playerWorst","averageScore","MultiplayerRadial","playerAverages","ScatterRelationships","topic","setTopic","generateData","y","x","options","responsive","sort","a","b","tooltips","mode","elements","line","fill","scales","xAxes","display","gridLines","yAxes","type","position","id","show","pointBorderColor","pointBackgroundColor","pointHoverBackgroundColor","pointHoverBorderColor","yAxisID","App","overallTotals","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5c6b2e26.chunk.js","sourcesContent":["import React from 'react';\nimport { Doughnut } from 'react-chartjs-2';\n\nconst TwoPlayerPie = props => {\n  const maxes = props.tashVsThom.reduce((acc, game) => {\n    let totals = game.players.map(player => {\n      const totalScore = Object.values(player.scores).reduce(\n        (sum, score) => (sum += score),\n      );\n      return { score: totalScore, player: player.name };\n    });\n\n    let totalScoreArray = totals.map(player => player.score);\n    let highScore = Math.max(...totalScoreArray);\n\n    if (totalScoreArray.every(score => score === totalScoreArray[0])) {\n      acc['draw'] ? (acc['draw'] += 1) : (acc['draw'] = 1);\n    } else {\n      totals.forEach(player => {\n        if (player.score === highScore) {\n          acc[player.player]\n            ? (acc[player.player] += 1)\n            : (acc[player.player] = 1);\n        }\n      });\n    }\n    return acc;\n  }, {});\n\n  const data = {\n    labels: [`Thom Wins`, `Tash Wins`, `Draw`],\n    datasets: [\n      {\n        data: [maxes['Thom'], maxes['Tash'], maxes['draw']],\n        backgroundColor: props.backgroundColor,\n        hoverBackgroundColor: props.backgroundColor,\n        borderColor: 'black',\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  return (\n    <div>\n      <header className=\"header chart-header\">{props.title}</header>\n      <Doughnut data={data}></Doughnut>\n    </div>\n  );\n};\n\nexport default TwoPlayerPie;\n","import TwoPlayerPie from './2PlayerPie';\nimport React from 'react';\n\nconst PieCharts = props => {\n  return (\n    <div className=\"pie-container\">\n      <header className=\"header\">HEAD 2 HEAD: Thom vs Tash</header>\n      <div className=\"pie-grid\">\n        <TwoPlayerPie\n          title={'Travelling In Asia'}\n          tashVsThom={props.tashVsThom.filter(game => game.location === 'Asia')}\n          backgroundColor={['#43d123', 'yellow', 'orange']}\n        ></TwoPlayerPie>\n        <TwoPlayerPie\n          title={'Un-Recorded Location'}\n          tashVsThom={props.tashVsThom.filter(\n            game => game.location === 'unknown',\n          )}\n          backgroundColor={['lavender', 'powderblue', 'peachpuff']}\n        ></TwoPlayerPie>\n        <TwoPlayerPie\n          title={'Living In Australia'}\n          tashVsThom={props.tashVsThom.filter(\n            game => game.location === 'Australia',\n          )}\n          backgroundColor={['blue', 'red', 'white']}\n        ></TwoPlayerPie>\n        <TwoPlayerPie\n          title={'Home In The Uk'}\n          tashVsThom={props.tashVsThom.filter(game => game.location === 'UK')}\n          backgroundColor={['red', 'white', 'blue']}\n        ></TwoPlayerPie>\n        <TwoPlayerPie\n          tashVsThom={props.tashVsThom}\n          title={'All Games'}\n          backgroundColor={['#36A2EB', '#FF6384', '#FFCE56']}\n        ></TwoPlayerPie>\n      </div>\n    </div>\n  );\n};\n\nexport default PieCharts;\n","import React, { useState } from 'react';\nimport { HorizontalBar } from 'react-chartjs-2';\n\nconst FinalScoresBar = props => {\n  const [pool, setPool] = useState(props.twoPlayer);\n  const players = pool.reduce((acc, game) => {\n    game.players.forEach(player => {\n      !acc.includes(player.name) && acc.push(player.name);\n    });\n    return acc;\n  }, []);\n  const blankScores = players.reduce((acc, player) => {\n    acc[player] = [];\n    return acc;\n  }, {});\n  const scores = pool.reduce((acc, game) => {\n    let totals = game.players.map(player => {\n      const totalScore = Object.values(player.scores).reduce(\n        (sum, score) => (sum += score),\n      );\n      return { [player.name]: totalScore };\n    });\n\n    totals.map(game => {\n      for (let player in game) {\n        acc[player] = [...acc[player], game[player]];\n      }\n    });\n\n    return acc;\n  }, blankScores);\n  const colours = [\n    '#8d6fef',\n    '#ff57bd',\n    '#19da1c',\n    '#2b74fe',\n    'orange',\n    '#9814c0',\n    'white',\n    'red',\n  ];\n  const sets = players.map((player, i) => {\n    return {\n      label: player,\n      backgroundColor: colours[i],\n      borderColor: 'black',\n      borderWidth: 0.5,\n      hoverBackgroundColor: '#8d6fef',\n      hoverBorderColor: 'black',\n      data: scores[player],\n    };\n  });\n  const data = {\n    labels: pool.map(game => game.date.split('/')),\n    datasets: sets,\n  };\n\n  return (\n    <div className=\"bar-container\">\n      <header className=\"header\">Final Scores</header>\n      <div className=\"button-container\">\n        <button onClick={() => setPool(props.twoPlayer)}>Two Player</button>\n        <button onClick={() => setPool(props.multiplayer)}>Multiplayer</button>\n        <button onClick={() => setPool(props.scores.games)}>All Games</button>\n      </div>\n      <HorizontalBar data={data} height={1000} />\n    </div>\n  );\n};\n\nexport default FinalScoresBar;\n","import React, { useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nconst CategoryAverage = props => {\n  const [pool, setPool] = useState(props.scores.games);\n  const players = pool.reduce((acc, game) => {\n    game.players.forEach(player => {\n      !acc.includes(player.name) && acc.push(player.name);\n    });\n    return acc;\n  }, []);\n  const blankScores = players.reduce((acc, player) => {\n    acc[player] = {\n      fields: [],\n      pastures: [],\n      grain: [],\n      vegetables: [],\n      sheep: [],\n      'wild boar': [],\n      cattle: [],\n      'unused spaces': [],\n      'fenced stables': [],\n      'clay rooms': [],\n      'stone rooms': [],\n      'family members': [],\n      'points for cards': [],\n      'bonus points': [],\n    };\n    return acc;\n  }, {});\n  const categoryScores = pool.reduce((acc, game) => {\n    game.players.forEach(player => {\n      for (let category in player.scores) {\n        acc[player.name][category]\n          ? acc[player.name][category].push(player.scores[category])\n          : (acc[player.name][category] = [player.scores[category]]);\n      }\n    });\n    return acc;\n  }, blankScores);\n  let averages = players.reduce((acc, player) => {\n    acc[player] = {};\n    return acc;\n  }, {});\n  for (let player in categoryScores) {\n    for (let category in categoryScores[player]) {\n      let total = categoryScores[player][category].reduce(\n        (acc, score) => (acc += score),\n      );\n      let avg = total / categoryScores[player][category].length;\n      averages[player][category] = avg.toFixed(2);\n    }\n  }\n  const categories = Object.keys(averages.Thom);\n  const getAverages = name => {\n    return Object.values(averages[name]);\n  };\n  const colours = [\n    '#ff57bd',\n    'yellow',\n    '#14c017',\n    '#2b74fe',\n    'orange',\n    '#9814c0',\n    'white',\n    'red',\n  ];\n  const sets = players.map((player, i) => {\n    return {\n      label: player,\n      backgroundColor: colours[i],\n      borderColor: 'black',\n      borderWidth: 0.5,\n      hoverBackgroundColor: colours[i],\n      hoverBorderColor: 'black',\n      data: getAverages(player),\n    };\n  });\n  const data = {\n    labels: categories,\n    datasets: sets,\n  };\n\n  return (\n    <div className=\"category-container\">\n      <header className=\"header\">Category Averages</header>\n      <div className=\"button-container\">\n        <button onClick={() => setPool(props.twoPlayer)}>Two Player</button>\n        <button onClick={() => setPool(props.multiplayer)}>Multiplayer</button>\n        <button onClick={() => setPool(props.scores.games)}>All Games</button>\n      </div>\n      <Bar data={data}></Bar>\n    </div>\n  );\n};\n\nexport default CategoryAverage;\n","import React from 'react';\nimport scores from '../data/scores.json';\nconst Stats = props => {\n  let max = { name: '', score: 0 };\n  let min = { name: '', score: 100 };\n  let overallTotal = 0;\n  let scoreCount = 0;\n  for (let player in props.totals) {\n    let playerBest = Math.max(...props.totals[player]);\n    let playerWorst = Math.min(...props.totals[player]);\n    if (playerBest > max.score) {\n      max.name = player;\n      max.score = playerBest;\n    }\n    if (playerWorst < min.score) {\n      min.name = player;\n      min.score = playerWorst;\n    }\n    let playerTotal = props.totals[player].reduce(\n      (acc, score) => (acc += score),\n    );\n    overallTotal += playerTotal;\n    scoreCount += props.totals[player].length;\n  }\n  let averageScore = overallTotal / scoreCount;\n  return (\n    <div className=\"stats-container\">\n      <header className=\"header stats-header\">\n        Some stats from our Agricola Games\n      </header>\n      <p>\n        Total Games Recorded:\n        <span className=\"stat-text\"> {scores.games.length}</span>\n      </p>\n      <p>\n        Of those games,\n        <span className=\"stat-text\"> {props.tashVsThom.length}</span> were 2\n        player\n      </p>\n      <p>\n        And <span className=\"stat-text\"> {props.multiplayer.length}</span> were\n        multiplayer.\n      </p>\n      <p>\n        The Highest score from all games was\n        <span className=\"stat-text\"> {max.score}</span> scored by the\n        indefatigable\n        <span className=\"stat-text\"> {max.name}</span>!\n      </p>\n      <p>\n        And the lowest score of all time was\n        <span className=\"stat-text\"> {min.score}</span> scored by the\n        unstoppable\n        <span className=\"stat-text\"> {min.name}</span>!\n      </p>\n      <p>\n        The average score across all games is as respectable\n        <span className=\"stat-text\"> {averageScore.toFixed(2)}</span>\n      </p>\n    </div>\n  );\n};\n\nexport default Stats;\n","import React from 'react';\nimport { Polar } from 'react-chartjs-2';\n\nconst MultiplayerRadial = props => {\n  let totals = props.multiplayer.reduce((acc, game) => {\n    game.players.forEach(player => {\n      const totalScore = Object.values(player.scores).reduce(\n        (sum, score) => (sum += score),\n      );\n      acc[player.name] = acc[player.name]\n        ? [...acc[player.name], totalScore]\n        : [totalScore];\n    });\n    return acc;\n  }, {});\n  let playerAverages = {};\n\n  for (let player in totals) {\n    const totalScore = totals[player].reduce((acc, score) => (acc += score));\n    const averageScore = totalScore / totals[player].length;\n    playerAverages[player] = averageScore.toFixed(2);\n  }\n  const data = {\n    datasets: [\n      {\n        data: Object.values(playerAverages),\n        backgroundColor: [\n          '#ff57bd',\n          'yellow',\n          '#14c017',\n          '#2b74fe',\n          'orange',\n          '#9814c0',\n          'white',\n          'red',\n        ],\n        label: '',\n      },\n    ],\n    labels: Object.keys(playerAverages),\n  };\n  return (\n    <div className=\"radial-container\">\n      <header className=\"header\">Average Multiplayer Game Scores</header>\n      <Polar data={data}></Polar>\n    </div>\n  );\n};\n\nexport default MultiplayerRadial;\n","import React, { useState } from 'react';\nimport scores from '../data/scores.json';\nimport { Bar } from 'react-chartjs-2';\n\nconst ScatterRelationships = props => {\n  const [topic, setTopic] = useState('family members');\n  const generateData = topic => {\n    return scores.games.reduce((acc, game) => {\n      game.players.forEach(player => {\n        const totalScore = Object.values(player.scores).reduce(\n          (sum, score) => (sum += score),\n        );\n        acc.push({\n          y: player.scores[topic].toFixed(0),\n          x: totalScore,\n        });\n      });\n      return acc;\n    }, []);\n  };\n\n  const options = {\n    responsive: true,\n    labels: generateData('family members')\n      .sort((a, b) => (a.x > b.x ? 1 : -1))\n      .map(score => score.y),\n    tooltips: {\n      mode: 'label',\n    },\n    elements: {\n      line: {\n        fill: false,\n      },\n    },\n    scales: {\n      xAxes: [\n        {\n          display: true,\n          gridLines: {\n            display: false,\n          },\n          labels: generateData('family members')\n            .sort((a, b) => (a.x > b.x ? 1 : -1))\n            .map(score => score.x),\n        },\n      ],\n      yAxes: [\n        {\n          type: 'linear',\n          display: true,\n          position: 'left',\n          id: 'y-axis-1',\n          gridLines: {\n            display: false,\n          },\n          labels: {\n            show: true,\n          },\n        },\n        {\n          type: 'linear',\n          display: true,\n          position: 'right',\n          id: 'y-axis-2',\n          gridLines: {\n            display: false,\n          },\n          labels: {\n            show: true,\n          },\n        },\n      ],\n    },\n  };\n\n  const data = {\n    datasets: [\n      {\n        label: 'Score',\n        type: 'line',\n        data: generateData(topic)\n          .sort((a, b) => (a.x > b.x ? 1 : -1))\n          .map(score => score.x),\n        fill: false,\n        borderColor: 'orange',\n        backgroundColor: 'yellow',\n        pointBorderColor: 'orange',\n        pointBackgroundColor: 'yellow',\n        pointHoverBackgroundColor: 'limegreen',\n        pointHoverBorderColor: 'green',\n        yAxisID: 'y-axis-2',\n      },\n      {\n        type: 'bar',\n        label: topic,\n        data: generateData(topic)\n          .sort((a, b) => (a.x > b.x ? 1 : -1))\n          .map(score => score.y),\n        fill: false,\n        backgroundColor: '#ca7eee',\n        borderColor: 'black',\n        hoverBackgroundColor: '#71B37C',\n        hoverBorderColor: '#71B37C',\n        yAxisID: 'y-axis-1',\n      },\n    ],\n  };\n\n  return (\n    <div className=\"scatter-container\">\n      <header className=\"header\">Scattered Relationships</header>\n      <Bar data={data} options={options}></Bar>\n      <div className=\"button-container\">\n        <button onClick={() => setTopic('family members')}>\n          Family Members\n        </button>\n        <button onClick={() => setTopic('bonus points')}>Bonus Points</button>\n        <button onClick={() => setTopic('points for cards')}>\n          Points For Cards\n        </button>\n        <button onClick={() => setTopic('stone rooms')}>Stone Hut Rooms</button>\n        <button onClick={() => setTopic('unused spaces')}>Unused Spaces</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ScatterRelationships;\n","import React, { useState } from 'react';\nimport './App.css';\nimport scores from './data/scores.json';\nimport PieCharts from './Components/PieCharts';\nimport FinalScoresBar from './Components/FinalScoresBar';\nimport CategoryAverage from './Components/CategoryAverages';\nimport Stats from './Components/Stats';\nimport MultiplayerRadial from './Components/MultiplayerRadial';\nimport ScatterRelationships from './Components/ScatterRelationships';\n\nconst App = () => {\n  const overallTotals = scores.games.reduce((acc, game) => {\n    game.players.forEach(player => {\n      const totalScore = Object.values(player.scores).reduce(\n        (sum, score) => (sum += score),\n      );\n      acc[player.name] = acc[player.name]\n        ? [...acc[player.name], totalScore]\n        : [totalScore];\n    });\n    return acc;\n  }, {});\n\n  const [totals, setTotals] = useState(overallTotals);\n  const [tashVsThom, setTashVsThom] = useState(\n    scores.games.filter(game => game.players.length === 2),\n  );\n  const [multiplayer, setMultiplayer] = useState(\n    scores.games.filter(game => game.players.length > 2),\n  );\n\n  return (\n    <div className=\"App\">\n      <header className=\"page-header header\">Agricola: The Reckoning</header>\n      <Stats\n        totals={totals}\n        tashVsThom={tashVsThom}\n        multiplayer={multiplayer}\n      ></Stats>\n      <PieCharts tashVsThom={tashVsThom}></PieCharts>\n      <FinalScoresBar\n        scores={scores}\n        twoPlayer={tashVsThom}\n        multiplayer={multiplayer}\n      ></FinalScoresBar>\n      <CategoryAverage\n        scores={scores}\n        twoPlayer={tashVsThom}\n        multiplayer={multiplayer}\n      ></CategoryAverage>\n      <MultiplayerRadial multiplayer={multiplayer}></MultiplayerRadial>\n      <ScatterRelationships></ScatterRelationships>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}