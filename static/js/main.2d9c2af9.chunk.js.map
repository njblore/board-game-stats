{"version":3,"sources":["Components/SinglePie.tsx","helpers/scoreCalculations.ts","models/colourScheme.ts","Components/PieCharts.tsx","helpers/getPlayers.ts","helpers/date.ts","Components/FinalScoresBar.tsx","Components/CategoryAverages.tsx","helpers/scoreSheet.ts","Components/Stats.tsx","Components/MultiplayerRadial.tsx","helpers/chartDataManipulation.ts","Components/ScatterRelationships.tsx","Components/AgricolaPage.tsx","models/playerScore.ts","Components/AgricolaScoreSheet.tsx","Components/AgricolaScoreModal.tsx","Components/TerraformingMarsPage.tsx","App.js","index.js","images/agricolaheader.png"],"names":["PieChart","props","data","labels","Object","keys","scores","map","player","datasets","values","backgroundColor","hoverBackgroundColor","borderColor","borderWidth","totalGames","reduce","acc","val","winPercentages","entries","winCount","Math","round","className","legend","display","position","fullWidth","reverse","fontColor","string","index","key","scoresForEachPlayer","games","game","players","forEach","total","find","score","category","value","name","averageScoreFromArray","scoreArray","average","a","v","length","Number","toFixed","colours","pink","green","yellow","turquoise","salmon","purple","blue","orange","PieCharts","tashVsThom","totalsForGame","totalScoreArray","highScore","max","every","getPlayers","includes","push","dateRegex","dateFromString","date","split","RegExp","day","month","year","Date","FinalScoresBar","useState","twoPlayer","pool","setPool","sets","i","label","hoverBorderColor","toDateString","options","scales","xAxes","type","onClick","multiplayer","CategoryAverage","sort","categoryScores","blankScores","categoryScoresForEachPlayer","fields","pastures","grain","vegetables","sheep","cattle","horses","blankScoreSheet","averages","avg","categories","Thom","filter","Stats","min","overallTotal","scoreCount","totals","playerBest","playerWorst","averageScore","allGames","MultiplayerRadial","set","setSet","playerAverages","allScores","averageScoresFromObject","dataPointForTopic","topic","playerScore","y","x","ScatterRelationships","setTopic","responsive","b","tooltips","mode","elements","line","fill","gridLines","yAxes","id","show","pointBorderColor","pointBackgroundColor","pointHoverBackgroundColor","pointHoverBorderColor","yAxisID","AgricolaPage","setAllGames","setTotals","setTashVsThom","setMultiplayer","isLoading","setIsLoading","useEffect","axios","headers","process","result","fetchData","then","agricolaGames","src","agricola","match","blankPlayerScoreSheet","AgricolaScoreSheet","playerScores","onChange","e","updateForm","target","cat","toUpperCase","concat","slice","AgricolaScoreModal","errors","setErrors","player1Form","setPlayer1Form","player2Form","setPlayer2Form","player3Form","setPlayer3Form","player4Form","setPlayer4Form","player5Form","setPlayer5Form","numberOfPlayers","setNumberOfPlayers","activePlayerForms","setActivePlayerForms","allPlayerForms","handleNumberOfPlayers","numOfPlayers","hideModal","dateString","getDate","checked","playerForm","handlePlayerScores","TerraformingMarsPage","App","view","setView","showModal","setShowModal","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.2d9c2af9.chunk.js","sourcesContent":["import React from \"react\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport { SinglePlayerScore } from \"../models/playerScore\";\n\nconst PieChart = (props) => {\n  const labels = Object.keys(props.scores).map((player) => {\n    return player === \"draw\" ? \"Draw\" : `${player} Wins`;\n  });\n  const scoresData = Object.values(props.scores);\n\n  const data = {\n    labels,\n    datasets: [\n      {\n        data: scoresData,\n        backgroundColor: props.backgroundColor,\n        hoverBackgroundColor: props.backgroundColor,\n        borderColor: \"black\",\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  const legendOpts = {\n    display: true,\n    position: \"right\",\n    fullWidth: false,\n    reverse: false,\n    labels: {\n      fontColor: \"greysmoke\",\n    },\n  };\n\n  const totalGames = Object.values(props.scores as SinglePlayerScore).reduce(\n    (acc, val) => (acc += val)\n  );\n\n  const winPercentages = Object.entries(props.scores as SinglePlayerScore).map(\n    ([player, winCount]) => {\n      return player === \"draw\"\n        ? `${Math.round(\n            (winCount / totalGames) * 100\n          )}% of games ended in a draw!`\n        : `${player} has won ${Math.round(\n            (winCount / totalGames) * 100\n          )}% of games`;\n    }\n  );\n\n  return (\n    <div className=\"pie-grid\">\n      <Doughnut data={data} legend={legendOpts}></Doughnut>\n      <div>\n        {winPercentages.map((string, index) => (\n          <p className=\"win-stats\" key={index}>\n            {string}\n          </p>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default PieChart;\n","import { GameScore } from \"../models/game\";\nimport {\n  PlayerAllScores,\n  PlayerScore,\n  SinglePlayerScore,\n} from \"../models/playerScore\";\nimport { PlayerCategoryScores, ScoreSheet } from \"./scoreSheet\";\n\nexport const totalScoresForGame = (playersArray: PlayerScore[]) => {\n  return playersArray.map((player) => {\n    return {\n      score: player.scores.find((score) => score.category === \"total\").value,\n      player: player.name,\n    };\n  });\n};\n\nexport const scoresForEachPlayer = (games: GameScore[]): PlayerAllScores => {\n  return games.reduce((acc, game) => {\n    game.players.forEach((player) => {\n      const total = player.scores.find((score) => score.category === \"total\")\n        .value;\n      acc[player.name] = acc[player.name]\n        ? [...acc[player.name], total]\n        : [total];\n    });\n    return acc;\n  }, {});\n};\n\nexport const categoryScoresForEachPlayer = (\n  games: GameScore[],\n  blankScores: PlayerCategoryScores\n): PlayerCategoryScores => {\n  return games.reduce((acc, game) => {\n    game.players.forEach((player) => {\n      for (let category of player.scores) {\n        acc[player.name][category.category]\n          ? acc[player.name][category.category].push(category.value)\n          : (acc[player.name][category.category] = [category.value]);\n      }\n    });\n    return acc;\n  }, blankScores);\n};\n\nexport const averageScoresFromObject = (\n  allScores: PlayerAllScores\n): SinglePlayerScore => {\n  return Object.keys(allScores).reduce((acc, player) => {\n    acc[player] = averageScoreFromArray(allScores[player]);\n    return acc;\n  }, {});\n};\n\nexport const totalScore = (playerScore: PlayerScore): number => {\n  return playerScore.scores.find((score) => score.category === \"total\").value;\n};\n\nexport const averageScoreFromArray = (scoreArray: number[]): number => {\n  const average = scoreArray.reduce((a, v) => (a += v)) / scoreArray.length;\n  return Number(average.toFixed(2));\n};\n\nexport const winCounts = (games: GameScore[]) =>\n  games.reduce((acc, game): SinglePlayerScore => {\n    let totalsForGame = totalScoresForGame(game.players);\n\n    let totalScoreArray = totalsForGame.map((player) => player.score);\n    let highScore = Math.max(...totalScoreArray);\n\n    if (totalScoreArray.every((score) => score === totalScoreArray[0])) {\n      acc[\"draw\"] ? (acc[\"draw\"] += 1) : (acc[\"draw\"] = 1);\n    } else {\n      totalsForGame.forEach((player) => {\n        if (player.score === highScore) {\n          acc[player.player]\n            ? (acc[player.player] += 1)\n            : (acc[player.player] = 1);\n        }\n      });\n    }\n    return acc;\n  }, {});\n","export const colours = {\n  pink: \"rgb(255, 99, 216)\",\n  green: \"rgb(30, 187, 108)\",\n  yellow: \"rgb(255,205,18)\",\n  turquoise: \"rgb(54, 174, 201)\",\n  salmon: \"rgb(255, 132, 105)\",\n  purple: \"rgb(160, 58, 211)\",\n  blue: \"rgb(30, 119, 239)\",\n  orange: \"rgb(252, 130, 15)\",\n};\n","import PieChart from \"./SinglePie\";\nimport React from \"react\";\nimport { winCounts } from \"../helpers/scoreCalculations\";\nimport { colours } from \"../models/colourScheme\";\n\nconst PieCharts = (props) => {\n  return (\n    <div className=\"pie-container container\">\n      <header className=\"header\">Win Lose Draw!</header>\n      <PieChart\n        scores={winCounts(props.tashVsThom)}\n        backgroundColor={Object.values(colours)}\n      ></PieChart>\n    </div>\n  );\n};\n\nexport default PieCharts;\n","import { GameScore } from \"../models/game\";\n\nexport const getPlayers = (games: GameScore[]): string[] => {\n  return games.reduce((acc, game) => {\n    game.players.forEach((player) => {\n      !acc.includes(player.name) && acc.push(player.name);\n    });\n    return acc;\n  }, []);\n};\n","export const dateRegex = /[0-3]\\d[\\/|\\-][0-1]\\d[\\/|\\-][1-2]\\d\\d\\d/;\nexport const dateFromString = (date: string): Date => {\n  const [day, month, year] = date.split(new RegExp(\"/|-\"));\n  return new Date(Number(year), Number(month) - 1, Number(day));\n};\n","import React, { useState } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { getPlayers } from \"../helpers/getPlayers\";\nimport { scoresForEachPlayer } from \"../helpers/scoreCalculations\";\nimport { colours } from \"../models/colourScheme\";\nimport { GameScore } from \"../models/game\";\nimport { dateFromString, dateRegex } from \"../helpers/date\";\nimport { PlayerAllScores } from \"../models/playerScore\";\n\nconst FinalScoresBar = (props) => {\n  const [pool, setPool] = useState<GameScore[]>(props.twoPlayer);\n\n  const players = getPlayers(pool);\n  const scores: PlayerAllScores = scoresForEachPlayer(pool);\n\n  const sets = players.map((player, i) => {\n    return {\n      label: player,\n      backgroundColor: Object.values(colours)[i],\n      borderColor: \"black\",\n      borderWidth: 0.5,\n      hoverBackgroundColor: \"rgb(54, 174, 201)\",\n      hoverBorderColor: \"black\",\n      data: scores[player],\n    };\n  });\n\n  const data = {\n    labels: pool.map((game) => dateFromString(game.date).toDateString()),\n    datasets: sets,\n    options: {\n      scales: {\n        xAxes: [\n          {\n            type: \"time\",\n          },\n        ],\n      },\n    },\n  };\n\n  return (\n    <div className=\"bar-container container\">\n      <header className=\"header\">Final Scores</header>\n      <div className=\"button-container\">\n        <button\n          className=\"agricola-button\"\n          onClick={() => setPool(props.twoPlayer)}\n        >\n          Two Player\n        </button>\n        <button\n          className=\"agricola-button\"\n          onClick={() => setPool(props.multiplayer)}\n        >\n          Multiplayer\n        </button>\n        <button\n          className=\"agricola-button\"\n          onClick={() => setPool(props.games)}\n        >\n          All Games\n        </button>\n      </div>\n      <Bar data={data} />\n    </div>\n  );\n};\n\nexport default FinalScoresBar;\n","import React, { useState } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { getPlayers } from \"../helpers/getPlayers\";\nimport { blankScoreSheet, PlayerCategoryScores } from \"../helpers/scoreSheet\";\nimport { categoryScoresForEachPlayer } from \"../helpers/scoreCalculations\";\nimport { colours } from \"../models/colourScheme\";\n\nconst CategoryAverage = (props) => {\n  const [pool, setPool] = useState(props.games);\n  const players = getPlayers(pool).sort();\n\n  const blankScores: PlayerCategoryScores = blankScoreSheet(players);\n  const categoryScores: PlayerCategoryScores = categoryScoresForEachPlayer(\n    pool,\n    blankScores\n  );\n\n  let averages: PlayerCategoryScores = players.reduce((acc, player) => {\n    acc[player] = {};\n    return acc;\n  }, {});\n\n  for (let player in categoryScores) {\n    for (let category in categoryScores[player]) {\n      if (categoryScores[player][category].length > 0) {\n        let total = categoryScores[player][category].reduce(\n          (acc, score) => (acc += score)\n        );\n\n        let avg = total / categoryScores[player][category].length;\n        averages[player][category] = avg.toFixed(2);\n      }\n    }\n  }\n\n  const categories = Object.keys(averages.Thom);\n  const getAverages = (name) => {\n    return Object.entries(averages[name])\n      .filter(([category, _]) => category !== \"total\")\n      .map(([_, value]) => value);\n  };\n\n  const sets = players.map((player, i) => {\n    return {\n      label: player,\n      backgroundColor: Object.values(colours)[i],\n      borderColor: \"black\",\n      borderWidth: 0.5,\n      hoverBackgroundColor: Object.values(colours)[i],\n      hoverBorderColor: \"black\",\n      data: getAverages(player),\n    };\n  });\n  const data = {\n    labels: categories.filter((category) => category !== \"total\"),\n    datasets: sets,\n  };\n\n  return (\n    <div className=\"category-container container\">\n      <header className=\"header\">Category Averages</header>\n      <div className=\"button-container\">\n        <button\n          className=\"agricola-button\"\n          onClick={() => setPool(props.twoPlayer)}\n        >\n          Two Player\n        </button>\n        <button\n          className=\"agricola-button\"\n          onClick={() => setPool(props.multiplayer)}\n        >\n          Multiplayer\n        </button>\n        <button\n          className=\"agricola-button\"\n          onClick={() => setPool(props.games)}\n        >\n          All Games\n        </button>\n      </div>\n      <Bar data={data}></Bar>\n    </div>\n  );\n};\n\nexport default CategoryAverage;\n","export interface ScoreSheet {\n  fields: number[];\n  pastures: number[];\n  grain: number[];\n  vegetables: number[];\n  sheep: number[];\n  \"wild boar\": number[];\n  cattle: number[];\n  \"unused spaces\": number[];\n  \"fenced stables\": number[];\n  \"clay rooms\": number[];\n  \"stone rooms\": number[];\n  \"family members\": number[];\n  \"points for cards\": number[];\n  \"bonus points\": number[];\n  total: number[];\n  horses?: number[];\n}\n\nexport interface PlayerCategoryScores {\n  [player: string]: ScoreSheet;\n}\n\nexport const blankScoreSheet = (players: string[]): PlayerCategoryScores => {\n  return players.reduce((acc, player) => {\n    acc[player] = {\n      fields: [],\n      pastures: [],\n      grain: [],\n      vegetables: [],\n      sheep: [],\n      \"wild boar\": [],\n      cattle: [],\n      \"unused spaces\": [],\n      \"fenced stables\": [],\n      \"clay rooms\": [],\n      \"stone rooms\": [],\n      \"family members\": [],\n      \"points for cards\": [],\n      \"bonus points\": [],\n      horses: [],\n    };\n    return acc;\n  }, {});\n};\n","import React from \"react\";\nimport { totalScore } from \"../helpers/scoreCalculations\";\nconst Stats = (props) => {\n  let max = { name: \"\", score: 0 };\n  let min = { name: \"\", score: 100 };\n  let overallTotal = 0;\n  let scoreCount = 0;\n  for (let player in props.totals) {\n    let playerBest = Math.max(...props.totals[player]);\n    let playerWorst = Math.min(...props.totals[player]);\n    if (playerBest > max.score) {\n      max.name = player;\n      max.score = playerBest;\n    }\n    if (playerWorst < min.score) {\n      min.name = player;\n      min.score = playerWorst;\n    }\n\n    let playerTotal = props.totals[player].reduce((a, v) => (a += v));\n    overallTotal += playerTotal;\n    scoreCount += props.totals[player].length;\n  }\n  let averageScore = overallTotal / scoreCount;\n  return (\n    <div className=\"stats-container container\">\n      <header className=\"header stats-header\">\n        Some stats from our Agricola Games\n      </header>\n      <p>\n        Total Games Recorded:\n        <span className=\"stat-text\"> {props.allGames.length}</span>\n      </p>\n      <p>\n        Of those games,\n        <span className=\"stat-text\"> {props.tashVsThom.length}</span> were 2\n        player\n      </p>\n      <p>\n        And <span className=\"stat-text\"> {props.multiplayer.length}</span> were\n        multiplayer.\n      </p>\n      <p>\n        The Highest score from all games was\n        <span className=\"stat-text\"> {max.score}</span> scored by the\n        indefatigable\n        <span className=\"stat-text\"> {max.name}</span>!\n      </p>\n      <p>\n        And the lowest score of all time was\n        <span className=\"stat-text\"> {min.score}</span> scored by the\n        unstoppable\n        <span className=\"stat-text\"> {min.name}</span>!\n      </p>\n      <p>\n        The average score across all games is as respectable\n        <span className=\"stat-text\"> {averageScore.toFixed(2)}</span>\n      </p>\n    </div>\n  );\n};\n\nexport default Stats;\n","import React, { useState } from \"react\";\nimport { Polar } from \"react-chartjs-2\";\nimport {\n  scoresForEachPlayer,\n  averageScoresFromObject,\n} from \"../helpers/scoreCalculations\";\nimport { colours } from \"../models/colourScheme\";\nimport { SinglePlayerScore } from \"../models/playerScore\";\n\nconst MultiplayerRadial = (props) => {\n  const [set, setSet] = useState(props.multiplayer);\n  let allScores = scoresForEachPlayer(set);\n\n  let playerAverages: SinglePlayerScore = averageScoresFromObject(allScores);\n\n  const data = {\n    datasets: [\n      {\n        data: Object.values(playerAverages),\n        backgroundColor: Object.values(colours),\n        label: \"\",\n        borderColor: \"black\",\n        borderWidth: 1,\n      },\n    ],\n    labels: Object.keys(playerAverages),\n  };\n  const legendOpts = {\n    display: true,\n    position: \"right\",\n    fullWidth: false,\n    reverse: false,\n    labels: {\n      fontColor: \"greysmoke\",\n    },\n  };\n  return (\n    <div className=\"radial-container container\">\n      <header className=\"header\">Average Game Scores</header>\n\n      <div className=\"button-container\">\n        <button\n          className=\"agricola-button\"\n          onClick={() => setSet(props.twoPlayer)}\n        >\n          Two Player\n        </button>\n        <button\n          className=\"agricola-button\"\n          onClick={() => setSet(props.multiplayer)}\n        >\n          Mutliplayer\n        </button>\n        <button\n          className=\"agricola-button\"\n          onClick={() => setSet(props.allGames)}\n        >\n          All Games\n        </button>\n      </div>\n      <Polar data={data} legend={legendOpts}></Polar>\n    </div>\n  );\n};\n\nexport default MultiplayerRadial;\n","import { GameScore } from \"../models/game\";\nimport { totalScore } from \"./scoreCalculations\";\n\nexport const dataPointForTopic = (topic: string, games: GameScore[]) => {\n  return games.reduce((acc, game) => {\n    game.players.forEach((player) => {\n      acc.push({\n        y: player.scores.find(\n          (score) => score.category === topic && score.value.toFixed\n        ).value,\n        x: totalScore(player),\n      });\n    });\n    return acc;\n  }, []);\n};\n","import React, { useState } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { dataPointForTopic } from \"../helpers/chartDataManipulation\";\nimport { colours } from \"../models/colourScheme\";\n\nconst ScatterRelationships = (props) => {\n  const [topic, setTopic] = useState(\"family members\");\n\n  const options = {\n    responsive: true,\n    labels: dataPointForTopic(\"family members\", props.allGames)\n      .sort((a, b) => (a.x > b.x ? 1 : -1))\n      .map((score) => score.y),\n    tooltips: {\n      mode: \"label\",\n    },\n    elements: {\n      line: {\n        fill: false,\n      },\n    },\n    scales: {\n      xAxes: [\n        {\n          display: true,\n          gridLines: {\n            display: false,\n          },\n          labels: dataPointForTopic(\"family members\", props.allGames)\n            .sort((a, b) => (a.x > b.x ? 1 : -1))\n            .map((score) => score.x),\n        },\n      ],\n      yAxes: [\n        {\n          type: \"linear\",\n          display: true,\n          position: \"left\",\n          id: \"y-axis-1\",\n          gridLines: {\n            display: false,\n          },\n          labels: {\n            show: true,\n          },\n        },\n        {\n          type: \"linear\",\n          display: true,\n          position: \"right\",\n          id: \"y-axis-2\",\n          gridLines: {\n            display: false,\n          },\n          labels: {\n            show: true,\n          },\n        },\n      ],\n    },\n  };\n\n  const data = {\n    datasets: [\n      {\n        label: \"Score\",\n        type: \"line\",\n        data: dataPointForTopic(topic, props.allGames)\n          .sort((a, b) => (a.x > b.x ? 1 : -1))\n          .map((score) => score.x),\n        fill: false,\n        borderColor: colours.salmon,\n        backgroundColor: colours.yellow,\n        pointBorderColor: colours.salmon,\n        pointBackgroundColor: colours.yellow,\n        pointHoverBackgroundColor: colours.green,\n        pointHoverBorderColor: colours.green,\n        yAxisID: \"y-axis-2\",\n      },\n      {\n        type: \"bar\",\n        label: topic,\n        data: dataPointForTopic(topic, props.allGames)\n          .sort((a, b) => (a.x > b.x ? 1 : -1))\n          .map((score) => score.y),\n        fill: false,\n        backgroundColor: \"#ca7eee\",\n        borderColor: \"black\",\n        hoverBackgroundColor: \"#71B37C\",\n        hoverBorderColor: \"#71B37C\",\n        yAxisID: \"y-axis-1\",\n      },\n    ],\n  };\n\n  return (\n    <div className=\"scatter-container container\">\n      <header className=\"header\">Scattered Relationships</header>\n      <Bar data={data} options={options}></Bar>\n      <div className=\"button-container\">\n        <button\n          className=\"agricola-button\"\n          onClick={() => setTopic(\"family members\")}\n        >\n          Family Members\n        </button>\n        <button\n          className=\"agricola-button\"\n          onClick={() => setTopic(\"bonus points\")}\n        >\n          Bonus Points\n        </button>\n        <button\n          className=\"agricola-button\"\n          onClick={() => setTopic(\"points for cards\")}\n        >\n          Points For Cards\n        </button>\n        <button\n          className=\"agricola-button\"\n          onClick={() => setTopic(\"stone rooms\")}\n        >\n          Stone Hut Rooms\n        </button>\n        <button\n          className=\"agricola-button\"\n          onClick={() => setTopic(\"unused spaces\")}\n        >\n          Unused Spaces\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ScatterRelationships;\n","import React, { useState, useEffect } from \"react\";\nimport PieCharts from \"./PieCharts\";\nimport FinalScoresBar from \"./FinalScoresBar\";\nimport CategoryAverage from \"./CategoryAverages\";\nimport Stats from \"./Stats\";\nimport MultiplayerRadial from \"./MultiplayerRadial\";\nimport ScatterRelationships from \"./ScatterRelationships\";\nimport { scoresForEachPlayer } from \"../helpers/scoreCalculations\";\nimport axios from \"axios\";\nimport { GameScore } from \"../models/game\";\nimport { PlayerAllScores } from \"../models/playerScore\";\nimport agricola from \"../images/agricolaheader.png\";\nimport { dateRegex } from \"../helpers/date\";\n\ninterface apiData {\n  agricolaGames: GameScore[];\n}\n\nconst AgricolaPage = () => {\n  const [allGames, setAllGames] = useState<GameScore[]>();\n  const [totals, setTotals] = useState<PlayerAllScores>();\n  const [tashVsThom, setTashVsThom] = useState<GameScore[]>();\n  const [multiplayer, setMultiplayer] = useState<GameScore[]>();\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const pword = process.env.REACT_APP_API_KEY;\n\n    const fetchData = async () => {\n      setIsLoading(true);\n      const result = await axios(\n        \"https://api.jsonbin.io/b/5ea01b9b2940c704e1dc9684/latest\",\n        {\n          headers: {\n            \"secret-key\": `$2b$10$tVk${pword}`,\n          },\n        }\n      );\n      return result.data;\n    };\n    fetchData().then((data: apiData) => {\n      setAllGames(data.agricolaGames);\n      setTotals(scoresForEachPlayer(data.agricolaGames));\n      setTashVsThom(\n        data.agricolaGames.filter((game) => game.players.length === 2)\n      );\n      setMultiplayer(\n        data.agricolaGames.filter((game) => game.players.length > 2)\n      );\n      setIsLoading(false);\n    });\n  }, []);\n\n  if (!isLoading) {\n    return (\n      <div className=\"agricola-page-container\">\n        <div className=\"page-header header\">\n          <div className=\"image-container\">\n            <img src={agricola}></img>\n          </div>\n        </div>\n        <Stats\n          totals={totals}\n          tashVsThom={tashVsThom}\n          multiplayer={multiplayer}\n          allGames={allGames}\n        ></Stats>\n        <PieCharts tashVsThom={tashVsThom}></PieCharts>\n        <FinalScoresBar\n          games={allGames.filter((game) => game.date.match(dateRegex))}\n          twoPlayer={tashVsThom.filter((game) => game.date.match(dateRegex))}\n          multiplayer={multiplayer.filter((game) => game.date.match(dateRegex))}\n        ></FinalScoresBar>\n        <CategoryAverage\n          games={allGames}\n          twoPlayer={tashVsThom}\n          multiplayer={multiplayer}\n        ></CategoryAverage>\n        <MultiplayerRadial\n          multiplayer={multiplayer}\n          twoPlayer={tashVsThom}\n          allGames={allGames}\n        ></MultiplayerRadial>\n        <ScatterRelationships allGames={allGames}></ScatterRelationships>\n      </div>\n    );\n  } else {\n    return <div>loading</div>;\n  }\n};\n\nexport default AgricolaPage;\n","import { CategoryScore } from \"./categoryScore\";\n\nexport interface PlayerScore {\n  name: string;\n  scores: CategoryScore[];\n}\n\nexport interface SinglePlayerScore {\n  [player: string]: number;\n}\n\nexport interface PlayerAllScores {\n  [playerName: string]: number[];\n}\n\nexport const blankPlayerScoreSheet: PlayerScore = {\n  name: \"\",\n  scores: [\n    {\n      category: \"fields\",\n      value: 0,\n    },\n    {\n      category: \"pastures\",\n      value: 0,\n    },\n    {\n      category: \"grain\",\n      value: 0,\n    },\n    {\n      category: \"vegetables\",\n      value: 0,\n    },\n    {\n      category: \"sheep\",\n      value: 0,\n    },\n    {\n      category: \"wild boar\",\n      value: 0,\n    },\n    {\n      category: \"cattle\",\n      value: 0,\n    },\n    {\n      category: \"unused spaces\",\n      value: 0,\n    },\n    {\n      category: \"fenced stables\",\n      value: 0,\n    },\n    {\n      category: \"clay rooms\",\n      value: 0,\n    },\n    {\n      category: \"stone rooms\",\n      value: 0,\n    },\n    {\n      category: \"family members\",\n      value: 0,\n    },\n    {\n      category: \"bonus points\",\n      value: 0,\n    },\n    {\n      category: \"points for cards\",\n      value: 0,\n    },\n    {\n      category: \"horses\",\n      value: 0,\n    },\n  ],\n};\n","import React, { useState } from \"react\";\nimport { blankPlayerScoreSheet, PlayerScore } from \"../models/playerScore\";\n\ninterface Props {\n  playerScores: PlayerScore;\n  updateForm;\n}\n\nconst AgricolaScoreSheet = (props: Props) => {\n  return (\n    <div className=\"form-player\">\n      <label className=\"category-label\">\n        Name:\n        <input\n          type=\"text\"\n          value={props.playerScores.name}\n          onChange={(e) =>\n            props.updateForm({\n              name: e.target.value,\n              scores: props.playerScores.scores,\n            })\n          }\n        />\n      </label>\n      <div className=\"category-scores-grid\">\n        {blankPlayerScoreSheet.scores.map((cat) => (\n          <label className=\"category-label\">\n            {cat.category[0].toUpperCase().concat(cat.category.slice(1))}\n            <input\n              type=\"number\"\n              value={props.playerScores[cat.category]}\n              className=\"category-input\"\n              onChange={(e) =>\n                props.updateForm({\n                  name: props.playerScores.name,\n                  scores: {\n                    [cat.category]: e.target.value,\n                    ...props.playerScores.scores,\n                  },\n                })\n              }\n            />\n          </label>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default AgricolaScoreSheet;\n","import React, { useState } from \"react\";\nimport { dateFromString, dateRegex } from \"../helpers/date\";\nimport { blankPlayerScoreSheet, PlayerScore } from \"../models/playerScore\";\nimport AgricolaScoreSheet from \"./AgricolaScoreSheet\";\n\nconst AgricolaScoreModal = (props) => {\n  const [errors, setErrors] = useState({ date: false });\n\n  const [player1Form, setPlayer1Form] = useState<PlayerScore>(\n    blankPlayerScoreSheet\n  );\n  const [player2Form, setPlayer2Form] = useState<PlayerScore>(\n    blankPlayerScoreSheet\n  );\n  const [player3Form, setPlayer3Form] = useState<PlayerScore>(\n    blankPlayerScoreSheet\n  );\n  const [player4Form, setPlayer4Form] = useState<PlayerScore>(\n    blankPlayerScoreSheet\n  );\n  const [player5Form, setPlayer5Form] = useState<PlayerScore>(\n    blankPlayerScoreSheet\n  );\n  const [numberOfPlayers, setNumberOfPlayers] = useState(2);\n  const [activePlayerForms, setActivePlayerForms] = useState<PlayerScore[]>([\n    player1Form,\n    player2Form,\n  ]);\n\n  const allPlayerForms = [\n    player1Form,\n    player2Form,\n    player3Form,\n    player4Form,\n    player5Form,\n  ];\n\n  const validateDate = (dateString: string) => {\n    if (!dateString.match(dateRegex)) {\n      setErrors({ date: true });\n    } else {\n      const date = dateFromString(dateString);\n      if (!date.getDate()) {\n        setErrors({ date: true });\n      } else {\n        setErrors({ date: false });\n      }\n    }\n  };\n\n  const handleSubmit = () => {};\n\n  const handlePlayerScores = (scores: PlayerScore, index: number) => {\n    switch (index) {\n      case 1:\n        setPlayer1Form(scores);\n        break;\n      case 2:\n        setPlayer2Form(scores);\n        break;\n      case 3:\n        setPlayer3Form(scores);\n        break;\n      case 4:\n        setPlayer4Form(scores);\n        break;\n      case 5:\n        setPlayer5Form(scores);\n        break;\n    }\n  };\n\n  const handleNumberOfPlayers = (numOfPlayers: number) => {\n    setNumberOfPlayers(numOfPlayers);\n    setActivePlayerForms(allPlayerForms.slice(0, numOfPlayers));\n  };\n\n  return (\n    <div className=\"agricola-modal modal\">\n      <button onClick={props.hideModal}>CLOSE X</button>\n      <div className=\"form-container\">\n        <div className=\"form-metadata-container\">\n          <div className=\"game-info-container\">\n            <label>\n              Date:{\" \"}\n              <input\n                type=\"text\"\n                onChange={(e) => validateDate(e.target.value)}\n              ></input>\n            </label>\n            <label>\n              Location: <input type=\"text\"></input>\n            </label>\n          </div>\n          {errors.date && (\n            <p className=\"error-message\">\n              Please enter a date in the format dd/mm/yyyy\n            </p>\n          )}\n          <div className=\"player-radio-container\">\n            <label>\n              <input\n                type=\"radio\"\n                value=\"1player\"\n                checked={numberOfPlayers === 1}\n                onChange={() => handleNumberOfPlayers(1)}\n              />\n              1 Player\n            </label>\n            <label>\n              <input\n                type=\"radio\"\n                value=\"2player\"\n                checked={numberOfPlayers === 2}\n                onChange={() => handleNumberOfPlayers(2)}\n              />\n              2 Player\n            </label>\n            <label>\n              <input\n                type=\"radio\"\n                value=\"3player\"\n                checked={numberOfPlayers === 3}\n                onChange={() => handleNumberOfPlayers(3)}\n              />\n              3 Player\n            </label>\n            <label>\n              <input\n                type=\"radio\"\n                value=\"4player\"\n                checked={numberOfPlayers === 4}\n                onChange={() => handleNumberOfPlayers(4)}\n              />\n              4 Player\n            </label>\n            <label>\n              <input\n                type=\"radio\"\n                value=\"5player\"\n                checked={numberOfPlayers === 5}\n                onChange={() => handleNumberOfPlayers(5)}\n              />\n              5 Player\n            </label>\n          </div>\n        </div>\n        <div className=\"score-input-container\">\n          {activePlayerForms.map((playerForm, index) => (\n            <AgricolaScoreSheet\n              playerScores={playerForm}\n              updateForm={(value) => handlePlayerScores(value, index + 1)}\n            ></AgricolaScoreSheet>\n          ))}\n        </div>\n      </div>\n      <button>Submit</button>\n    </div>\n  );\n};\n\nexport default AgricolaScoreModal;\n","import React from \"react\";\n\nconst TerraformingMarsPage = () => {\n  return <div>TerraformingMarsPage</div>;\n};\n\nexport default TerraformingMarsPage;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport AgricolaPage from \"./Components/AgricolaPage\";\nimport AgricolaScoreModal from \"./Components/AgricolaScoreModal\";\nimport TerraformingMarsPage from \"./Components/TerraformingMarsPage\";\n\nconst App = () => {\n  const [view, setView] = useState(\"Agricola\");\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <nav className=\"navbar\">\n        <div>\n          <button onClick={() => setView(\"Agricola\")}>Agricola</button>\n          <button onClick={() => setView(\"TerraformingMars\")}>\n            Terraforming Mars\n          </button>\n        </div>\n        <button onClick={() => setShowModal(true)}>Agricola Scoresheet</button>\n      </nav>\n      {view === \"Agricola\" && <AgricolaPage></AgricolaPage>}\n      {view === \"TerraformingMars\" && (\n        <TerraformingMarsPage></TerraformingMarsPage>\n      )}\n      {showModal && (\n        <AgricolaScoreModal\n          hideModal={() => setShowModal(false)}\n        ></AgricolaScoreModal>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/agricolaheader.a09a232b.png\";"],"sourceRoot":""}