{"version":3,"sources":["models/agricola/colourScheme.ts","Components/SinglePie.tsx","helpers/scoreCalculations.ts","Components/PieCharts.tsx","helpers/getPlayers.ts","helpers/date.ts","Components/ScoresOverTime.tsx","Components/CategoryScores.tsx","Components/Stats.tsx","Components/MultiplayerRadial.tsx","helpers/chartDataManipulation.ts","Components/ScatterRelationships.tsx","helpers/fetchData.ts","Components/AgricolaPage.tsx","models/agricola/playerScore.ts","Components/AgricolaScoreSheet.tsx","Components/ConfirmModal.tsx","Components/AgricolaScoreModal.tsx","Components/TerraformingMarsPage.tsx","Components/WingspanPage.tsx","App.js","index.js","images/agricolaheader.png","images/tmboxheader.png","images/wingspanbirdheader.jpeg","images/wingspancards.jpeg"],"names":["colours","salmon","green","yellow","turquoise","pink","purple","blue","orange","namedColours","Thom","Jonny","Jeff","Tash","Tom","Rob","James","draw","PieChart","props","labels","Object","keys","scores","map","player","console","log","scoresData","values","data","datasets","backgroundColor","hoverBackgroundColor","borderColor","borderWidth","totalGames","reduce","acc","val","winPercentages","entries","winCount","Math","round","className","legend","display","position","fullWidth","reverse","fontColor","string","index","key","scoresForEachPlayer","games","game","players","forEach","total","find","score","category","value","name","getGameCategories","averageScoreFromArray","scoreArray","average","a","v","length","Number","toFixed","PieCharts","tashVsThom","totalsForGame","totalScoreArray","highScore","max","every","getPlayers","includes","push","dateRegex","dateFromString","date","split","RegExp","day","month","year","Date","FinalScoresBar","useState","twoPlayer","pool","setPool","sets","i","label","fill","hoverBorderColor","lineTension","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","toDateString","options","scales","xAxes","type","undefined","multiplayer","onClick","maintainAspectRatio","CategoryScores","setPlayer","sort","categoryScores","categories","playerScores","high","low","min","highSet","p","Stats","overallTotal","scoreCount","totals","playerBest","playerWorst","averageScore","gameName","allGames","MultiplayerRadial","set","setSet","playerAverages","allScores","averageScoresFromObject","dataPointForTopic","topic","playerScore","y","x","ScatterRelationships","setTopic","responsive","b","tooltips","mode","elements","line","gridLines","yAxes","id","show","yAxisID","cat","fetchData","pword","location","Axios","headers","result","AgricolaPage","setAllGames","setTotals","setTashVsThom","setMultiplayer","setCategories","isLoading","setIsLoading","useEffect","process","then","agricolaGames","filter","src","agricola","alt","match","blankBaseGameScoreSheet","blankFarmersOfTheMoorScoreSheet","AgricolaScoreSheet","scoreSheet","baseGame","onChange","e","updateForm","target","toUpperCase","concat","toString","slice","sc","ConfirmScoresModal","password","setPassword","incorrectPassword","setIncorrectPassword","placeholder","REACT_APP_SUBMIT_PASSWORD","submit","cancel","AgricolaScoreModal","gameType","updateGameType","errors","setErrors","0","1","2","3","4","setPlayerScores","numberOfPlayers","setNumberOfPlayers","setDate","setGameData","confirmPopup","setConfirmPopup","handleNumberOfPlayers","numOfPlayers","hideModal","dateString","getDate","checked","playerForm","handlePlayerScores","playerTotal","categoryScore","gameData","handleSubmit","TerraformingMarsPage","tmGames","tmheader","WingspanPage","wingspanGames","wingspanbirdheader","wingspancards","App","view","setView","showModal","setShowModal","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.08d9d9ca.chunk.js","sourcesContent":["export const colours = {\n  salmon: \"rgb(255, 132, 105)\",\n  green: \"rgb(30, 187, 108)\",\n  yellow: \"rgb(255,205,18)\",\n  turquoise: \"rgb(54, 174, 201)\",\n  pink: \"rgb(255, 99, 216)\",\n  purple: \"rgb(160, 58, 211)\",\n  blue: \"rgb(30, 119, 239)\",\n  orange: \"rgb(252, 130, 15)\",\n};\n\nexport const namedColours = {\n  \"CJ & Jeff\": \"rgb(255, 132, 105)\",\n  Thom: \"rgb(30, 187, 108)\",\n  Jonny: \"rgb(255,205,18)\",\n  Jeff: \"rgb(54, 174, 201)\",\n  Tash: \"rgb(255, 99, 216)\",\n  Tom: \"rgb(160, 58, 211)\",\n  Rob: \"rgb(30, 119, 239)\",\n  James: \"rgb(252, 130, 15)\",\n  draw: \"rgb(255,205,18)\",\n};\n","import React from 'react';\nimport { Doughnut } from 'react-chartjs-2';\nimport { namedColours } from '../models/agricola/colourScheme';\nimport { SinglePlayerScore } from '../models/game';\n\nconst PieChart = (props) => {\n  const labels = Object.keys(props.scores).map((player) => {\n    return player === 'draw' ? 'Draw' : `${player} Wins`;\n  });\n  console.log('tshVsThom', props);\n  const scoresData = Object.values(props.scores);\n  const colours = Object.keys(props.scores).map(\n    (player) => namedColours[player],\n  );\n  const data = {\n    labels,\n    datasets: [\n      {\n        data: scoresData,\n        backgroundColor: colours,\n        hoverBackgroundColor: colours,\n        borderColor: 'black',\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  const legendOpts = {\n    display: true,\n    position: 'right',\n    fullWidth: false,\n    reverse: false,\n    labels: {\n      fontColor: 'greysmoke',\n    },\n  };\n\n  const totalGames = Object.values(props.scores as SinglePlayerScore).reduce(\n    (acc, val) => (acc += val),\n  );\n\n  const winPercentages = Object.entries(props.scores as SinglePlayerScore).map(\n    ([player, winCount]) => {\n      return player === 'draw'\n        ? `${Math.round(\n            (winCount / totalGames) * 100,\n          )}% of games ended in a draw!`\n        : `${player} has won ${Math.round(\n            (winCount / totalGames) * 100,\n          )}% of games`;\n    },\n  );\n\n  return (\n    <div className=\"pie-grid\">\n      <Doughnut data={data} legend={legendOpts}></Doughnut>\n      <div>\n        {winPercentages.map((string, index) => (\n          <p className=\"win-stats\" key={index}>\n            {string}\n          </p>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default PieChart;\n","import {\n  AgricolaGameScore,\n  GameScore,\n  PlayerAllScores,\n  PlayerScore,\n  SinglePlayerScore,\n} from '../models/game';\nimport {\n  AllCategoryScoresForPlayer,\n  IndividualCategoryScores,\n} from './scoreSheet';\n\nexport const totalScoresForGame = (playersArray: PlayerScore[]) => {\n  return playersArray.map((player) => {\n    return {\n      score: player.scores.find((score) => score.category === 'total').value,\n      player: player.name,\n    };\n  });\n};\n\nexport const scoresForEachPlayer = (games: GameScore[]): PlayerAllScores => {\n  return games.reduce((acc, game) => {\n    game.players.forEach((player) => {\n      const total = player.scores.find((score) => score.category === 'total')\n        .value;\n      acc[player.name] = acc[player.name]\n        ? [...acc[player.name], total]\n        : [total];\n    });\n    return acc;\n  }, {});\n};\n\nexport const categoryScoresForEachPlayer = (\n  games: GameScore[],\n): AllCategoryScoresForPlayer => {\n  return games.reduce((acc, game) => {\n    game.players.forEach((player) => {\n      for (let category of player.scores) {\n        if (acc[player.name]) {\n          acc[player.name][category.category]\n            ? acc[player.name][category.category].push(category.value)\n            : (acc[player.name][category.category] = [category.value]);\n        } else {\n          acc[player.name] = { [category.category]: [category.value] };\n        }\n      }\n    });\n    return acc;\n  }, {} as AllCategoryScoresForPlayer);\n};\n\nexport const getGameCategories = (game: GameScore) => {\n  return game.players[0].scores.map((score) => score['category']);\n  // .filter((category) => category !== 'total');\n};\n\nexport const averageScoresFromObject = (\n  allScores: PlayerAllScores,\n): SinglePlayerScore => {\n  return Object.keys(allScores).reduce((acc, player) => {\n    acc[player] = averageScoreFromArray(allScores[player]);\n    return acc;\n  }, {});\n};\n\nexport const totalScore = (playerScore: PlayerScore): number => {\n  return playerScore.scores.find((score) => score.category === 'total').value;\n};\n\nexport const averageScoreFromArray = (scoreArray: number[]): number => {\n  const average = scoreArray.reduce((a, v) => (a += v)) / scoreArray.length;\n  return Number(average.toFixed(2));\n};\n\nexport const winCounts = (games: GameScore[]) =>\n  games.reduce((acc, game): SinglePlayerScore => {\n    let totalsForGame = totalScoresForGame(game.players);\n\n    let totalScoreArray = totalsForGame.map((player) => player.score);\n    let highScore = Math.max(...totalScoreArray.map(Number));\n\n    if (totalScoreArray.every((score) => score === totalScoreArray[0])) {\n      acc['draw'] ? (acc['draw'] += 1) : (acc['draw'] = 1);\n    } else {\n      totalsForGame.forEach((player) => {\n        if (player.score === highScore) {\n          acc[player.player]\n            ? (acc[player.player] += 1)\n            : (acc[player.player] = 1);\n        }\n      });\n    }\n    return acc;\n  }, {});\n","import PieChart from './SinglePie';\nimport React from 'react';\nimport { winCounts } from '../helpers/scoreCalculations';\nimport { colours } from '../models/agricola/colourScheme';\n\nconst PieCharts = (props) => {\n  return (\n    <div className=\"pie-container container\">\n      <header className=\"header\">Win Lose Draw!</header>\n      <PieChart\n        scores={winCounts(props.tashVsThom)}\n        backgroundColor={Object.values(colours)}\n      ></PieChart>\n    </div>\n  );\n};\n\nexport default PieCharts;\n","import { GameScore } from '../models/game';\n\nexport const getPlayers = (games: GameScore[]): string[] => {\n  return games.reduce((acc, game) => {\n    game.players.forEach((player) => {\n      !acc.includes(player.name) && acc.push(player.name);\n    });\n    return acc;\n  }, []);\n};\n","export const dateRegex = /[0-3]\\d[/|-][0-1]\\d[/|-][1-2]\\d\\d\\d/;\nexport const dateFromString = (date: string): Date => {\n  const [day, month, year] = date.split(new RegExp('/|-'));\n  return new Date(Number(year), Number(month) - 1, Number(day));\n};\n","import React, { useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { getPlayers } from '../helpers/getPlayers';\nimport { scoresForEachPlayer } from '../helpers/scoreCalculations';\nimport { GameScore, PlayerAllScores } from '../models/game';\nimport { dateFromString } from '../helpers/date';\nimport { namedColours } from '../models/agricola/colourScheme';\n\nconst FinalScoresBar = (props) => {\n  const [pool, setPool] = useState<GameScore[]>(props.twoPlayer);\n\n  const players = getPlayers(pool);\n  const scores: PlayerAllScores = scoresForEachPlayer(pool);\n\n  const sets = players.map((player, i) => {\n    return {\n      label: player,\n      fill: false,\n      borderColor: namedColours[player],\n      borderWidth: 2.0,\n      hoverBackgroundColor: 'rgb(54, 174, 201)',\n      hoverBorderColor: 'black',\n      data: scores[player],\n      lineTension: 0.1,\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: namedColours[player],\n      pointBackgroundColor: '#fff',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: namedColours[player],\n      pointHoverBorderColor: namedColours[player],\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n    };\n  });\n\n  const data = {\n    labels: pool.map((game) => dateFromString(game.date).toDateString()),\n    datasets: sets,\n    options: {\n      scales: {\n        xAxes: [\n          {\n            type: 'time',\n          },\n        ],\n      },\n    },\n  };\n\n  return (\n    <div className=\"bar-container container\">\n      <header className=\"header\">Scores Over Time</header>\n      {props.multiplayer !== undefined && (\n        <div className=\"button-container\">\n          <button\n            className=\"agricola-button\"\n            onClick={() => setPool(props.twoPlayer)}\n          >\n            Two Player\n          </button>\n\n          <button\n            className=\"agricola-button\"\n            onClick={() => setPool(props.multiplayer)}\n          >\n            Multiplayer\n          </button>\n\n          <button\n            className=\"agricola-button\"\n            onClick={() => setPool(props.games)}\n          >\n            All Games\n          </button>\n        </div>\n      )}\n      <Line data={data} options={{ maintainAspectRatio: false }} />\n    </div>\n  );\n};\n\nexport default FinalScoresBar;\n","import React, { useState } from 'react';\nimport { Radar } from 'react-chartjs-2';\nimport { getPlayers } from '../helpers/getPlayers';\nimport { PlayerCategoryScores } from '../helpers/scoreSheet';\nimport {\n  categoryScoresForEachPlayer,\n  getGameCategories,\n} from '../helpers/scoreCalculations';\nimport { GameScore } from '../models/game';\n\ninterface Props {\n  games: GameScore[];\n}\n\nconst CategoryScores = (props: Props) => {\n  const [pool] = useState<GameScore[]>(props.games);\n  const [player, setPlayer] = useState<string>('Tash');\n\n  const players = getPlayers(pool).sort();\n\n  const categoryScores = categoryScoresForEachPlayer(pool);\n  const categories = getGameCategories(pool[0]);\n  let playerScores: PlayerCategoryScores = players.reduce((acc, player) => {\n    acc[player] = {};\n    return acc;\n  }, {});\n\n  for (let player in categoryScores) {\n    for (let category in categoryScores[player]) {\n      let high = Math.max(...categoryScores[player][category]);\n      let low = Math.min(...categoryScores[player][category]);\n      playerScores[player][category] = { high, low };\n    }\n  }\n\n  const highSet = {\n    label: 'High',\n    backgroundColor: 'rgb(65,177,249, 0.7)',\n    borderColor: 'black',\n    borderWidth: 0.5,\n    hoverBorderColor: 'black',\n    data: Object.values(playerScores[player]).map((scores) => scores.high),\n  };\n\n  const lowSet = {\n    label: 'Low',\n    backgroundColor: 'rgb( 255, 144, 67 , 0.8)',\n    borderColor: 'black',\n    borderWidth: 0.5,\n    hoverBorderColor: 'black',\n    data: Object.values(playerScores[player]).map((scores) => scores.low),\n  };\n\n  const data = {\n    labels: categories,\n    datasets: [lowSet, highSet],\n  };\n\n  const legendOpts = {\n    display: true,\n    position: 'top',\n    fullWidth: false,\n    reverse: false,\n    labels: {\n      fontColor: 'greysmoke',\n    },\n  };\n\n  return (\n    <div className=\"category-container container\">\n      <header className=\"header\">Category Breakdown</header>\n      <div className=\"button-container\">\n        {players.map((p) => (\n          <button\n            className={`agricola-button ${p === player ? 'highlighted' : ''}`}\n            onClick={() => setPlayer(p)}\n          >\n            {p}\n          </button>\n        ))}\n      </div>\n      <Radar data={data} legend={legendOpts}></Radar>\n    </div>\n  );\n};\n\nexport default CategoryScores;\n","import React from 'react';\nimport { GameScore, PlayerAllScores } from '../models/game';\n\ninterface Props {\n  totals: PlayerAllScores;\n  tashVsThom: GameScore[];\n  gameName: string;\n  multiplayer?: GameScore[];\n  allGames?: GameScore[];\n}\n\nconst Stats = (props: Props) => {\n  let max = { name: '', score: 0 };\n  let min = { name: '', score: 100 };\n  let overallTotal: number = 0;\n  let scoreCount: number = 0;\n  for (let player in props.totals) {\n    let playerBest = Math.max(...props.totals[player]);\n    let playerWorst = Math.min(...props.totals[player]);\n    if (playerBest > max.score) {\n      max.name = player;\n      max.score = playerBest;\n    }\n    if (playerWorst < min.score) {\n      min.name = player;\n      min.score = playerWorst;\n    }\n\n    let playerTotal = props.totals[player].reduce((a, v) => (a += v));\n\n    overallTotal += playerTotal;\n    scoreCount += props.totals[player].length;\n  }\n\n  let averageScore = overallTotal / scoreCount;\n  return (\n    <div className=\"stats-container container\">\n      <header className=\"header stats-header\">\n        Some stats from our {props.gameName} Games\n      </header>\n      <p>\n        Total Games Recorded:\n        <span className=\"stat-text\"> {props.allGames.length}</span>\n      </p>\n      <p>\n        Of those games,\n        <span className=\"stat-text\"> {props.tashVsThom.length}</span> were 2\n        player\n      </p>\n\n      {props.multiplayer !== undefined && (\n        <p>\n          And <span className=\"stat-text\"> {props.multiplayer.length}</span>{' '}\n          were multiplayer.\n        </p>\n      )}\n\n      <p>\n        The Highest score from all games was\n        <span className=\"stat-text\"> {max.score}</span> scored by the\n        indefatigable\n        <span className=\"stat-text\"> {max.name}</span>!\n      </p>\n      <p>\n        And the lowest score of all time was\n        <span className=\"stat-text\"> {min.score}</span> scored by the\n        unstoppable\n        <span className=\"stat-text\"> {min.name}</span>!\n      </p>\n      <p>\n        The average score across all games is a respectable\n        <span className=\"stat-text\"> {averageScore.toFixed(2)}</span>\n      </p>\n    </div>\n  );\n};\n\nexport default Stats;\n","import React, { useState } from 'react';\nimport { Polar } from 'react-chartjs-2';\nimport {\n  scoresForEachPlayer,\n  averageScoresFromObject,\n} from '../helpers/scoreCalculations';\nimport { namedColours } from '../models/agricola/colourScheme';\nimport { GameScore, SinglePlayerScore } from '../models/game';\n\ninterface Props {\n  multiplayer: GameScore[];\n  twoPlayer: GameScore[];\n  allGames: GameScore[];\n}\n\nconst MultiplayerRadial = (props: Props) => {\n  const [set, setSet] = useState(props.multiplayer);\n  let allScores = scoresForEachPlayer(set);\n\n  let playerAverages: SinglePlayerScore = averageScoresFromObject(allScores);\n\n  const data = {\n    datasets: [\n      {\n        data: Object.values(playerAverages),\n        backgroundColor: Object.keys(playerAverages).map(\n          (player) => namedColours[player],\n        ),\n        label: '',\n        borderColor: 'black',\n        borderWidth: 1,\n      },\n    ],\n    labels: Object.keys(playerAverages),\n  };\n  const legendOpts = {\n    display: true,\n    position: 'right',\n    fullWidth: false,\n    reverse: false,\n    labels: {\n      fontColor: 'greysmoke',\n    },\n  };\n  return (\n    <div className=\"radial-container container\">\n      <header className=\"header\">Average Game Scores</header>\n\n      <div className=\"button-container\">\n        <button\n          className=\"agricola-button\"\n          onClick={() => setSet(props.twoPlayer)}\n        >\n          Two Player\n        </button>\n        <button\n          className=\"agricola-button\"\n          onClick={() => setSet(props.multiplayer)}\n        >\n          Mutliplayer\n        </button>\n        <button\n          className=\"agricola-button\"\n          onClick={() => setSet(props.allGames)}\n        >\n          All Games\n        </button>\n      </div>\n      <Polar data={data} legend={legendOpts}></Polar>\n    </div>\n  );\n};\n\nexport default MultiplayerRadial;\n","import { AgricolaGameScore } from '../models/game';\nimport { totalScore } from './scoreCalculations';\n\nexport const dataPointForTopic = (\n  topic: string,\n  games: AgricolaGameScore[],\n) => {\n  return games.reduce((acc, game) => {\n    game.players.forEach((player) => {\n      acc.push({\n        y: player.scores.find(\n          (score) => score.category === topic && score.value.toFixed,\n        ).value,\n        x: totalScore(player),\n      });\n    });\n    return acc;\n  }, []);\n};\n","import React, { useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { dataPointForTopic } from '../helpers/chartDataManipulation';\nimport { colours } from '../models/agricola/colourScheme';\n\nconst ScatterRelationships = (props) => {\n  const [topic, setTopic] = useState(props.categories[0]);\n\n  const options = {\n    responsive: true,\n    labels: dataPointForTopic(props.categories[0], props.allGames)\n      .sort((a, b) => (a.x > b.x ? 1 : -1))\n      .map((score) => score.y),\n    tooltips: {\n      mode: 'label',\n    },\n    elements: {\n      line: {\n        fill: false,\n      },\n    },\n    scales: {\n      xAxes: [\n        {\n          display: true,\n          gridLines: {\n            display: false,\n          },\n          labels: dataPointForTopic(props.categories[0], props.allGames)\n            .sort((a, b) => (a.x > b.x ? 1 : -1))\n            .map((score) => score.x),\n        },\n      ],\n      yAxes: [\n        {\n          type: 'linear',\n          display: true,\n          position: 'left',\n          id: 'y-axis-1',\n          gridLines: {\n            display: false,\n          },\n          labels: {\n            show: true,\n          },\n        },\n        {\n          type: 'linear',\n          display: true,\n          position: 'right',\n          id: 'y-axis-2',\n          gridLines: {\n            display: false,\n          },\n          labels: {\n            show: true,\n          },\n        },\n      ],\n    },\n  };\n\n  const data = {\n    datasets: [\n      {\n        label: 'Score',\n        type: 'line',\n        data: dataPointForTopic(topic, props.allGames)\n          .sort((a, b) => (a.x > b.x ? 1 : -1))\n          .map((score) => score.x),\n        fill: false,\n        borderColor: colours.purple,\n        backgroundColor: colours.pink,\n        pointBorderColor: colours.purple,\n        pointBackgroundColor: colours.pink,\n        pointHoverBackgroundColor: colours.orange,\n        pointHoverBorderColor: colours.orange,\n        yAxisID: 'y-axis-2',\n      },\n      {\n        type: 'bar',\n        label: topic,\n        data: dataPointForTopic(topic, props.allGames)\n          .sort((a, b) => (a.x > b.x ? 1 : -1))\n          .map((score) => score.y),\n        fill: false,\n        backgroundColor: colours.yellow,\n        borderColor: 'black',\n        hoverBackgroundColor: colours.purple,\n        hoverBorderColor: colours.purple,\n        yAxisID: 'y-axis-1',\n      },\n    ],\n  };\n\n  return (\n    <div className=\"scatter-container container\">\n      <header className=\"header\">Scattered Relationships</header>\n      <Bar data={data} options={options}></Bar>\n      <div className=\"button-container\">\n        {props.categories.map((cat) => (\n          <button className=\"agricola-button\" onClick={() => setTopic(cat)}>\n            {cat}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ScatterRelationships;\n","import Axios from \"axios\";\n\nexport const fetchData = async (pword, location) => {\n\n    const result = await Axios(\n      `https://api.jsonbin.io/b/${location}/latest`,\n      {\n        headers: {\n          \"secret-key\": pword,\n        },\n      }\n    )\n    return result.data;\n  };","import React, { useState, useEffect } from 'react';\nimport PieCharts from './PieCharts';\nimport FinalScoresBar from './ScoresOverTime';\nimport CategoryScores from './CategoryScores';\nimport Stats from './Stats';\nimport MultiplayerRadial from './MultiplayerRadial';\nimport ScatterRelationships from './ScatterRelationships';\nimport {\n  getGameCategories,\n  scoresForEachPlayer,\n} from '../helpers/scoreCalculations';\nimport { AgricolaGameScore, PlayerAllScores } from '../models/game';\nimport agricola from '../images/agricolaheader.png';\nimport { dateRegex } from '../helpers/date';\nimport { fetchData } from '../helpers/fetchData';\n\ninterface apiData {\n  agricolaGames: AgricolaGameScore[];\n}\n\nconst AgricolaPage = () => {\n  const [allGames, setAllGames] = useState<AgricolaGameScore[]>();\n  const [totals, setTotals] = useState<PlayerAllScores>();\n  const [tashVsThom, setTashVsThom] = useState<AgricolaGameScore[]>();\n  const [multiplayer, setMultiplayer] = useState<AgricolaGameScore[]>();\n  const [categories, setCategories] = useState<string[]>();\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const pword = `$2b$10$tVk${process.env.REACT_APP_API_KEY}`;\n    const location = process.env.REACT_APP_AGRICOLA_LOCATION;\n    setIsLoading(true);\n    fetchData(pword, location).then((data: apiData) => {\n      setAllGames(data.agricolaGames);\n      setTotals(scoresForEachPlayer(data.agricolaGames));\n      setTashVsThom(\n        data.agricolaGames.filter((game) => game.players.length === 2),\n      );\n      setMultiplayer(\n        data.agricolaGames.filter((game) => game.players.length > 2),\n      );\n      setCategories(getGameCategories(data.agricolaGames[0]));\n      setIsLoading(false);\n    });\n  }, []);\n\n  if (!isLoading) {\n    return (\n      <div className=\"page-container\">\n        <div className=\"page-header header\">\n          <div className=\"image-container\">\n            <img src={agricola} alt=\"agricola-header\"></img>\n          </div>\n        </div>\n        <Stats\n          totals={totals}\n          tashVsThom={tashVsThom}\n          multiplayer={multiplayer}\n          allGames={allGames}\n          gameName={'Agricola'}\n        ></Stats>\n        <PieCharts tashVsThom={tashVsThom}></PieCharts>\n        <FinalScoresBar\n          games={allGames.filter((game) => game.date.match(dateRegex))}\n          twoPlayer={tashVsThom.filter((game) => game.date.match(dateRegex))}\n          multiplayer={multiplayer.filter((game) => game.date.match(dateRegex))}\n        ></FinalScoresBar>\n        <CategoryScores games={allGames}></CategoryScores>\n        <MultiplayerRadial\n          multiplayer={multiplayer}\n          twoPlayer={tashVsThom}\n          allGames={allGames}\n        ></MultiplayerRadial>\n        <ScatterRelationships\n          allGames={allGames}\n          categories={categories}\n        ></ScatterRelationships>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"page-container\">\n        <div className=\"page-header header\">\n          <div className=\"image-container\">\n            <img src={agricola} alt=\"agricola header\"></img>\n          </div>\n        </div>\n        <div>loading...</div>\n      </div>\n    );\n  }\n};\n\nexport default AgricolaPage;\n","import { PlayerScore } from '../game';\n\nexport const blankBaseGameScoreSheet: PlayerScore = {\n  name: '',\n  scores: [\n    {\n      category: 'fields',\n      value: 0,\n    },\n    {\n      category: 'pastures',\n      value: 0,\n    },\n    {\n      category: 'grain',\n      value: 0,\n    },\n    {\n      category: 'vegetables',\n      value: 0,\n    },\n    {\n      category: 'sheep',\n      value: 0,\n    },\n    {\n      category: 'wild boar',\n      value: 0,\n    },\n    {\n      category: 'cattle',\n      value: 0,\n    },\n    {\n      category: 'unused spaces',\n      value: 0,\n    },\n    {\n      category: 'fenced stables',\n      value: 0,\n    },\n    {\n      category: 'clay rooms',\n      value: 0,\n    },\n    {\n      category: 'stone rooms',\n      value: 0,\n    },\n    {\n      category: 'family members',\n      value: 0,\n    },\n    {\n      category: 'bonus points',\n      value: 0,\n    },\n    {\n      category: 'points for cards',\n      value: 0,\n    },\n  ],\n};\n\nexport const blankFarmersOfTheMoorScoreSheet: PlayerScore = {\n  name: '',\n  scores: [\n    {\n      category: 'fields',\n      value: 0,\n    },\n    {\n      category: 'pastures',\n      value: 0,\n    },\n    {\n      category: 'grain',\n      value: 0,\n    },\n    {\n      category: 'vegetables',\n      value: 0,\n    },\n    {\n      category: 'sheep',\n      value: 0,\n    },\n    {\n      category: 'wild boar',\n      value: 0,\n    },\n    {\n      category: 'cattle',\n      value: 0,\n    },\n    {\n      category: 'unused spaces',\n      value: 0,\n    },\n    {\n      category: 'fenced stables',\n      value: 0,\n    },\n    {\n      category: 'clay rooms',\n      value: 0,\n    },\n    {\n      category: 'stone rooms',\n      value: 0,\n    },\n    {\n      category: 'family members',\n      value: 0,\n    },\n    {\n      category: 'bonus points',\n      value: 0,\n    },\n    {\n      category: 'points for cards',\n      value: 0,\n    },\n    {\n      category: 'horses',\n      value: 0,\n    },\n  ],\n};\n","import React from 'react';\nimport {\n  blankBaseGameScoreSheet,\n  blankFarmersOfTheMoorScoreSheet,\n} from '../models/agricola/playerScore';\nimport { PlayerScore } from '../models/game';\n\ninterface Props {\n  playerScores: PlayerScore;\n  updateForm;\n  baseGame: boolean;\n}\n\nconst AgricolaScoreSheet = (props: Props) => {\n  const scoreSheet = props.baseGame\n    ? blankBaseGameScoreSheet\n    : blankFarmersOfTheMoorScoreSheet;\n  return (\n    <div className=\"form-player\">\n      <label className=\"category-label\">\n        Name:\n        <input\n          type=\"text\"\n          value={props.playerScores.name}\n          onChange={(e) =>\n            props.updateForm({\n              name: e.target.value,\n              scores: props.playerScores.scores,\n            })\n          }\n        />\n      </label>\n      <div className=\"category-scores-grid\">\n        {scoreSheet.scores.map((cat, i) => (\n          <label className=\"category-label\" key={i}>\n            {cat.category[0]\n              .toUpperCase()\n              .concat(cat.category.toString().slice(1))}\n            <input\n              type=\"number\"\n              value={\n                props.playerScores.scores.find(\n                  (sc) => sc.category === cat.category,\n                ).value\n              }\n              className=\"category-input\"\n              onChange={(e) =>\n                props.updateForm({\n                  name: props.playerScores.name,\n                  scores: [\n                    { category: cat.category, value: e.target.value },\n                    ...props.playerScores.scores.filter(\n                      (sc) => sc.category !== cat.category,\n                    ),\n                  ],\n                })\n              }\n            />\n          </label>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default AgricolaScoreSheet;\n","import React, { useState } from 'react';\nimport { SinglePlayerScore } from '../models/game';\n\ninterface PropsInterface {\n  cancel;\n  submit;\n  totals: SinglePlayerScore;\n}\n\nconst ConfirmScoresModal = (props: PropsInterface) => {\n  const [password, setPassword] = useState<string>();\n  const [incorrectPassword, setIncorrectPassword] = useState(false);\n\n  const handleSubmit = () => {\n    if (password === process.env.REACT_APP_SUBMIT_PASSWORD) {\n      setIncorrectPassword(false);\n      props.submit();\n    } else {\n      setIncorrectPassword(true);\n    }\n  };\n  return (\n    <div className=\"confirm-modal modal\">\n      <div>\n        {Object.entries(props.totals).map(([name, total]) => (\n          <p key={name}>\n            {name} scored {total}\n          </p>\n        ))}\n      </div>\n      <input\n        type=\"text\"\n        placeholder=\"Password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n      />\n      <div className=\"confirm-button-container\">\n        <button onClick={() => handleSubmit()}>Confirm</button>\n        <button onClick={props.cancel}>Cancel</button>\n      </div>\n      {incorrectPassword && (\n        <p className=\"error-message\">Oops! Wrong Password</p>\n      )}\n    </div>\n  );\n};\n\nexport default ConfirmScoresModal;\n","import React, { useState } from 'react';\nimport { dateFromString, dateRegex } from '../helpers/date';\nimport {\n  AgricolaGameScore,\n  PlayerScore,\n  SinglePlayerScore,\n} from '../models/game';\nimport {\n  blankBaseGameScoreSheet,\n  blankFarmersOfTheMoorScoreSheet,\n} from '../models/agricola/playerScore';\nimport AgricolaScoreSheet from './AgricolaScoreSheet';\nimport ConfirmScoresModal from './ConfirmModal';\n\ninterface PropsInterface {\n  hideModal;\n}\n\nconst AgricolaScoreModal = (props: PropsInterface) => {\n  const [gameType, updateGameType] = useState(false);\n  const scoreSheet = gameType\n    ? blankBaseGameScoreSheet\n    : blankFarmersOfTheMoorScoreSheet;\n  const [errors, setErrors] = useState({ date: false });\n  const [playerScores, setPlayerScores] = useState<Record<number, PlayerScore>>(\n    {\n      0: scoreSheet,\n      1: scoreSheet,\n      2: scoreSheet,\n      3: scoreSheet,\n      4: scoreSheet,\n    },\n  );\n  const [numberOfPlayers, setNumberOfPlayers] = useState(2);\n\n  const [date, setDate] = useState<string>();\n  const [location] = useState<string>();\n  const [, setGameData] = useState<AgricolaGameScore>();\n  const [confirmPopup, setConfirmPopup] = useState<boolean>(false);\n  const [totals, setTotals] = useState<SinglePlayerScore>();\n\n  const validateDate = (dateString: string) => {\n    if (!dateString.match(dateRegex)) {\n      setErrors({ date: true });\n    } else {\n      const date = dateFromString(dateString);\n      if (!date.getDate()) {\n        setErrors({ date: true });\n      } else {\n        setErrors({ date: false });\n        setDate(dateString);\n      }\n    }\n  };\n\n  const handleSubmit = () => {\n    if (date === undefined) {\n      setErrors({ date: true });\n    } else if (!errors.date) {\n      Object.entries(playerScores).forEach(([index, player]) => {\n        if (Number(index) < numberOfPlayers) {\n          const playerTotal = player.scores.reduce((total, categoryScore) => {\n            return (total += categoryScore.value);\n          }, 0);\n          setTotals({ [player.name]: playerTotal, ...totals });\n        }\n      });\n\n      const gameData: AgricolaGameScore = {\n        players: Object.values(playerScores),\n        location,\n        date,\n      };\n\n      setGameData(gameData);\n      setConfirmPopup(true);\n    }\n  };\n\n  const handlePlayerScores = (scores: PlayerScore, index: number) => {\n    setPlayerScores({ ...playerScores, [index]: scores });\n  };\n\n  const submitScores = () => {\n    setConfirmPopup(false);\n    props.hideModal();\n  };\n\n  const handleNumberOfPlayers = (numOfPlayers: number) => {\n    setNumberOfPlayers(numOfPlayers);\n  };\n\n  return (\n    <div className=\"agricola-modal modal\">\n      <button onClick={props.hideModal}>CLOSE X</button>\n      {confirmPopup && (\n        <ConfirmScoresModal\n          cancel={() => setConfirmPopup(false)}\n          submit={() => submitScores()}\n          totals={totals}\n        ></ConfirmScoresModal>\n      )}\n      <div className=\"form-container\">\n        <div className=\"form-metadata-container\">\n          <div className=\"game-info-container\">\n            <label>\n              Date:\n              <input\n                type=\"text\"\n                onChange={(e) => validateDate(e.target.value)}\n              ></input>\n            </label>\n            <label>\n              Location: <input type=\"text\"></input>\n            </label>\n          </div>\n          {errors.date && (\n            <p className=\"error-message\">\n              Please enter a date in the format dd/mm/yyyy\n            </p>\n          )}\n          <div className=\"player-radio-container\">\n            <label>\n              <input\n                type=\"radio\"\n                value=\"1player\"\n                checked={numberOfPlayers === 1}\n                onChange={() => handleNumberOfPlayers(1)}\n              />\n              1 Player\n            </label>\n            <label>\n              <input\n                type=\"radio\"\n                value=\"2player\"\n                checked={numberOfPlayers === 2}\n                onChange={() => handleNumberOfPlayers(2)}\n              />\n              2 Player\n            </label>\n            <label>\n              <input\n                type=\"radio\"\n                value=\"3player\"\n                checked={numberOfPlayers === 3}\n                onChange={() => handleNumberOfPlayers(3)}\n              />\n              3 Player\n            </label>\n            <label>\n              <input\n                type=\"radio\"\n                value=\"4player\"\n                checked={numberOfPlayers === 4}\n                onChange={() => handleNumberOfPlayers(4)}\n              />\n              4 Player\n            </label>\n            <label>\n              <input\n                type=\"radio\"\n                value=\"5player\"\n                checked={numberOfPlayers === 5}\n                onChange={() => handleNumberOfPlayers(5)}\n              />\n              5 Player\n            </label>\n          </div>\n        </div>\n        <div className=\"player-radio-container\">\n          <label>\n            <input\n              type=\"radio\"\n              value=\"basegame\"\n              checked={gameType === true}\n              onChange={() => updateGameType(true)}\n            />\n            Base Game\n          </label>\n          <label>\n            <input\n              type=\"radio\"\n              value=\"moors\"\n              checked={gameType === false}\n              onChange={() => updateGameType(false)}\n            />\n            Farmers Of The Moor\n          </label>\n        </div>\n        <div className=\"score-input-container\">\n          {Object.entries(playerScores).map(\n            ([index, playerForm]) =>\n              Number(index) < numberOfPlayers && (\n                <AgricolaScoreSheet\n                  key={index}\n                  playerScores={playerForm}\n                  updateForm={(value) =>\n                    handlePlayerScores(value, Number(index))\n                  }\n                  baseGame={gameType}\n                ></AgricolaScoreSheet>\n              ),\n          )}\n        </div>\n      </div>\n      <button onClick={() => handleSubmit()}>Submit</button>\n    </div>\n  );\n};\n\nexport default AgricolaScoreModal;\n","import React, { useEffect, useState } from 'react';\nimport { dateRegex } from '../helpers/date';\nimport { fetchData } from '../helpers/fetchData';\nimport {\n  getGameCategories,\n  scoresForEachPlayer,\n} from '../helpers/scoreCalculations';\nimport tmheader from '../images/tmboxheader.png';\nimport { GameScore, PlayerAllScores } from '../models/game';\nimport CategoryScores from './CategoryScores';\nimport PieCharts from './PieCharts';\nimport ScatterRelationships from './ScatterRelationships';\nimport FinalScoresBar from './ScoresOverTime';\nimport Stats from './Stats';\ninterface apiData {\n  tmGames: GameScore[];\n}\nconst TerraformingMarsPage = () => {\n  const [allGames, setAllGames] = useState<GameScore[]>();\n  const [totals, setTotals] = useState<PlayerAllScores>();\n  const [tashVsThom, setTashVsThom] = useState<GameScore[]>();\n  const [multiplayer, setMultiplayer] = useState<GameScore[]>();\n  const [categories, setCategories] = useState<string[]>();\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const pword = `$2b$10$tVk${process.env.REACT_APP_API_KEY}`;\n    const location = process.env.REACT_APP_TM_LOCATION;\n    setIsLoading(true);\n    fetchData(pword, location).then((data: apiData) => {\n      setAllGames(data.tmGames);\n      setTotals(scoresForEachPlayer(data.tmGames));\n      setTashVsThom(data.tmGames.filter((game) => game.players.length === 2));\n      setMultiplayer(data.tmGames.filter((game) => game.players.length > 2));\n      setCategories(getGameCategories(data.tmGames[0]));\n      setIsLoading(false);\n    });\n  }, []);\n  if (!isLoading) {\n    return (\n      <div className=\"page-container\">\n        <div className=\"page-header header\">\n          <div className=\"image-container\">\n            <img src={tmheader} alt=\"terraforming-mars-header\"></img>\n          </div>\n        </div>\n        <div className=\"container photo-container\"></div>\n        <Stats\n          totals={totals}\n          tashVsThom={tashVsThom}\n          allGames={allGames}\n          multiplayer={multiplayer}\n          gameName={'Terraforming Mars'}\n        ></Stats>\n        <PieCharts tashVsThom={tashVsThom}></PieCharts>\n        <FinalScoresBar\n          games={allGames.filter((game) => game.date.match(dateRegex))}\n          twoPlayer={tashVsThom.filter((game) => game.date.match(dateRegex))}\n        ></FinalScoresBar>\n        <CategoryScores games={allGames}></CategoryScores>\n        <ScatterRelationships\n          allGames={allGames}\n          categories={categories}\n        ></ScatterRelationships>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"page-container\">\n        <div className=\"page-header header\">\n          <div className=\"image-container\">\n            <img src={tmheader} alt=\"tm-header\"></img>\n          </div>\n        </div>\n        <div>loading...</div>\n      </div>\n    );\n  }\n};\n\nexport default TerraformingMarsPage;\n","import React, { useEffect, useState } from 'react';\nimport { dateRegex } from '../helpers/date';\nimport {\n  getGameCategories,\n  scoresForEachPlayer,\n} from '../helpers/scoreCalculations';\nimport wingspanbirdheader from '../images/wingspanbirdheader.jpeg';\nimport wingspancards from '../images/wingspancards.jpeg';\nimport { GameScore, PlayerAllScores } from '../models/game';\nimport CategoryScores from './CategoryScores';\nimport FinalScoresBar from './ScoresOverTime';\nimport PieCharts from './PieCharts';\nimport ScatterRelationships from './ScatterRelationships';\nimport Stats from './Stats';\nimport { fetchData } from '../helpers/fetchData';\n\ninterface apiData {\n  wingspanGames: GameScore[];\n}\n\nconst WingspanPage = () => {\n  const [allGames, setAllGames] = useState<GameScore[]>();\n  const [totals, setTotals] = useState<PlayerAllScores>();\n  const [tashVsThom, setTashVsThom] = useState<GameScore[]>();\n  const [categories, setCategories] = useState<string[]>();\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const pword = `$2b$10$tVk${process.env.REACT_APP_API_KEY}`;\n    const location = process.env.REACT_APP_WINGSPAN_LOCATION;\n    setIsLoading(true);\n    fetchData(pword, location).then((data: apiData) => {\n      setAllGames(data.wingspanGames);\n      setTotals(scoresForEachPlayer(data.wingspanGames));\n      setTashVsThom(\n        data.wingspanGames.filter((game) => game.players.length === 2),\n      );\n      setCategories(getGameCategories(data.wingspanGames[0]));\n      setIsLoading(false);\n    });\n  }, []);\n\n  if (!isLoading) {\n    return (\n      <div className=\"page-container\">\n        <div className=\"page-header header\">\n          <div className=\"image-container\">\n            <img src={wingspanbirdheader} alt=\"wingspan-header\"></img>\n          </div>\n        </div>\n        <div className=\"container photo-container\">\n          <img\n            src={wingspancards}\n            alt=\"cards from the game wingspan\"\n            className=\"photo\"\n          ></img>\n        </div>\n        <Stats\n          totals={totals}\n          tashVsThom={tashVsThom}\n          allGames={allGames}\n          gameName={'Wingspan'}\n        ></Stats>\n        <PieCharts tashVsThom={tashVsThom}></PieCharts>\n        <FinalScoresBar\n          games={allGames.filter((game) => game.date.match(dateRegex))}\n          twoPlayer={tashVsThom.filter((game) => game.date.match(dateRegex))}\n        ></FinalScoresBar>\n        <CategoryScores games={allGames}></CategoryScores>\n        <ScatterRelationships\n          allGames={allGames}\n          categories={categories}\n        ></ScatterRelationships>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"page-container\">\n        <div className=\"page-header header\">\n          <div className=\"image-container\">\n            <img src={wingspanbirdheader} alt=\"wingspan-header\"></img>\n          </div>\n        </div>\n        <div>loading...</div>\n      </div>\n    );\n  }\n};\n\nexport default WingspanPage;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport AgricolaPage from \"./Components/AgricolaPage\";\nimport AgricolaScoreModal from \"./Components/AgricolaScoreModal\";\nimport TerraformingMarsPage from \"./Components/TerraformingMarsPage\";\nimport WingspanPage from \"./Components/WingspanPage\";\n\nconst App = () => {\n  const [view, setView] = useState(\"Wingspan\");\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <nav className=\"navbar\">\n          <button onClick={() => setView(\"Agricola\")}>Agricola</button>\n          <button onClick={() => setView(\"TerraformingMars\")}>\n            Terraforming Mars\n          </button>\n          <button onClick={() => setView(\"Wingspan\")}>Wingspan</button>\n      </nav>\n      {view === \"Agricola\" && <AgricolaPage></AgricolaPage>}\n      {view === \"TerraformingMars\" &&\n        <TerraformingMarsPage></TerraformingMarsPage>\n      }\n      {view === \"Wingspan\" && <WingspanPage></WingspanPage>}\n      {showModal && (\n        <AgricolaScoreModal\n          hideModal={() => setShowModal(false)}\n        ></AgricolaScoreModal>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/agricolaheader.a09a232b.png\";","module.exports = __webpack_public_path__ + \"static/media/tmboxheader.7c6f7153.png\";","module.exports = __webpack_public_path__ + \"static/media/wingspanbirdheader.9d57b42b.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/wingspancards.916892aa.jpeg\";"],"sourceRoot":""}