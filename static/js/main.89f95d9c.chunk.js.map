{"version":3,"sources":["models/agricola/colourScheme.ts","Components/SinglePie.tsx","helpers/scoreCalculations.ts","Components/PieCharts.tsx","helpers/getPlayers.ts","helpers/date.ts","Components/FinalScoresBar.tsx","Components/CategoryAverages.tsx","helpers/scoreSheet.ts","Components/Stats.tsx","Components/MultiplayerRadial.tsx","helpers/chartDataManipulation.ts","Components/ScatterRelationships.tsx","Components/AgricolaPage.tsx","models/agricola/playerScore.ts","Components/AgricolaScoreSheet.tsx","Components/ConfirmModal.tsx","Components/AgricolaScoreModal.tsx","Components/TerraformingMarsPage.tsx","App.js","index.js","images/agricolaheader.png","images/tmboxheader.png"],"names":["colours","salmon","green","yellow","turquoise","pink","purple","blue","orange","namedColours","Thom","Jonny","Jeff","Tash","Tom","Rob","James","draw","PieChart","props","labels","Object","keys","scores","map","player","scoresData","values","data","datasets","backgroundColor","hoverBackgroundColor","borderColor","borderWidth","totalGames","reduce","acc","val","winPercentages","entries","winCount","Math","round","className","legend","display","position","fullWidth","reverse","fontColor","string","index","key","scoresForEachPlayer","games","game","players","forEach","total","find","score","category","value","name","averageScoreFromArray","scoreArray","average","a","v","length","Number","toFixed","PieCharts","tashVsThom","totalsForGame","totalScoreArray","highScore","max","every","getPlayers","includes","push","dateRegex","dateFromString","date","split","RegExp","day","month","year","Date","FinalScoresBar","useState","twoPlayer","pool","setPool","sets","i","label","hoverBorderColor","toDateString","options","scales","xAxes","type","onClick","multiplayer","maintainAspectRatio","CategoryAverage","sort","categoryScores","blankScores","categoryScoresForEachPlayer","fields","pastures","grain","vegetables","sheep","cattle","horses","blankScoreSheet","averages","avg","categories","filter","Stats","min","overallTotal","scoreCount","totals","playerBest","playerWorst","averageScore","allGames","MultiplayerRadial","set","setSet","playerAverages","allScores","averageScoresFromObject","dataPointForTopic","topic","playerScore","y","x","ScatterRelationships","setTopic","responsive","b","tooltips","mode","elements","line","fill","gridLines","yAxes","id","show","pointBorderColor","pointBackgroundColor","pointHoverBackgroundColor","pointHoverBorderColor","yAxisID","AgricolaPage","setAllGames","setTotals","setTashVsThom","setMultiplayer","isLoading","setIsLoading","useEffect","axios","headers","process","result","fetchData","then","agricolaGames","src","agricola","match","blankBaseGameScoreSheet","blankFarmersOfTheMoorScoreSheet","AgricolaScoreSheet","scoreSheet","baseGame","playerScores","onChange","e","updateForm","target","cat","toUpperCase","concat","slice","sc","ConfirmScoresModal","password","setPassword","incorrectPassword","setIncorrectPassword","placeholder","submit","cancel","AgricolaScoreModal","gameType","updateGameType","errors","setErrors","0","1","2","3","4","setPlayerScores","numberOfPlayers","setNumberOfPlayers","setDate","location","setGameData","confirmPopup","setConfirmPopup","handleNumberOfPlayers","numOfPlayers","hideModal","dateString","getDate","checked","playerForm","console","log","handlePlayerScores","undefined","playerTotal","categoryScore","gameData","handleSubmit","TerraformingMarsPage","tmheader","App","view","setView","showModal","setShowModal","ReactDOM","render","document","getElementById","module","exports"],"mappings":"uNAAaA,EAAU,CACrBC,OAAQ,qBACRC,MAAO,oBACPC,OAAQ,kBACRC,UAAW,oBACXC,KAAM,oBACNC,OAAQ,oBACRC,KAAM,oBACNC,OAAQ,qBAGGC,EAAe,CAC1B,YAAa,qBACbC,KAAM,oBACNC,MAAO,kBACPC,KAAM,oBACNC,KAAM,oBACNC,IAAK,oBACLC,IAAK,oBACLC,MAAO,oBACPC,KAAM,mBC8COC,EA7DE,SAACC,GAChB,IAAMC,EAASC,OAAOC,KAAKH,EAAMI,QAAQC,KAAI,SAACC,GAC5C,MAAkB,SAAXA,EAAoB,OAApB,UAAgCA,EAAhC,YAEHC,EAAaL,OAAOM,OAAOR,EAAMI,QACjCvB,EAAUqB,OAAOC,KAAKH,EAAMI,QAAQC,KACxC,SAACC,GAAD,OAAYhB,EAAagB,MAErBG,EAAO,CACXR,SACAS,SAAU,CACR,CACED,KAAMF,EACNI,gBAAiB9B,EACjB+B,qBAAsB/B,EACtBgC,YAAa,QACbC,YAAa,KAebC,EAAab,OAAOM,OAAOR,EAAMI,QAA6BY,QAClE,SAACC,EAAKC,GAAN,OAAeD,EAAOC,KAGlBC,EAAiBjB,OAAOkB,QAAQpB,EAAMI,QAA6BC,KACvE,YAAyB,IAAD,mBAAtBC,EAAsB,KAAde,EAAc,KACtB,MAAkB,SAAXf,EAAA,UACAgB,KAAKC,MACLF,EAAWN,EAAc,KAFzB,yCAIAT,EAJA,oBAIkBgB,KAAKC,MACvBF,EAAWN,EAAc,KALzB,iBAUX,OACE,yBAAKS,UAAU,YACb,kBAAC,WAAD,CAAUf,KAAMA,EAAMgB,OA5BP,CACjBC,SAAS,EACTC,SAAU,QACVC,WAAW,EACXC,SAAS,EACT5B,OAAQ,CACN6B,UAAW,gBAuBX,6BACGX,EAAed,KAAI,SAAC0B,EAAQC,GAAT,OAClB,uBAAGR,UAAU,YAAYS,IAAKD,GAC3BD,S,eCzCAG,EAAsB,SAACC,GAClC,OAAOA,EAAMnB,QAAO,SAACC,EAAKmB,GAQxB,OAPAA,EAAKC,QAAQC,SAAQ,SAAChC,GACpB,IAAMiC,EAAQjC,EAAOF,OAAOoC,MAAK,SAACC,GAAD,MAA8B,UAAnBA,EAAMC,YAC/CC,MACH1B,EAAIX,EAAOsC,MAAQ3B,EAAIX,EAAOsC,MAAX,sBACX3B,EAAIX,EAAOsC,OADA,CACOL,IACtB,CAACA,MAEAtB,IACN,KAgCQ4B,EAAwB,SAACC,GACpC,IAAMC,EAAUD,EAAW9B,QAAO,SAACgC,EAAGC,GAAJ,OAAWD,EAAKC,KAAMH,EAAWI,OACnE,OAAOC,OAAOJ,EAAQK,QAAQ,KC5CjBC,EAZG,SAACrD,GACjB,OACE,yBAAKwB,UAAU,2BACb,4BAAQA,UAAU,UAAlB,kBACA,kBAAC,EAAD,CACEpB,QDsDkB+B,ECtDAnC,EAAMsD,WDuD9BnB,EAAMnB,QAAO,SAACC,EAAKmB,GACjB,IAAImB,EAAmCnB,EAAKC,QAzD1BhC,KAAI,SAACC,GACvB,MAAO,CACLmC,MAAOnC,EAAOF,OAAOoC,MAAK,SAACC,GAAD,MAA8B,UAAnBA,EAAMC,YAAsBC,MACjErC,OAAQA,EAAOsC,SAwDbY,EAAkBD,EAAclD,KAAI,SAACC,GAAD,OAAYA,EAAOmC,SACvDgB,EAAYnC,KAAKoC,IAAL,MAAApC,KAAI,YAAQkC,IAa5B,OAXIA,EAAgBG,OAAM,SAAClB,GAAD,OAAWA,IAAUe,EAAgB,MAC7DvC,EAAG,KAAYA,EAAG,MAAY,EAAMA,EAAG,KAAW,EAElDsC,EAAcjB,SAAQ,SAAChC,GACjBA,EAAOmC,QAAUgB,IACnBxC,EAAIX,EAAOA,QACNW,EAAIX,EAAOA,SAAW,EACtBW,EAAIX,EAAOA,QAAU,MAIzBW,IACN,KCxEGN,gBAAiBT,OAAOM,OAAO3B,MDqDd,IAACsD,GE9DbyB,EAAa,SAACzB,GACzB,OAAOA,EAAMnB,QAAO,SAACC,EAAKmB,GAIxB,OAHAA,EAAKC,QAAQC,SAAQ,SAAChC,IACnBW,EAAI4C,SAASvD,EAAOsC,OAAS3B,EAAI6C,KAAKxD,EAAOsC,SAEzC3B,IACN,KCRQ8C,EAAY,0CACZC,EAAiB,SAACC,GAAwB,IAAD,EACzBA,EAAKC,MAAM,IAAIC,OAAO,QADG,mBAC7CC,EAD6C,KACxCC,EADwC,KACjCC,EADiC,KAEpD,OAAO,IAAIC,KAAKpB,OAAOmB,GAAOnB,OAAOkB,GAAS,EAAGlB,OAAOiB,KCkE3CI,EA5DQ,SAACxE,GAAW,IAAD,EACRyE,mBAAsBzE,EAAM0E,WADpB,mBACzBC,EADyB,KACnBC,EADmB,KAG1BvC,EAAUuB,EAAWe,GACrBvE,EAA0B8B,EAAoByC,GAE9CE,EAAOxC,EAAQhC,KAAI,SAACC,EAAQwE,GAChC,MAAO,CACLC,MAAOzE,EACPK,gBAAiBrB,EAAagB,GAC9BO,YAAa,QACbC,YAAa,GACbF,qBAAsB,oBACtBoE,iBAAkB,QAClBvE,KAAML,EAAOE,OAIXG,EAAO,CACXR,OAAQ0E,EAAKtE,KAAI,SAAC+B,GAAD,OAAU4B,EAAe5B,EAAK6B,MAAMgB,kBACrDvE,SAAUmE,EACVK,QAAS,CACPC,OAAQ,CACNC,MAAO,CACL,CACEC,KAAM,YAOhB,OACE,yBAAK7D,UAAU,2BACb,4BAAQA,UAAU,UAAlB,oBACA,yBAAKA,UAAU,oBACb,4BACEA,UAAU,kBACV8D,QAAS,kBAAMV,EAAQ5E,EAAM0E,aAF/B,cAMA,4BACElD,UAAU,kBACV8D,QAAS,kBAAMV,EAAQ5E,EAAMuF,eAF/B,eAMA,4BACE/D,UAAU,kBACV8D,QAAS,kBAAMV,EAAQ5E,EAAMmC,SAF/B,cAOF,kBAAC,MAAD,CAAK1B,KAAMA,EAAMyE,QAAS,CAAEM,qBAAqB,OC+BxCC,EAxFS,SAACzF,GAAW,IAAD,EACTyE,mBAASzE,EAAMmC,OADN,mBAC1BwC,EAD0B,KACpBC,EADoB,KAE3BvC,EAAUuB,EAAWe,GAAMe,OAG3BC,ELkBmC,SACzCxD,EACAyD,GAEA,OAAOzD,EAAMnB,QAAO,SAACC,EAAKmB,GAQxB,OAPAA,EAAKC,QAAQC,SAAQ,SAAChC,GAAY,IAAD,gBACVA,EAAOF,QADG,IAC/B,2BAAoC,CAAC,IAA5BsC,EAA2B,QAClCzB,EAAIX,EAAOsC,MAAMF,EAASA,UACtBzB,EAAIX,EAAOsC,MAAMF,EAASA,UAAUoB,KAAKpB,EAASC,OACjD1B,EAAIX,EAAOsC,MAAMF,EAASA,UAAY,CAACA,EAASC,QAJxB,kCAO1B1B,IACN2E,GK/B0CC,CAC3ClB,ECU2B,SAACtC,GAC9B,OAAOA,EAAQrB,QAAO,SAACC,EAAKX,GAkB1B,OAjBAW,EAAIX,GAAU,CACZwF,OAAQ,GACRC,SAAU,GACVC,MAAO,GACPC,WAAY,GACZC,MAAO,GACP,YAAa,GACbC,OAAQ,GACR,gBAAiB,GACjB,iBAAkB,GAClB,aAAc,GACd,cAAe,GACf,iBAAkB,GAClB,mBAAoB,GACpB,eAAgB,GAChBC,OAAQ,IAEHnF,IACN,IDhCuCoF,CAAgBhE,IAMtDiE,EAAiCjE,EAAQrB,QAAO,SAACC,EAAKX,GAExD,OADAW,EAAIX,GAAU,GACPW,IACN,IAEH,IAAK,IAAIX,KAAUqF,EACjB,IAAK,IAAIjD,KAAYiD,EAAerF,GAClC,GAAIqF,EAAerF,GAAQoC,GAAUQ,OAAS,EAAG,CAC/C,IAIIqD,EAJQZ,EAAerF,GAAQoC,GAAU1B,QAC3C,SAACC,EAAKwB,GAAN,OAAiBxB,EAAOwB,KAGRkD,EAAerF,GAAQoC,GAAUQ,OACnDoD,EAAShG,GAAQoC,GAAY6D,EAAInD,QAAQ,GAK/C,IAAMoD,EAAatG,OAAOC,KAAKmG,EAAS/G,MAOlCsF,EAAOxC,EAAQhC,KAAI,SAACC,EAAQwE,GAChC,MAAO,CACLC,MAAOzE,EACPK,gBAAiBrB,EAAagB,GAC9BO,YAAa,QACbC,YAAa,GACbF,qBAAsBtB,EAAagB,GACnC0E,iBAAkB,QAClBvE,MAdiBmC,EAcCtC,EAbbJ,OAAOkB,QAAQkF,EAAS1D,IAC5B6D,QAAO,mCAAE/D,EAAF,iBAAgC,UAAbA,KAC1BrC,KAAI,yDAHW,IAACuC,KAiBfnC,EAAO,CACXR,OAAQuG,EAAWC,QAAO,SAAC/D,GAAD,MAA2B,UAAbA,KACxChC,SAAUmE,GAYZ,OACE,yBAAKrD,UAAU,gCACb,4BAAQA,UAAU,UAAlB,qBACA,yBAAKA,UAAU,oBACb,4BACEA,UAAU,kBACV8D,QAAS,kBAAMV,EAAQ5E,EAAM0E,aAF/B,cAMA,4BACElD,UAAU,kBACV8D,QAAS,kBAAMV,EAAQ5E,EAAMuF,eAF/B,eAMA,4BACE/D,UAAU,kBACV8D,QAAS,kBAAMV,EAAQ5E,EAAMmC,SAF/B,cAOF,kBAAC,MAAD,CAAK1B,KAAMA,EAAMgB,OAjCF,CACjBC,SAAS,EACTC,SAAU,MACVC,WAAW,EACXC,SAAS,EACT5B,OAAQ,CACN6B,UAAW,kBEDF4E,EA5DD,SAAC1G,GACb,IAAI0D,EAAM,CAAEd,KAAM,GAAIH,MAAO,GACzBkE,EAAM,CAAE/D,KAAM,GAAIH,MAAO,KACzBmE,EAAe,EACfC,EAAa,EACjB,IAAK,IAAIvG,KAAUN,EAAM8G,OAAQ,CAC/B,IAAIC,EAAazF,KAAKoC,IAAL,MAAApC,KAAI,YAAQtB,EAAM8G,OAAOxG,KACtC0G,EAAc1F,KAAKqF,IAAL,MAAArF,KAAI,YAAQtB,EAAM8G,OAAOxG,KACvCyG,EAAarD,EAAIjB,QACnBiB,EAAId,KAAOtC,EACXoD,EAAIjB,MAAQsE,GAEVC,EAAcL,EAAIlE,QACpBkE,EAAI/D,KAAOtC,EACXqG,EAAIlE,MAAQuE,GAIdJ,GADkB5G,EAAM8G,OAAOxG,GAAQU,QAAO,SAACgC,EAAGC,GAAJ,OAAWD,EAAKC,KAE9D4D,GAAc7G,EAAM8G,OAAOxG,GAAQ4C,OAErC,IAAI+D,EAAeL,EAAeC,EAClC,OACE,yBAAKrF,UAAU,6BACb,4BAAQA,UAAU,uBAAlB,sCAGA,mDAEE,0BAAMA,UAAU,aAAhB,IAA8BxB,EAAMkH,SAAShE,SAE/C,6CAEE,0BAAM1B,UAAU,aAAhB,IAA8BxB,EAAMsD,WAAWJ,QAFjD,kBAKA,kCACM,0BAAM1B,UAAU,aAAhB,IAA8BxB,EAAMuF,YAAYrC,QADtD,sBAIA,kEAEE,0BAAM1B,UAAU,aAAhB,IAA8BkC,EAAIjB,OAFpC,+BAIE,0BAAMjB,UAAU,aAAhB,IAA8BkC,EAAId,MAJpC,KAMA,kEAEE,0BAAMpB,UAAU,aAAhB,IAA8BmF,EAAIlE,OAFpC,6BAIE,0BAAMjB,UAAU,aAAhB,IAA8BmF,EAAI/D,MAJpC,KAMA,kFAEE,0BAAMpB,UAAU,aAAhB,IAA8ByF,EAAa7D,QAAQ,OCW5C+D,EA1DW,SAACnH,GAAW,IAAD,EACbyE,mBAASzE,EAAMuF,aADF,mBAC5B6B,EAD4B,KACvBC,EADuB,KAI/BC,ERiCiC,SACrCC,GAEA,OAAOrH,OAAOC,KAAKoH,GAAWvG,QAAO,SAACC,EAAKX,GAEzC,OADAW,EAAIX,GAAUuC,EAAsB0E,EAAUjH,IACvCW,IACN,IQvCqCuG,CAFxBtF,EAAoBkF,IAI9B3G,EAAO,CACXC,SAAU,CACR,CACED,KAAMP,OAAOM,OAAO8G,GACpB3G,gBAAiBT,OAAOC,KAAKmH,GAAgBjH,KAC3C,SAACC,GAAD,OAAYhB,EAAagB,MAE3ByE,MAAO,GACPlE,YAAa,QACbC,YAAa,IAGjBb,OAAQC,OAAOC,KAAKmH,IAWtB,OACE,yBAAK9F,UAAU,8BACb,4BAAQA,UAAU,UAAlB,uBAEA,yBAAKA,UAAU,oBACb,4BACEA,UAAU,kBACV8D,QAAS,kBAAM+B,EAAOrH,EAAM0E,aAF9B,cAMA,4BACElD,UAAU,kBACV8D,QAAS,kBAAM+B,EAAOrH,EAAMuF,eAF9B,eAMA,4BACE/D,UAAU,kBACV8D,QAAS,kBAAM+B,EAAOrH,EAAMkH,YAF9B,cAOF,kBAAC,QAAD,CAAOzG,KAAMA,EAAMgB,OAjCJ,CACjBC,SAAS,EACTC,SAAU,QACVC,WAAW,EACXC,SAAS,EACT5B,OAAQ,CACN6B,UAAW,kBChCJ2F,EAAoB,SAACC,EAAevF,GAC/C,OAAOA,EAAMnB,QAAO,SAACC,EAAKmB,GASxB,OARAA,EAAKC,QAAQC,SAAQ,SAAChC,GTkDA,IAACqH,ESjDrB1G,EAAI6C,KAAK,CACP8D,EAAGtH,EAAOF,OAAOoC,MACf,SAACC,GAAD,OAAWA,EAAMC,WAAagF,GAASjF,EAAME,MAAMS,WACnDT,MACFkF,GT6CmBF,ES7CLrH,ET8CbqH,EAAYvH,OAAOoC,MAAK,SAACC,GAAD,MAA8B,UAAnBA,EAAMC,YAAsBC,YS3C7D1B,IACN,KCyHU6G,EAlIc,SAAC9H,GAAW,IAAD,EACZyE,mBAAS,kBADG,mBAC/BiD,EAD+B,KACxBK,EADwB,KAGhC7C,EAAU,CACd8C,YAAY,EACZ/H,OAAQwH,EAAkB,iBAAkBzH,EAAMkH,UAC/CxB,MAAK,SAAC1C,EAAGiF,GAAJ,OAAWjF,EAAE6E,EAAII,EAAEJ,EAAI,GAAK,KACjCxH,KAAI,SAACoC,GAAD,OAAWA,EAAMmF,KACxBM,SAAU,CACRC,KAAM,SAERC,SAAU,CACRC,KAAM,CACJC,MAAM,IAGVnD,OAAQ,CACNC,MAAO,CACL,CACE1D,SAAS,EACT6G,UAAW,CACT7G,SAAS,GAEXzB,OAAQwH,EAAkB,iBAAkBzH,EAAMkH,UAC/CxB,MAAK,SAAC1C,EAAGiF,GAAJ,OAAWjF,EAAE6E,EAAII,EAAEJ,EAAI,GAAK,KACjCxH,KAAI,SAACoC,GAAD,OAAWA,EAAMoF,OAG5BW,MAAO,CACL,CACEnD,KAAM,SACN3D,SAAS,EACTC,SAAU,OACV8G,GAAI,WACJF,UAAW,CACT7G,SAAS,GAEXzB,OAAQ,CACNyI,MAAM,IAGV,CACErD,KAAM,SACN3D,SAAS,EACTC,SAAU,QACV8G,GAAI,WACJF,UAAW,CACT7G,SAAS,GAEXzB,OAAQ,CACNyI,MAAM,OAOVjI,EAAO,CACXC,SAAU,CACR,CACEqE,MAAO,QACPM,KAAM,OACN5E,KAAMgH,EAAkBC,EAAO1H,EAAMkH,UAClCxB,MAAK,SAAC1C,EAAGiF,GAAJ,OAAWjF,EAAE6E,EAAII,EAAEJ,EAAI,GAAK,KACjCxH,KAAI,SAACoC,GAAD,OAAWA,EAAMoF,KACxBS,MAAM,EACNzH,YAAahC,EAAQM,OACrBwB,gBAAiB9B,EAAQK,KACzByJ,iBAAkB9J,EAAQM,OAC1ByJ,qBAAsB/J,EAAQK,KAC9B2J,0BAA2BhK,EAAQQ,OACnCyJ,sBAAuBjK,EAAQQ,OAC/B0J,QAAS,YAEX,CACE1D,KAAM,MACNN,MAAO2C,EACPjH,KAAMgH,EAAkBC,EAAO1H,EAAMkH,UAClCxB,MAAK,SAAC1C,EAAGiF,GAAJ,OAAWjF,EAAE6E,EAAII,EAAEJ,EAAI,GAAK,KACjCxH,KAAI,SAACoC,GAAD,OAAWA,EAAMmF,KACxBU,MAAM,EACN3H,gBAAiB9B,EAAQG,OACzB6B,YAAa,QACbD,qBAAsB/B,EAAQM,OAC9B6F,iBAAkBnG,EAAQM,OAC1B4J,QAAS,cAKf,OACE,yBAAKvH,UAAU,+BACb,4BAAQA,UAAU,UAAlB,2BACA,kBAAC,MAAD,CAAKf,KAAMA,EAAMyE,QAASA,IAC1B,yBAAK1D,UAAU,oBACb,4BACEA,UAAU,kBACV8D,QAAS,kBAAMyC,EAAS,oBAF1B,kBAMA,4BACEvG,UAAU,kBACV8D,QAAS,kBAAMyC,EAAS,kBAF1B,gBAMA,4BACEvG,UAAU,kBACV8D,QAAS,kBAAMyC,EAAS,sBAF1B,oBAMA,4BACEvG,UAAU,kBACV8D,QAAS,kBAAMyC,EAAS,iBAF1B,mBAMA,4BACEvG,UAAU,kBACV8D,QAAS,kBAAMyC,EAAS,mBAF1B,oB,kCCjCOiB,EAzEM,WAAO,IAAD,EACOvE,qBADP,mBAClByC,EADkB,KACR+B,EADQ,OAEGxE,qBAFH,mBAElBqC,EAFkB,KAEVoC,EAFU,OAGWzE,qBAHX,mBAGlBnB,EAHkB,KAGN6F,EAHM,OAIa1E,qBAJb,mBAIlBc,EAJkB,KAIL6D,EAJK,OAKS3E,oBAAS,GALlB,mBAKlB4E,EALkB,KAKPC,EALO,KAmCzB,OA5BAC,qBAAU,YAGO,uCAAG,4BAAAvG,EAAA,6DAChBsG,GAAa,GADG,SAEKE,IACnB,2DACA,CACEC,QAAS,CACP,aAAa,aAAb,OARMC,yDAEI,cAEVC,EAFU,yBAUTA,EAAOlJ,MAVE,2CAAH,qDAYfmJ,GAAYC,MAAK,SAACpJ,GAChBwI,EAAYxI,EAAKqJ,eACjBZ,EAAUhH,EAAoBzB,EAAKqJ,gBACnCX,EACE1I,EAAKqJ,cAAcrD,QAAO,SAACrE,GAAD,OAAkC,IAAxBA,EAAKC,QAAQa,WAEnDkG,EACE3I,EAAKqJ,cAAcrD,QAAO,SAACrE,GAAD,OAAUA,EAAKC,QAAQa,OAAS,MAE5DoG,GAAa,QAEd,IAEED,EAkCI,wCAhCL,yBAAK7H,UAAU,kBACb,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,mBACb,yBAAKuI,IAAKC,QAGd,kBAAC,EAAD,CACElD,OAAQA,EACRxD,WAAYA,EACZiC,YAAaA,EACb2B,SAAUA,IAEZ,kBAAC,EAAD,CAAW5D,WAAYA,IACvB,kBAAC,EAAD,CACEnB,MAAO+E,EAAST,QAAO,SAACrE,GAAD,OAAUA,EAAK6B,KAAKgG,MAAMlG,MACjDW,UAAWpB,EAAWmD,QAAO,SAACrE,GAAD,OAAUA,EAAK6B,KAAKgG,MAAMlG,MACvDwB,YAAaA,EAAYkB,QAAO,SAACrE,GAAD,OAAUA,EAAK6B,KAAKgG,MAAMlG,QAE5D,kBAAC,EAAD,CACE5B,MAAO+E,EACPxC,UAAWpB,EACXiC,YAAaA,IAEf,kBAAC,EAAD,CACEA,YAAaA,EACbb,UAAWpB,EACX4D,SAAUA,IAEZ,kBAAC,EAAD,CAAsBA,SAAUA,M,gBCpE3BgD,EAAuC,CAClDtH,KAAM,GACNxC,OAAQ,CACN,CACEsC,SAAU,SACVC,MAAO,GAET,CACED,SAAU,WACVC,MAAO,GAET,CACED,SAAU,QACVC,MAAO,GAET,CACED,SAAU,aACVC,MAAO,GAET,CACED,SAAU,QACVC,MAAO,GAET,CACED,SAAU,YACVC,MAAO,GAET,CACED,SAAU,SACVC,MAAO,GAET,CACED,SAAU,gBACVC,MAAO,GAET,CACED,SAAU,iBACVC,MAAO,GAET,CACED,SAAU,aACVC,MAAO,GAET,CACED,SAAU,cACVC,MAAO,GAET,CACED,SAAU,iBACVC,MAAO,GAET,CACED,SAAU,eACVC,MAAO,GAET,CACED,SAAU,mBACVC,MAAO,KAKAwH,EAA+C,CAC1DvH,KAAM,GACNxC,OAAQ,CACN,CACEsC,SAAU,SACVC,MAAO,GAET,CACED,SAAU,WACVC,MAAO,GAET,CACED,SAAU,QACVC,MAAO,GAET,CACED,SAAU,aACVC,MAAO,GAET,CACED,SAAU,QACVC,MAAO,GAET,CACED,SAAU,YACVC,MAAO,GAET,CACED,SAAU,SACVC,MAAO,GAET,CACED,SAAU,gBACVC,MAAO,GAET,CACED,SAAU,iBACVC,MAAO,GAET,CACED,SAAU,aACVC,MAAO,GAET,CACED,SAAU,cACVC,MAAO,GAET,CACED,SAAU,iBACVC,MAAO,GAET,CACED,SAAU,eACVC,MAAO,GAET,CACED,SAAU,mBACVC,MAAO,GAET,CACED,SAAU,SACVC,MAAO,KC3EEyH,EAlDY,SAACpK,GAC1B,IAAMqK,EAAarK,EAAMsK,SAC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","file":"static/js/main.89f95d9c.chunk.js","sourcesContent":["export const colours = {\n  salmon: \"rgb(255, 132, 105)\",\n  green: \"rgb(30, 187, 108)\",\n  yellow: \"rgb(255,205,18)\",\n  turquoise: \"rgb(54, 174, 201)\",\n  pink: \"rgb(255, 99, 216)\",\n  purple: \"rgb(160, 58, 211)\",\n  blue: \"rgb(30, 119, 239)\",\n  orange: \"rgb(252, 130, 15)\",\n};\n\nexport const namedColours = {\n  \"CJ & Jeff\": \"rgb(255, 132, 105)\",\n  Thom: \"rgb(30, 187, 108)\",\n  Jonny: \"rgb(255,205,18)\",\n  Jeff: \"rgb(54, 174, 201)\",\n  Tash: \"rgb(255, 99, 216)\",\n  Tom: \"rgb(160, 58, 211)\",\n  Rob: \"rgb(30, 119, 239)\",\n  James: \"rgb(252, 130, 15)\",\n  draw: \"rgb(255,205,18)\",\n};\n","import React from \"react\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport { namedColours } from \"../models/agricola/colourScheme\";\nimport { SinglePlayerScore } from \"../models/agricola/playerScore\";\n\nconst PieChart = (props) => {\n  const labels = Object.keys(props.scores).map((player) => {\n    return player === \"draw\" ? \"Draw\" : `${player} Wins`;\n  });\n  const scoresData = Object.values(props.scores);\n  const colours = Object.keys(props.scores).map(\n    (player) => namedColours[player]\n  );\n  const data = {\n    labels,\n    datasets: [\n      {\n        data: scoresData,\n        backgroundColor: colours,\n        hoverBackgroundColor: colours,\n        borderColor: \"black\",\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  const legendOpts = {\n    display: true,\n    position: \"right\",\n    fullWidth: false,\n    reverse: false,\n    labels: {\n      fontColor: \"greysmoke\",\n    },\n  };\n\n  const totalGames = Object.values(props.scores as SinglePlayerScore).reduce(\n    (acc, val) => (acc += val)\n  );\n\n  const winPercentages = Object.entries(props.scores as SinglePlayerScore).map(\n    ([player, winCount]) => {\n      return player === \"draw\"\n        ? `${Math.round(\n            (winCount / totalGames) * 100\n          )}% of games ended in a draw!`\n        : `${player} has won ${Math.round(\n            (winCount / totalGames) * 100\n          )}% of games`;\n    }\n  );\n\n  return (\n    <div className=\"pie-grid\">\n      <Doughnut data={data} legend={legendOpts}></Doughnut>\n      <div>\n        {winPercentages.map((string, index) => (\n          <p className=\"win-stats\" key={index}>\n            {string}\n          </p>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default PieChart;\n","import { GameScore } from \"../models/agricola/game\";\nimport {\n  PlayerAllScores,\n  PlayerScore,\n  SinglePlayerScore,\n} from \"../models/agricola/playerScore\";\nimport { PlayerCategoryScores, ScoreSheet } from \"./scoreSheet\";\n\nexport const totalScoresForGame = (playersArray: PlayerScore[]) => {\n  return playersArray.map((player) => {\n    return {\n      score: player.scores.find((score) => score.category === \"total\").value,\n      player: player.name,\n    };\n  });\n};\n\nexport const scoresForEachPlayer = (games: GameScore[]): PlayerAllScores => {\n  return games.reduce((acc, game) => {\n    game.players.forEach((player) => {\n      const total = player.scores.find((score) => score.category === \"total\")\n        .value;\n      acc[player.name] = acc[player.name]\n        ? [...acc[player.name], total]\n        : [total];\n    });\n    return acc;\n  }, {});\n};\n\nexport const categoryScoresForEachPlayer = (\n  games: GameScore[],\n  blankScores: PlayerCategoryScores\n): PlayerCategoryScores => {\n  return games.reduce((acc, game) => {\n    game.players.forEach((player) => {\n      for (let category of player.scores) {\n        acc[player.name][category.category]\n          ? acc[player.name][category.category].push(category.value)\n          : (acc[player.name][category.category] = [category.value]);\n      }\n    });\n    return acc;\n  }, blankScores);\n};\n\nexport const averageScoresFromObject = (\n  allScores: PlayerAllScores\n): SinglePlayerScore => {\n  return Object.keys(allScores).reduce((acc, player) => {\n    acc[player] = averageScoreFromArray(allScores[player]);\n    return acc;\n  }, {});\n};\n\nexport const totalScore = (playerScore: PlayerScore): number => {\n  return playerScore.scores.find((score) => score.category === \"total\").value;\n};\n\nexport const averageScoreFromArray = (scoreArray: number[]): number => {\n  const average = scoreArray.reduce((a, v) => (a += v)) / scoreArray.length;\n  return Number(average.toFixed(2));\n};\n\nexport const winCounts = (games: GameScore[]) =>\n  games.reduce((acc, game): SinglePlayerScore => {\n    let totalsForGame = totalScoresForGame(game.players);\n\n    let totalScoreArray = totalsForGame.map((player) => player.score);\n    let highScore = Math.max(...totalScoreArray);\n\n    if (totalScoreArray.every((score) => score === totalScoreArray[0])) {\n      acc[\"draw\"] ? (acc[\"draw\"] += 1) : (acc[\"draw\"] = 1);\n    } else {\n      totalsForGame.forEach((player) => {\n        if (player.score === highScore) {\n          acc[player.player]\n            ? (acc[player.player] += 1)\n            : (acc[player.player] = 1);\n        }\n      });\n    }\n    return acc;\n  }, {});\n","import PieChart from \"./SinglePie\";\nimport React from \"react\";\nimport { winCounts } from \"../helpers/scoreCalculations\";\nimport { colours } from \"../models/agricola/colourScheme\";\n\nconst PieCharts = (props) => {\n  return (\n    <div className=\"pie-container container\">\n      <header className=\"header\">Win Lose Draw!</header>\n      <PieChart\n        scores={winCounts(props.tashVsThom)}\n        backgroundColor={Object.values(colours)}\n      ></PieChart>\n    </div>\n  );\n};\n\nexport default PieCharts;\n","import { GameScore } from \"../models/agricola/game\";\n\nexport const getPlayers = (games: GameScore[]): string[] => {\n  return games.reduce((acc, game) => {\n    game.players.forEach((player) => {\n      !acc.includes(player.name) && acc.push(player.name);\n    });\n    return acc;\n  }, []);\n};\n","export const dateRegex = /[0-3]\\d[\\/|\\-][0-1]\\d[\\/|\\-][1-2]\\d\\d\\d/;\nexport const dateFromString = (date: string): Date => {\n  const [day, month, year] = date.split(new RegExp(\"/|-\"));\n  return new Date(Number(year), Number(month) - 1, Number(day));\n};\n","import React, { useState } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { getPlayers } from \"../helpers/getPlayers\";\nimport { scoresForEachPlayer } from \"../helpers/scoreCalculations\";\nimport { GameScore } from \"../models/agricola/game\";\nimport { dateFromString } from \"../helpers/date\";\nimport { PlayerAllScores } from \"../models/agricola/playerScore\";\nimport { namedColours } from \"../models/agricola/colourScheme\";\n\nconst FinalScoresBar = (props) => {\n  const [pool, setPool] = useState<GameScore[]>(props.twoPlayer);\n\n  const players = getPlayers(pool);\n  const scores: PlayerAllScores = scoresForEachPlayer(pool);\n\n  const sets = players.map((player, i) => {\n    return {\n      label: player,\n      backgroundColor: namedColours[player],\n      borderColor: \"black\",\n      borderWidth: 0.5,\n      hoverBackgroundColor: \"rgb(54, 174, 201)\",\n      hoverBorderColor: \"black\",\n      data: scores[player],\n    };\n  });\n\n  const data = {\n    labels: pool.map((game) => dateFromString(game.date).toDateString()),\n    datasets: sets,\n    options: {\n      scales: {\n        xAxes: [\n          {\n            type: \"time\",\n          },\n        ],\n      },\n    },\n  };\n\n  return (\n    <div className=\"bar-container container\">\n      <header className=\"header\">Scores Over Time</header>\n      <div className=\"button-container\">\n        <button\n          className=\"agricola-button\"\n          onClick={() => setPool(props.twoPlayer)}\n        >\n          Two Player\n        </button>\n        <button\n          className=\"agricola-button\"\n          onClick={() => setPool(props.multiplayer)}\n        >\n          Multiplayer\n        </button>\n        <button\n          className=\"agricola-button\"\n          onClick={() => setPool(props.games)}\n        >\n          All Games\n        </button>\n      </div>\n      <Bar data={data} options={{ maintainAspectRatio: false }} />\n    </div>\n  );\n};\n\nexport default FinalScoresBar;\n","import React, { useState } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { getPlayers } from \"../helpers/getPlayers\";\nimport { blankScoreSheet, PlayerCategoryScores } from \"../helpers/scoreSheet\";\nimport { categoryScoresForEachPlayer } from \"../helpers/scoreCalculations\";\nimport { namedColours } from \"../models/agricola/colourScheme\";\n\nconst CategoryAverage = (props) => {\n  const [pool, setPool] = useState(props.games);\n  const players = getPlayers(pool).sort();\n\n  const blankScores: PlayerCategoryScores = blankScoreSheet(players);\n  const categoryScores: PlayerCategoryScores = categoryScoresForEachPlayer(\n    pool,\n    blankScores\n  );\n\n  let averages: PlayerCategoryScores = players.reduce((acc, player) => {\n    acc[player] = {};\n    return acc;\n  }, {});\n\n  for (let player in categoryScores) {\n    for (let category in categoryScores[player]) {\n      if (categoryScores[player][category].length > 0) {\n        let total = categoryScores[player][category].reduce(\n          (acc, score) => (acc += score)\n        );\n\n        let avg = total / categoryScores[player][category].length;\n        averages[player][category] = avg.toFixed(2);\n      }\n    }\n  }\n\n  const categories = Object.keys(averages.Thom);\n  const getAverages = (name) => {\n    return Object.entries(averages[name])\n      .filter(([category, _]) => category !== \"total\")\n      .map(([_, value]) => value);\n  };\n\n  const sets = players.map((player, i) => {\n    return {\n      label: player,\n      backgroundColor: namedColours[player],\n      borderColor: \"black\",\n      borderWidth: 0.5,\n      hoverBackgroundColor: namedColours[player],\n      hoverBorderColor: \"black\",\n      data: getAverages(player),\n    };\n  });\n  const data = {\n    labels: categories.filter((category) => category !== \"total\"),\n    datasets: sets,\n  };\n  const legendOpts = {\n    display: true,\n    position: \"top\",\n    fullWidth: false,\n    reverse: false,\n    labels: {\n      fontColor: \"greysmoke\",\n    },\n  };\n\n  return (\n    <div className=\"category-container container\">\n      <header className=\"header\">Category Averages</header>\n      <div className=\"button-container\">\n        <button\n          className=\"agricola-button\"\n          onClick={() => setPool(props.twoPlayer)}\n        >\n          Two Player\n        </button>\n        <button\n          className=\"agricola-button\"\n          onClick={() => setPool(props.multiplayer)}\n        >\n          Multiplayer\n        </button>\n        <button\n          className=\"agricola-button\"\n          onClick={() => setPool(props.games)}\n        >\n          All Games\n        </button>\n      </div>\n      <Bar data={data} legend={legendOpts}></Bar>\n    </div>\n  );\n};\n\nexport default CategoryAverage;\n","export interface ScoreSheet {\n  fields: number[];\n  pastures: number[];\n  grain: number[];\n  vegetables: number[];\n  sheep: number[];\n  \"wild boar\": number[];\n  cattle: number[];\n  \"unused spaces\": number[];\n  \"fenced stables\": number[];\n  \"clay rooms\": number[];\n  \"stone rooms\": number[];\n  \"family members\": number[];\n  \"points for cards\": number[];\n  \"bonus points\": number[];\n  total: number[];\n  horses?: number[];\n}\n\nexport interface PlayerCategoryScores {\n  [player: string]: ScoreSheet;\n}\n\nexport const blankScoreSheet = (players: string[]): PlayerCategoryScores => {\n  return players.reduce((acc, player) => {\n    acc[player] = {\n      fields: [],\n      pastures: [],\n      grain: [],\n      vegetables: [],\n      sheep: [],\n      \"wild boar\": [],\n      cattle: [],\n      \"unused spaces\": [],\n      \"fenced stables\": [],\n      \"clay rooms\": [],\n      \"stone rooms\": [],\n      \"family members\": [],\n      \"points for cards\": [],\n      \"bonus points\": [],\n      horses: [],\n    };\n    return acc;\n  }, {});\n};\n","import React from \"react\";\nimport { totalScore } from \"../helpers/scoreCalculations\";\nconst Stats = (props) => {\n  let max = { name: \"\", score: 0 };\n  let min = { name: \"\", score: 100 };\n  let overallTotal = 0;\n  let scoreCount = 0;\n  for (let player in props.totals) {\n    let playerBest = Math.max(...props.totals[player]);\n    let playerWorst = Math.min(...props.totals[player]);\n    if (playerBest > max.score) {\n      max.name = player;\n      max.score = playerBest;\n    }\n    if (playerWorst < min.score) {\n      min.name = player;\n      min.score = playerWorst;\n    }\n\n    let playerTotal = props.totals[player].reduce((a, v) => (a += v));\n    overallTotal += playerTotal;\n    scoreCount += props.totals[player].length;\n  }\n  let averageScore = overallTotal / scoreCount;\n  return (\n    <div className=\"stats-container container\">\n      <header className=\"header stats-header\">\n        Some stats from our Agricola Games\n      </header>\n      <p>\n        Total Games Recorded:\n        <span className=\"stat-text\"> {props.allGames.length}</span>\n      </p>\n      <p>\n        Of those games,\n        <span className=\"stat-text\"> {props.tashVsThom.length}</span> were 2\n        player\n      </p>\n      <p>\n        And <span className=\"stat-text\"> {props.multiplayer.length}</span> were\n        multiplayer.\n      </p>\n      <p>\n        The Highest score from all games was\n        <span className=\"stat-text\"> {max.score}</span> scored by the\n        indefatigable\n        <span className=\"stat-text\"> {max.name}</span>!\n      </p>\n      <p>\n        And the lowest score of all time was\n        <span className=\"stat-text\"> {min.score}</span> scored by the\n        unstoppable\n        <span className=\"stat-text\"> {min.name}</span>!\n      </p>\n      <p>\n        The average score across all games is as respectable\n        <span className=\"stat-text\"> {averageScore.toFixed(2)}</span>\n      </p>\n    </div>\n  );\n};\n\nexport default Stats;\n","import React, { useState } from \"react\";\nimport { Polar } from \"react-chartjs-2\";\nimport {\n  scoresForEachPlayer,\n  averageScoresFromObject,\n} from \"../helpers/scoreCalculations\";\nimport { colours, namedColours } from \"../models/agricola/colourScheme\";\nimport { SinglePlayerScore } from \"../models/agricola/playerScore\";\n\nconst MultiplayerRadial = (props) => {\n  const [set, setSet] = useState(props.multiplayer);\n  let allScores = scoresForEachPlayer(set);\n\n  let playerAverages: SinglePlayerScore = averageScoresFromObject(allScores);\n\n  const data = {\n    datasets: [\n      {\n        data: Object.values(playerAverages),\n        backgroundColor: Object.keys(playerAverages).map(\n          (player) => namedColours[player]\n        ),\n        label: \"\",\n        borderColor: \"black\",\n        borderWidth: 1,\n      },\n    ],\n    labels: Object.keys(playerAverages),\n  };\n  const legendOpts = {\n    display: true,\n    position: \"right\",\n    fullWidth: false,\n    reverse: false,\n    labels: {\n      fontColor: \"greysmoke\",\n    },\n  };\n  return (\n    <div className=\"radial-container container\">\n      <header className=\"header\">Average Game Scores</header>\n\n      <div className=\"button-container\">\n        <button\n          className=\"agricola-button\"\n          onClick={() => setSet(props.twoPlayer)}\n        >\n          Two Player\n        </button>\n        <button\n          className=\"agricola-button\"\n          onClick={() => setSet(props.multiplayer)}\n        >\n          Mutliplayer\n        </button>\n        <button\n          className=\"agricola-button\"\n          onClick={() => setSet(props.allGames)}\n        >\n          All Games\n        </button>\n      </div>\n      <Polar data={data} legend={legendOpts}></Polar>\n    </div>\n  );\n};\n\nexport default MultiplayerRadial;\n","import { GameScore } from \"../models/agricola/game\";\nimport { totalScore } from \"./scoreCalculations\";\n\nexport const dataPointForTopic = (topic: string, games: GameScore[]) => {\n  return games.reduce((acc, game) => {\n    game.players.forEach((player) => {\n      acc.push({\n        y: player.scores.find(\n          (score) => score.category === topic && score.value.toFixed\n        ).value,\n        x: totalScore(player),\n      });\n    });\n    return acc;\n  }, []);\n};\n","import React, { useState } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { dataPointForTopic } from \"../helpers/chartDataManipulation\";\nimport { colours } from \"../models/agricola/colourScheme\";\n\nconst ScatterRelationships = (props) => {\n  const [topic, setTopic] = useState(\"family members\");\n\n  const options = {\n    responsive: true,\n    labels: dataPointForTopic(\"family members\", props.allGames)\n      .sort((a, b) => (a.x > b.x ? 1 : -1))\n      .map((score) => score.y),\n    tooltips: {\n      mode: \"label\",\n    },\n    elements: {\n      line: {\n        fill: false,\n      },\n    },\n    scales: {\n      xAxes: [\n        {\n          display: true,\n          gridLines: {\n            display: false,\n          },\n          labels: dataPointForTopic(\"family members\", props.allGames)\n            .sort((a, b) => (a.x > b.x ? 1 : -1))\n            .map((score) => score.x),\n        },\n      ],\n      yAxes: [\n        {\n          type: \"linear\",\n          display: true,\n          position: \"left\",\n          id: \"y-axis-1\",\n          gridLines: {\n            display: false,\n          },\n          labels: {\n            show: true,\n          },\n        },\n        {\n          type: \"linear\",\n          display: true,\n          position: \"right\",\n          id: \"y-axis-2\",\n          gridLines: {\n            display: false,\n          },\n          labels: {\n            show: true,\n          },\n        },\n      ],\n    },\n  };\n\n  const data = {\n    datasets: [\n      {\n        label: \"Score\",\n        type: \"line\",\n        data: dataPointForTopic(topic, props.allGames)\n          .sort((a, b) => (a.x > b.x ? 1 : -1))\n          .map((score) => score.x),\n        fill: false,\n        borderColor: colours.purple,\n        backgroundColor: colours.pink,\n        pointBorderColor: colours.purple,\n        pointBackgroundColor: colours.pink,\n        pointHoverBackgroundColor: colours.orange,\n        pointHoverBorderColor: colours.orange,\n        yAxisID: \"y-axis-2\",\n      },\n      {\n        type: \"bar\",\n        label: topic,\n        data: dataPointForTopic(topic, props.allGames)\n          .sort((a, b) => (a.x > b.x ? 1 : -1))\n          .map((score) => score.y),\n        fill: false,\n        backgroundColor: colours.yellow,\n        borderColor: \"black\",\n        hoverBackgroundColor: colours.purple,\n        hoverBorderColor: colours.purple,\n        yAxisID: \"y-axis-1\",\n      },\n    ],\n  };\n\n  return (\n    <div className=\"scatter-container container\">\n      <header className=\"header\">Scattered Relationships</header>\n      <Bar data={data} options={options}></Bar>\n      <div className=\"button-container\">\n        <button\n          className=\"agricola-button\"\n          onClick={() => setTopic(\"family members\")}\n        >\n          Family Members\n        </button>\n        <button\n          className=\"agricola-button\"\n          onClick={() => setTopic(\"bonus points\")}\n        >\n          Bonus Points\n        </button>\n        <button\n          className=\"agricola-button\"\n          onClick={() => setTopic(\"points for cards\")}\n        >\n          Points For Cards\n        </button>\n        <button\n          className=\"agricola-button\"\n          onClick={() => setTopic(\"stone rooms\")}\n        >\n          Stone Hut Rooms\n        </button>\n        <button\n          className=\"agricola-button\"\n          onClick={() => setTopic(\"unused spaces\")}\n        >\n          Unused Spaces\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ScatterRelationships;\n","import React, { useState, useEffect } from \"react\";\nimport PieCharts from \"./PieCharts\";\nimport FinalScoresBar from \"./FinalScoresBar\";\nimport CategoryAverage from \"./CategoryAverages\";\nimport Stats from \"./Stats\";\nimport MultiplayerRadial from \"./MultiplayerRadial\";\nimport ScatterRelationships from \"./ScatterRelationships\";\nimport { scoresForEachPlayer } from \"../helpers/scoreCalculations\";\nimport axios from \"axios\";\nimport { GameScore } from \"../models/agricola/game\";\nimport { PlayerAllScores } from \"../models/agricola/playerScore\";\nimport agricola from \"../images/agricolaheader.png\";\nimport { dateRegex } from \"../helpers/date\";\n\ninterface apiData {\n  agricolaGames: GameScore[];\n}\n\nconst AgricolaPage = () => {\n  const [allGames, setAllGames] = useState<GameScore[]>();\n  const [totals, setTotals] = useState<PlayerAllScores>();\n  const [tashVsThom, setTashVsThom] = useState<GameScore[]>();\n  const [multiplayer, setMultiplayer] = useState<GameScore[]>();\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const pword = process.env.REACT_APP_API_KEY;\n\n    const fetchData = async () => {\n      setIsLoading(true);\n      const result = await axios(\n        \"https://api.jsonbin.io/b/5ea01b9b2940c704e1dc9684/latest\",\n        {\n          headers: {\n            \"secret-key\": `$2b$10$tVk${pword}`,\n          },\n        }\n      );\n      return result.data;\n    };\n    fetchData().then((data: apiData) => {\n      setAllGames(data.agricolaGames);\n      setTotals(scoresForEachPlayer(data.agricolaGames));\n      setTashVsThom(\n        data.agricolaGames.filter((game) => game.players.length === 2)\n      );\n      setMultiplayer(\n        data.agricolaGames.filter((game) => game.players.length > 2)\n      );\n      setIsLoading(false);\n    });\n  }, []);\n\n  if (!isLoading) {\n    return (\n      <div className=\"page-container\">\n        <div className=\"page-header header\">\n          <div className=\"image-container\">\n            <img src={agricola}></img>\n          </div>\n        </div>\n        <Stats\n          totals={totals}\n          tashVsThom={tashVsThom}\n          multiplayer={multiplayer}\n          allGames={allGames}\n        ></Stats>\n        <PieCharts tashVsThom={tashVsThom}></PieCharts>\n        <FinalScoresBar\n          games={allGames.filter((game) => game.date.match(dateRegex))}\n          twoPlayer={tashVsThom.filter((game) => game.date.match(dateRegex))}\n          multiplayer={multiplayer.filter((game) => game.date.match(dateRegex))}\n        ></FinalScoresBar>\n        <CategoryAverage\n          games={allGames}\n          twoPlayer={tashVsThom}\n          multiplayer={multiplayer}\n        ></CategoryAverage>\n        <MultiplayerRadial\n          multiplayer={multiplayer}\n          twoPlayer={tashVsThom}\n          allGames={allGames}\n        ></MultiplayerRadial>\n        <ScatterRelationships allGames={allGames}></ScatterRelationships>\n      </div>\n    );\n  } else {\n    return <div>loading</div>;\n  }\n};\n\nexport default AgricolaPage;\n","import { CategoryScore } from \"./categoryScore\";\n\nexport interface PlayerScore {\n  name: string;\n  scores: CategoryScore[];\n}\n\nexport interface SinglePlayerScore {\n  [player: string]: number;\n}\n\nexport interface PlayerAllScores {\n  [playerName: string]: number[];\n}\n\nexport const blankBaseGameScoreSheet: PlayerScore = {\n  name: \"\",\n  scores: [\n    {\n      category: \"fields\",\n      value: 0,\n    },\n    {\n      category: \"pastures\",\n      value: 0,\n    },\n    {\n      category: \"grain\",\n      value: 0,\n    },\n    {\n      category: \"vegetables\",\n      value: 0,\n    },\n    {\n      category: \"sheep\",\n      value: 0,\n    },\n    {\n      category: \"wild boar\",\n      value: 0,\n    },\n    {\n      category: \"cattle\",\n      value: 0,\n    },\n    {\n      category: \"unused spaces\",\n      value: 0,\n    },\n    {\n      category: \"fenced stables\",\n      value: 0,\n    },\n    {\n      category: \"clay rooms\",\n      value: 0,\n    },\n    {\n      category: \"stone rooms\",\n      value: 0,\n    },\n    {\n      category: \"family members\",\n      value: 0,\n    },\n    {\n      category: \"bonus points\",\n      value: 0,\n    },\n    {\n      category: \"points for cards\",\n      value: 0,\n    },\n  ],\n};\n\nexport const blankFarmersOfTheMoorScoreSheet: PlayerScore = {\n  name: \"\",\n  scores: [\n    {\n      category: \"fields\",\n      value: 0,\n    },\n    {\n      category: \"pastures\",\n      value: 0,\n    },\n    {\n      category: \"grain\",\n      value: 0,\n    },\n    {\n      category: \"vegetables\",\n      value: 0,\n    },\n    {\n      category: \"sheep\",\n      value: 0,\n    },\n    {\n      category: \"wild boar\",\n      value: 0,\n    },\n    {\n      category: \"cattle\",\n      value: 0,\n    },\n    {\n      category: \"unused spaces\",\n      value: 0,\n    },\n    {\n      category: \"fenced stables\",\n      value: 0,\n    },\n    {\n      category: \"clay rooms\",\n      value: 0,\n    },\n    {\n      category: \"stone rooms\",\n      value: 0,\n    },\n    {\n      category: \"family members\",\n      value: 0,\n    },\n    {\n      category: \"bonus points\",\n      value: 0,\n    },\n    {\n      category: \"points for cards\",\n      value: 0,\n    },\n    {\n      category: \"horses\",\n      value: 0,\n    },\n  ],\n};\n","import React, { useState } from \"react\";\nimport {\n  blankBaseGameScoreSheet,\n  blankFarmersOfTheMoorScoreSheet,\n  PlayerScore,\n} from \"../models/agricola/playerScore\";\n\ninterface Props {\n  playerScores: PlayerScore;\n  updateForm;\n  baseGame: boolean;\n}\n\nconst AgricolaScoreSheet = (props: Props) => {\n  const scoreSheet = props.baseGame\n    ? blankBaseGameScoreSheet\n    : blankFarmersOfTheMoorScoreSheet;\n  return (\n    <div className=\"form-player\">\n      <label className=\"category-label\">\n        Name:\n        <input\n          type=\"text\"\n          value={props.playerScores.name}\n          onChange={(e) =>\n            props.updateForm({\n              name: e.target.value,\n              scores: props.playerScores.scores,\n            })\n          }\n        />\n      </label>\n      <div className=\"category-scores-grid\">\n        {scoreSheet.scores.map((cat, i) => (\n          <label className=\"category-label\" key={i}>\n            {cat.category[0].toUpperCase().concat(cat.category.slice(1))}\n            <input\n              type=\"number\"\n              value={\n                props.playerScores.scores.find(\n                  (sc) => sc.category === cat.category\n                ).value\n              }\n              className=\"category-input\"\n              onChange={(e) =>\n                props.updateForm({\n                  name: props.playerScores.name,\n                  scores: [\n                    { category: cat.category, value: e.target.value },\n                    ...props.playerScores.scores.filter(\n                      (sc) => sc.category !== cat.category\n                    ),\n                  ],\n                })\n              }\n            />\n          </label>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default AgricolaScoreSheet;\n","import { env } from \"process\";\nimport React, { useState } from \"react\";\nimport { totalScore } from \"../helpers/scoreCalculations\";\nimport { SinglePlayerScore } from \"../models/agricola/playerScore\";\n\ninterface PropsInterface {\n  cancel;\n  submit;\n  totals: SinglePlayerScore;\n}\n\nconst ConfirmScoresModal = (props: PropsInterface) => {\n  const [password, setPassword] = useState<string>();\n  const [incorrectPassword, setIncorrectPassword] = useState(false);\n\n  const handleSubmit = () => {\n    if (password === process.env.REACT_APP_SUBMIT_PASSWORD) {\n      setIncorrectPassword(false);\n      props.submit();\n    } else {\n      setIncorrectPassword(true);\n    }\n  };\n  return (\n    <div className=\"confirm-modal modal\">\n      <div>\n        {Object.entries(props.totals).map(([name, total]) => (\n          <p key={name}>\n            {name} scored {total}\n          </p>\n        ))}\n      </div>\n      <input\n        type=\"text\"\n        placeholder=\"Password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n      />\n      <div className=\"confirm-button-container\">\n        <button onClick={() => handleSubmit()}>Confirm</button>\n        <button onClick={props.cancel}>Cancel</button>\n      </div>\n      {incorrectPassword && (\n        <p className=\"error-message\">Oops! Wrong Password</p>\n      )}\n    </div>\n  );\n};\n\nexport default ConfirmScoresModal;\n","import React, { useState } from \"react\";\nimport { dateFromString, dateRegex } from \"../helpers/date\";\nimport { GameScore } from \"../models/agricola/game\";\nimport {\n  blankBaseGameScoreSheet,\n  blankFarmersOfTheMoorScoreSheet,\n  PlayerScore,\n  SinglePlayerScore,\n} from \"../models/agricola/playerScore\";\nimport AgricolaScoreSheet from \"./AgricolaScoreSheet\";\nimport ConfirmScoresModal from \"./ConfirmModal\";\n\ninterface PropsInterface {\n  hideModal;\n}\n\nconst AgricolaScoreModal = (props: PropsInterface) => {\n  const [gameType, updateGameType] = useState(false);\n  const scoreSheet = gameType\n    ? blankBaseGameScoreSheet\n    : blankFarmersOfTheMoorScoreSheet;\n  const [errors, setErrors] = useState({ date: false });\n  const [playerScores, setPlayerScores] = useState<Record<number, PlayerScore>>(\n    {\n      0: scoreSheet,\n      1: scoreSheet,\n      2: scoreSheet,\n      3: scoreSheet,\n      4: scoreSheet,\n    }\n  );\n  const [numberOfPlayers, setNumberOfPlayers] = useState(2);\n\n  const [date, setDate] = useState<string>();\n  const [location, setLocation] = useState<string>();\n  const [gameData, setGameData] = useState<GameScore>();\n  const [confirmPopup, setConfirmPopup] = useState<boolean>(false);\n  const [totals, setTotals] = useState<SinglePlayerScore>();\n\n  const validateDate = (dateString: string) => {\n    if (!dateString.match(dateRegex)) {\n      setErrors({ date: true });\n    } else {\n      const date = dateFromString(dateString);\n      if (!date.getDate()) {\n        setErrors({ date: true });\n      } else {\n        setErrors({ date: false });\n        setDate(dateString);\n      }\n    }\n  };\n\n  const handleSubmit = () => {\n    if (date === undefined) {\n      setErrors({ date: true });\n    } else if (!errors.date) {\n      Object.entries(playerScores).forEach(([index, player]) => {\n        if (Number(index) < numberOfPlayers) {\n          const playerTotal = player.scores.reduce((total, categoryScore) => {\n            return (total += Number(categoryScore.value));\n          }, 0);\n          console.log(player.name);\n          setTotals({ [player.name]: playerTotal, ...totals });\n        }\n      });\n\n      const gameData: GameScore = {\n        players: Object.values(playerScores),\n        location,\n        date,\n      };\n\n      setGameData(gameData);\n      setConfirmPopup(true);\n    }\n  };\n\n  const handlePlayerScores = (scores: PlayerScore, index: number) => {\n    console.log(\"scores\", scores);\n    setPlayerScores({ ...playerScores, [index]: scores });\n  };\n\n  const submitScores = () => {\n    setConfirmPopup(false);\n    props.hideModal();\n  };\n\n  const handleNumberOfPlayers = (numOfPlayers: number) => {\n    setNumberOfPlayers(numOfPlayers);\n  };\n\n  return (\n    <div className=\"agricola-modal modal\">\n      <button onClick={props.hideModal}>CLOSE X</button>\n      {confirmPopup && (\n        <ConfirmScoresModal\n          cancel={() => setConfirmPopup(false)}\n          submit={() => submitScores()}\n          totals={totals}\n        ></ConfirmScoresModal>\n      )}\n      <div className=\"form-container\">\n        <div className=\"form-metadata-container\">\n          <div className=\"game-info-container\">\n            <label>\n              Date:\n              <input\n                type=\"text\"\n                onChange={(e) => validateDate(e.target.value)}\n              ></input>\n            </label>\n            <label>\n              Location: <input type=\"text\"></input>\n            </label>\n          </div>\n          {errors.date && (\n            <p className=\"error-message\">\n              Please enter a date in the format dd/mm/yyyy\n            </p>\n          )}\n          <div className=\"player-radio-container\">\n            <label>\n              <input\n                type=\"radio\"\n                value=\"1player\"\n                checked={numberOfPlayers === 1}\n                onChange={() => handleNumberOfPlayers(1)}\n              />\n              1 Player\n            </label>\n            <label>\n              <input\n                type=\"radio\"\n                value=\"2player\"\n                checked={numberOfPlayers === 2}\n                onChange={() => handleNumberOfPlayers(2)}\n              />\n              2 Player\n            </label>\n            <label>\n              <input\n                type=\"radio\"\n                value=\"3player\"\n                checked={numberOfPlayers === 3}\n                onChange={() => handleNumberOfPlayers(3)}\n              />\n              3 Player\n            </label>\n            <label>\n              <input\n                type=\"radio\"\n                value=\"4player\"\n                checked={numberOfPlayers === 4}\n                onChange={() => handleNumberOfPlayers(4)}\n              />\n              4 Player\n            </label>\n            <label>\n              <input\n                type=\"radio\"\n                value=\"5player\"\n                checked={numberOfPlayers === 5}\n                onChange={() => handleNumberOfPlayers(5)}\n              />\n              5 Player\n            </label>\n          </div>\n        </div>\n        <div className=\"player-radio-container\">\n          <label>\n            <input\n              type=\"radio\"\n              value=\"basegame\"\n              checked={gameType === true}\n              onChange={() => updateGameType(true)}\n            />\n            Base Game\n          </label>\n          <label>\n            <input\n              type=\"radio\"\n              value=\"moors\"\n              checked={gameType === false}\n              onChange={() => updateGameType(false)}\n            />\n            Farmers Of The Moor\n          </label>\n        </div>\n        <div className=\"score-input-container\">\n          {Object.entries(playerScores).map(\n            ([index, playerForm]) =>\n              Number(index) < numberOfPlayers && (\n                <AgricolaScoreSheet\n                  key={index}\n                  playerScores={playerForm}\n                  updateForm={(value) =>\n                    handlePlayerScores(value, Number(index))\n                  }\n                  baseGame={gameType}\n                ></AgricolaScoreSheet>\n              )\n          )}\n        </div>\n      </div>\n      <button onClick={() => handleSubmit()}>Submit</button>\n    </div>\n  );\n};\n\nexport default AgricolaScoreModal;\n","import React from \"react\";\nimport tmheader from \"../images/tmboxheader.png\";\n\nconst TerraformingMarsPage = () => {\n  return (\n    <div className=\"page-container\">\n      <div className=\"page-header header\">\n        <div className=\"image-container\">\n          <img src={tmheader}></img>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TerraformingMarsPage;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport AgricolaPage from \"./Components/AgricolaPage\";\nimport AgricolaScoreModal from \"./Components/AgricolaScoreModal\";\nimport TerraformingMarsPage from \"./Components/TerraformingMarsPage\";\n\nconst App = () => {\n  const [view, setView] = useState(\"Agricola\");\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <nav className=\"navbar\">\n        <div>\n          <button onClick={() => setView(\"Agricola\")}>Agricola</button>\n          <button onClick={() => setView(\"TerraformingMars\")}>\n            Terraforming Mars\n          </button>\n        </div>\n        <button onClick={() => setShowModal(true)}>Agricola Scoresheet</button>\n      </nav>\n      {view === \"Agricola\" && <AgricolaPage></AgricolaPage>}\n      {view === \"TerraformingMars\" && (\n        <TerraformingMarsPage></TerraformingMarsPage>\n      )}\n      {showModal && (\n        <AgricolaScoreModal\n          hideModal={() => setShowModal(false)}\n        ></AgricolaScoreModal>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/agricolaheader.a09a232b.png\";","module.exports = __webpack_public_path__ + \"static/media/tmboxheader.7c6f7153.png\";"],"sourceRoot":""}