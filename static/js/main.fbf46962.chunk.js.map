{"version":3,"sources":["models/agricola/colourScheme.ts","Components/pie-chart/SinglePie.tsx","helpers/scoreCalculations.ts","Components/pie-chart/PieCharts.tsx","helpers/getPlayers.ts","helpers/date.ts","Components/scores-over-time/ScoresOverTime.tsx","helpers/setData.ts","Components/category-scores/CategoryScores.tsx","Components/stats/Stats.tsx","Components/multiplayer-radial/MultiplayerRadial.tsx","helpers/chartDataManipulation.ts","Components/scatter-relationships/ScatterRelationships.tsx","Components/header/header.tsx","Components/AgricolaPage.tsx","models/agricola/playerScore.ts","Components/score-modal/ConfirmModal.tsx","Components/score-modal/AgricolaScoreSheet.tsx","Components/score-modal/AgricolaScoreModal.tsx","Components/TerraformingMarsPage.tsx","Components/WingspanPage.tsx","helpers/fetchData.ts","App.tsx","index.js","images/agricolaheader.png","images/tmboxheader.png","images/wingspanbirdheader.jpeg","images/wingspancards.jpeg"],"names":["colours","salmon","green","yellow","turquoise","pink","purple","blue","orange","namedColours","Thom","Jonny","Jeff","Tash","Tom","Rob","James","draw","PieChart","props","labels","Object","keys","scores","map","player","scoresData","values","data","datasets","backgroundColor","hoverBackgroundColor","borderColor","borderWidth","totalGames","reduce","acc","val","winPercentages","entries","winCount","Math","round","className","legend","display","position","fullWidth","reverse","fontColor","string","index","stylePrefix","key","scoresForEachPlayer","games","game","players","forEach","total","find","score","category","value","name","averageScoreFromArray","scoreArray","average","a","v","length","Number","toFixed","PieCharts","tashVsThom","totalsForGame","totalScoreArray","highScore","max","every","getPlayers","includes","push","dateRegex","dateFromString","date","split","RegExp","day","month","year","Date","ScoresOverTime","useState","twoPlayer","pool","setPool","sets","i","label","fill","hoverBorderColor","lineTension","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","toDateString","options","scales","xAxes","type","undefined","multiplayer","onClick","maintainAspectRatio","divideGamesByPlayerCount","getGameCategories","CategoryScores","setPlayer","sort","categoryScores","categories","playerScores","high","low","min","highSet","p","Stats","overallTotal","scoreCount","totals","playerBest","playerWorst","averageScore","gameName","allGames","MultiplayerRadial","set","setSet","playerAverages","allScores","averageScoresFromObject","dataPointForTopic","topic","playerScore","y","x","ScatterRelationships","setTopic","responsive","b","tooltips","mode","elements","line","gridLines","yAxes","id","show","yAxisID","cat","Header","src","imageUrl","alt","AgricolaPage","setTotals","setTashVsThom","setMultiplayer","setCategories","isLoading","setIsLoading","useEffect","agricola","filter","match","blankBaseGameScoreSheet","blankFarmersOfTheMoorScoreSheet","ConfirmScoresModal","password","setPassword","incorrectPassword","setIncorrectPassword","placeholder","onChange","e","target","process","REACT_APP_SUBMIT_PASSWORD","submit","cancel","AgricolaScoreSheet","scoreSheet","baseGame","updateForm","toUpperCase","concat","toString","slice","sc","AgricolaScoreModal","gameType","updateGameType","errors","setErrors","0","1","2","3","4","setPlayerScores","numberOfPlayers","setNumberOfPlayers","setDate","location","setGameData","confirmPopup","setConfirmPopup","handleNumberOfPlayers","numOfPlayers","hideModal","dateString","getDate","checked","playerForm","handlePlayerScores","playerTotal","categoryScore","gameData","handleSubmit","TerraformingMarsPage","tmheader","WingspanPage","wingspanheader","wingspancards","fetchData","pword","Axios","headers","result","App","view","setView","showModal","setShowModal","agricolaGames","setAgricolaGames","wingspanGames","setWingspanGames","tmGames","setTmGames","then","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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,GACNzC,OAAQ,CACN,CACEuC,SAAU,SACVC,MAAO,GAET,CACED,SAAU,WACVC,MAAO,GAET,CACED,SAAU,QACVC,MAAO,GAET,CACED,SAAU,aACVC,MAAO,GAET,CACED,SAAU,QACVC,MAAO,GAET,CACED,SAAU,YACVC,MAAO,GAET,CACED,SAAU,SACVC,MAAO,GAET,CACED,SAAU,gBACVC,MAAO,GAET,CACED,SAAU,iBACVC,MAAO,GAET,CACED,SAAU,aACVC,MAAO,GAET,CACED,SAAU,cACVC,MAAO,GAET,CACED,SAAU,iBACVC,MAAO,GAET,CACED,SAAU,eACVC,MAAO,GAET,CACED,SAAU,mBACVC,MAAO,KAKA6H,EAA+C,CAC1D5H,KAAM,GACNzC,OAAQ,CACN,CACEuC,SAAU,SACVC,MAAO,GAET,CACED,SAAU,WACVC,MAAO,GAET,CACED,SAAU,QACVC,MAAO,GAET,CACED,SAAU,aACVC,MAAO,GAET,CACED,SAAU,QACVC,MAAO,GAET,CACED,SAAU,YACVC,MAAO,GAET,CACED,SAAU,SACVC,MAAO,GAET,CACED,SAAU,gBACVC,MAAO,GAET,CACED,SAAU,iBACVC,MAAO,GAET,CACED,SAAU,aACVC,MAAO,GAET,CACED,SAAU,cACVC,MAAO,GAET,CACED,SAAU,iBACVC,MAAO,GAET,CACED,SAAU,eACVC,MAAO,GAET,CACED,SAAU,mBACVC,MAAO,GAET,CACED,SAAU,SACVC,MAAO,KC9EE8H,EAtCY,SAAC1K,GAA2B,IAAD,EACpB0E,qBADoB,mBAC7CiG,EAD6C,KACnCC,EADmC,OAEFlG,oBAAS,GAFP,mBAE7CmG,EAF6C,KAE1BC,EAF0B,KAYpD,OACE,yBAAKtJ,UAAU,uBACb,6BACGtB,OAAOkB,QAAQpB,EAAM0H,QAAQrH,KAAI,mCAAEwC,EAAF,KAAQL,EAAR,YAChC,uBAAGN,IAAKW,GACLA,EADH,WACiBL,OAIrB,2BACE6D,KAAK,OACL0E,YAAY,WACZnI,MAAO+H,EACPK,SAAU,SAACC,GAAD,OAAOL,EAAYK,EAAEC,OAAOtI,UAExC,yBAAK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","file":"static/js/main.fbf46962.chunk.js","sourcesContent":["export const colours = {\n  salmon: \"rgb(255, 132, 105)\",\n  green: \"rgb(30, 187, 108)\",\n  yellow: \"rgb(255,205,18)\",\n  turquoise: \"rgb(54, 174, 201)\",\n  pink: \"rgb(255, 99, 216)\",\n  purple: \"rgb(160, 58, 211)\",\n  blue: \"rgb(30, 119, 239)\",\n  orange: \"rgb(252, 130, 15)\",\n};\n\nexport const namedColours = {\n  \"CJ & Jeff\": \"rgb(255, 132, 105)\",\n  Thom: \"rgb(30, 187, 108)\",\n  Jonny: \"rgb(255,205,18)\",\n  Jeff: \"rgb(54, 174, 201)\",\n  Tash: \"rgb(255, 99, 216)\",\n  Tom: \"rgb(160, 58, 211)\",\n  Rob: \"rgb(30, 119, 239)\",\n  James: \"rgb(252, 130, 15)\",\n  draw: \"rgb(255,205,18)\",\n};\n","import React from 'react';\nimport { Doughnut } from 'react-chartjs-2';\nimport { namedColours } from '../../models/agricola/colourScheme';\nimport { SinglePlayerScore } from '../../models/game';\nimport './pie-chart.css';\n\nconst PieChart = (props) => {\n  const labels = Object.keys(props.scores).map((player) => {\n    return player === 'draw' ? 'Draw' : `${player} Wins`;\n  });\n  const scoresData = Object.values(props.scores);\n  const colours = Object.keys(props.scores).map(\n    (player) => namedColours[player],\n  );\n  const data = {\n    labels,\n    datasets: [\n      {\n        data: scoresData,\n        backgroundColor: colours,\n        hoverBackgroundColor: colours,\n        borderColor: 'black',\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  const legendOpts = {\n    display: true,\n    position: 'right',\n    fullWidth: false,\n    reverse: false,\n    labels: {\n      fontColor: 'greysmoke',\n    },\n  };\n\n  const totalGames = Object.values(props.scores as SinglePlayerScore).reduce(\n    (acc, val) => (acc += val),\n  );\n\n  const winPercentages = Object.entries(props.scores as SinglePlayerScore).map(\n    ([player, winCount]) => {\n      return player === 'draw'\n        ? `${Math.round(\n            (winCount / totalGames) * 100,\n          )}% of games ended in a draw!`\n        : `${player} has won ${Math.round(\n            (winCount / totalGames) * 100,\n          )}% of games`;\n    },\n  );\n\n  return (\n    <div className=\"pie-grid\">\n      <Doughnut data={data} legend={legendOpts}></Doughnut>\n      <div>\n        {winPercentages.map((string, index) => (\n          <p className={`${props.stylePrefix}-win-stats`} key={index}>\n            {string}\n          </p>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default PieChart;\n","import {\n  GameScore,\n  PlayerAllScores,\n  PlayerScore,\n  SinglePlayerScore,\n} from '../models/game';\nimport { AllCategoryScoresForPlayer } from './scoreSheet';\n\nexport const totalScoresForGame = (playersArray: PlayerScore[]) => {\n  return playersArray.map((player) => {\n    return {\n      score: player.scores.find((score) => score.category === 'total').value,\n      player: player.name,\n    };\n  });\n};\n\nexport const scoresForEachPlayer = (games: GameScore[]): PlayerAllScores => {\n  return games.reduce((acc, game) => {\n    game.players.forEach((player) => {\n      const total = player.scores.find((score) => score.category === 'total')\n        .value;\n      acc[player.name] = acc[player.name]\n        ? [...acc[player.name], total]\n        : [total];\n    });\n    return acc;\n  }, {});\n};\n\nexport const categoryScoresForEachPlayer = (\n  games: GameScore[],\n): AllCategoryScoresForPlayer => {\n  return games.reduce((acc, game) => {\n    game.players.forEach((player) => {\n      for (let category of player.scores) {\n        if (acc[player.name]) {\n          acc[player.name][category.category]\n            ? acc[player.name][category.category].push(category.value)\n            : (acc[player.name][category.category] = [category.value]);\n        } else {\n          acc[player.name] = { [category.category]: [category.value] };\n        }\n      }\n    });\n    return acc;\n  }, {} as AllCategoryScoresForPlayer);\n};\n\nexport const averageScoresFromObject = (\n  allScores: PlayerAllScores,\n): SinglePlayerScore => {\n  return Object.keys(allScores).reduce((acc, player) => {\n    acc[player] = averageScoreFromArray(allScores[player]);\n    return acc;\n  }, {});\n};\n\nexport const totalScore = (playerScore: PlayerScore): number => {\n  return playerScore.scores.find((score) => score.category === 'total').value;\n};\n\nexport const averageScoreFromArray = (scoreArray: number[]): number => {\n  const average = scoreArray.reduce((a, v) => (a += v)) / scoreArray.length;\n  return Number(average.toFixed(2));\n};\n\nexport const winCounts = (games: GameScore[]) =>\n  games.reduce((acc, game): SinglePlayerScore => {\n    let totalsForGame = totalScoresForGame(game.players);\n\n    let totalScoreArray = totalsForGame.map((player) => player.score);\n    let highScore = Math.max(...totalScoreArray.map(Number));\n\n    if (totalScoreArray.every((score) => score === totalScoreArray[0])) {\n      acc['draw'] ? (acc['draw'] += 1) : (acc['draw'] = 1);\n    } else {\n      totalsForGame.forEach((player) => {\n        if (player.score === highScore) {\n          acc[player.player]\n            ? (acc[player.player] += 1)\n            : (acc[player.player] = 1);\n        }\n      });\n    }\n    return acc;\n  }, {});\n","import PieChart from './SinglePie';\nimport React from 'react';\nimport { winCounts } from '../../helpers/scoreCalculations';\nimport { colours } from '../../models/agricola/colourScheme';\nimport './pie-chart.css';\nimport { GameScore } from '../../models/game';\n\ninterface Props {\n  tashVsThom: GameScore[];\n  stylePrefix: string;\n}\n\nconst PieCharts = (props: Props) => {\n  return (\n    <div className={`grid-three pie-container ${props.stylePrefix}-pie`}>\n      <header className={`header ${props.stylePrefix}-header`}>\n        Win Lose Draw!\n      </header>\n      <PieChart\n        scores={winCounts(props.tashVsThom)}\n        backgroundColor={Object.values(colours)}\n        stylePrefix={props.stylePrefix}\n      ></PieChart>\n    </div>\n  );\n};\n\nexport default PieCharts;\n","import { GameScore } from '../models/game';\n\nexport const getPlayers = (games: GameScore[]): string[] => {\n  return games.reduce((acc, game) => {\n    game.players.forEach((player) => {\n      !acc.includes(player.name) && acc.push(player.name);\n    });\n    return acc;\n  }, []);\n};\n","export const dateRegex = /[0-3]\\d[/|-][0-1]\\d[/|-][1-2]\\d\\d\\d/;\nexport const dateFromString = (date: string): Date => {\n  const [day, month, year] = date.split(new RegExp('/|-'));\n  return new Date(Number(year), Number(month) - 1, Number(day));\n};\n","import React, { useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { getPlayers } from '../../helpers/getPlayers';\nimport { scoresForEachPlayer } from '../../helpers/scoreCalculations';\nimport { GameScore, PlayerAllScores } from '../../models/game';\nimport { dateFromString } from '../../helpers/date';\nimport { namedColours } from '../../models/agricola/colourScheme';\nimport './scores-time.css';\n\ninterface Props {\n  twoPlayer: GameScore[];\n  multiplayer?: GameScore[];\n  games: GameScore[];\n  stylePrefix: string;\n}\n\nconst ScoresOverTime = (props: Props) => {\n  const [pool, setPool] = useState<GameScore[]>(props.twoPlayer);\n\n  const players = getPlayers(pool);\n  const scores: PlayerAllScores = scoresForEachPlayer(pool);\n\n  const sets = players.map((player, i) => {\n    return {\n      label: player,\n      fill: false,\n      borderColor: namedColours[player],\n      borderWidth: 2.0,\n      hoverBackgroundColor: 'rgb(54, 174, 201)',\n      hoverBorderColor: 'black',\n      data: scores[player],\n      lineTension: 0.1,\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: namedColours[player],\n      pointBackgroundColor: '#fff',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: namedColours[player],\n      pointHoverBorderColor: namedColours[player],\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n    };\n  });\n\n  const data = {\n    labels: pool.map((game) => dateFromString(game.date).toDateString()),\n    datasets: sets,\n    options: {\n      scales: {\n        xAxes: [\n          {\n            type: 'time',\n          },\n        ],\n      },\n    },\n  };\n\n  return (\n    <div\n      className={`scores-time-container grid-six ${props.stylePrefix}-scores-time`}\n    >\n      <header className=\"header\">Scores Over Time</header>\n      {props.multiplayer !== undefined && (\n        <div className=\"button-container\">\n          <button\n            className={`state-button ${\n              pool === props.twoPlayer ? 'highlighted' : ''\n            }`}\n            onClick={() => setPool(props.twoPlayer)}\n          >\n            Two Player\n          </button>\n\n          <button\n            className={`state-button ${\n              pool === props.multiplayer ? 'highlighted' : ''\n            }`}\n            onClick={() => setPool(props.multiplayer)}\n          >\n            Multiplayer\n          </button>\n\n          <button\n            className={`state-button ${\n              pool === props.games ? 'highlighted' : ''\n            }`}\n            onClick={() => setPool(props.games)}\n          >\n            All Games\n          </button>\n        </div>\n      )}\n      <Line data={data} options={{ maintainAspectRatio: false }} />\n    </div>\n  );\n};\n\nexport default ScoresOverTime;\n","import { GameScore } from '../models/game';\n\nexport const divideGamesByPlayerCount = (\n  games: GameScore[],\n): [GameScore[], GameScore[]] => {\n  let twoPlayer = [];\n  let multiplayer = [];\n  games.forEach((game) => {\n    if (game.players.length > 2) {\n      multiplayer.push(game);\n    } else {\n      twoPlayer.push(game);\n    }\n  });\n  return [twoPlayer, multiplayer];\n};\n\nexport const getGameCategories = (game: GameScore) => {\n  return game.players[0].scores.map((score) => score['category']);\n};\n","import React, { useState } from 'react';\nimport { Radar } from 'react-chartjs-2';\nimport { getPlayers } from '../../helpers/getPlayers';\nimport { PlayerCategoryScores } from '../../helpers/scoreSheet';\nimport { categoryScoresForEachPlayer } from '../../helpers/scoreCalculations';\nimport { GameScore } from '../../models/game';\nimport { getGameCategories } from '../../helpers/setData';\nimport './category.css';\n\ninterface Props {\n  games: GameScore[];\n  stylePrefix: string;\n}\n\nconst CategoryScores = (props: Props) => {\n  const [pool] = useState<GameScore[]>(props.games);\n  const [player, setPlayer] = useState<string>('Tash');\n\n  const players = getPlayers(pool).sort();\n\n  const categoryScores = categoryScoresForEachPlayer(pool);\n  const categories = getGameCategories(pool[0]);\n  let playerScores: PlayerCategoryScores = players.reduce((acc, player) => {\n    acc[player] = {};\n    return acc;\n  }, {});\n\n  for (let player in categoryScores) {\n    for (let category in categoryScores[player]) {\n      let high = Math.max(...categoryScores[player][category]);\n      let low = Math.min(...categoryScores[player][category]);\n      playerScores[player][category] = { high, low };\n    }\n  }\n\n  const highSet = {\n    label: 'High',\n    backgroundColor: 'rgb(65,177,249, 0.7)',\n    borderColor: 'black',\n    borderWidth: 0.5,\n    hoverBorderColor: 'black',\n    data: Object.values(playerScores[player]).map((scores) => scores.high),\n  };\n\n  const lowSet = {\n    label: 'Low',\n    backgroundColor: 'rgb( 255, 144, 67 , 0.8)',\n    borderColor: 'black',\n    borderWidth: 0.5,\n    hoverBorderColor: 'black',\n    data: Object.values(playerScores[player]).map((scores) => scores.low),\n  };\n\n  const data = {\n    labels: categories,\n    datasets: [lowSet, highSet],\n  };\n\n  const legendOpts = {\n    display: true,\n    position: 'top',\n    fullWidth: false,\n    reverse: false,\n    labels: {\n      fontColor: 'greysmoke',\n    },\n  };\n\n  return (\n    <div\n      className={`grid-four ${props.stylePrefix}-category category-container`}\n    >\n      <header className={`${props.stylePrefix}-header header`}>\n        Category Breakdown\n      </header>\n      <div className=\"button-container\">\n        {players.map((p) => (\n          <button\n            className={`state-button ${p === player ? 'highlighted' : ''} ${\n              props.stylePrefix\n            }-button`}\n            onClick={() => setPlayer(p)}\n          >\n            {p}\n          </button>\n        ))}\n      </div>\n      <Radar data={data} legend={legendOpts}></Radar>\n    </div>\n  );\n};\n\nexport default CategoryScores;\n","import React from 'react';\nimport { GameScore, PlayerAllScores } from '../../models/game';\nimport './stats.css';\n\ninterface Props {\n  totals: PlayerAllScores;\n  tashVsThom: GameScore[];\n  gameName: string;\n  stylePrefix: string;\n  multiplayer?: GameScore[];\n  allGames?: GameScore[];\n}\n\nconst Stats = (props: Props) => {\n  let max = { name: '', score: 0 };\n  let min = { name: '', score: 100 };\n  let overallTotal: number = 0;\n  let scoreCount: number = 0;\n  for (let player in props.totals) {\n    let playerBest = Math.max(...props.totals[player]);\n    let playerWorst = Math.min(...props.totals[player]);\n    if (playerBest > max.score) {\n      max.name = player;\n      max.score = playerBest;\n    }\n    if (playerWorst < min.score) {\n      min.name = player;\n      min.score = playerWorst;\n    }\n\n    let playerTotal = props.totals[player].reduce((a, v) => (a += v));\n\n    overallTotal += playerTotal;\n    scoreCount += props.totals[player].length;\n  }\n\n  let averageScore = overallTotal / scoreCount;\n  return (\n    <div className={`${props.stylePrefix}-stats stats-container grid-one`}>\n      <header className={`${props.stylePrefix}-header header stats-header`}>\n        Some stats from our {props.gameName} Games\n      </header>\n      <p>\n        Total Games Recorded:\n        <span className={`${props.stylePrefix}-stat-text`}>\n          {' '}\n          {props.allGames.length}\n        </span>\n      </p>\n      <p>\n        Of those games,\n        <span className={`${props.stylePrefix}-stat-text`}>\n          {' '}\n          {props.tashVsThom.length}\n        </span>{' '}\n        were 2 player\n      </p>\n\n      {props.multiplayer !== undefined && (\n        <p>\n          And{' '}\n          <span className={`${props.stylePrefix}-stat-text`}>\n            {' '}\n            {props.multiplayer.length}\n          </span>{' '}\n          were multiplayer.\n        </p>\n      )}\n\n      <p>\n        The Highest score from all games was\n        <span className={`${props.stylePrefix}-stat-text`}>\n          {' '}\n          {max.score}\n        </span>{' '}\n        scored by the indefatigable\n        <span className={`${props.stylePrefix}-stat-text`}> {max.name}</span>!\n      </p>\n      <p>\n        And the lowest score of all time was\n        <span className={`${props.stylePrefix}-stat-text`}>\n          {' '}\n          {min.score}\n        </span>{' '}\n        scored by the unstoppable\n        <span className={`${props.stylePrefix}-stat-text`}> {min.name}</span>!\n      </p>\n      <p>\n        The average score across all games is a respectable\n        <span className={`${props.stylePrefix}-stat-text`}>\n          {' '}\n          {averageScore.toFixed(2)}\n        </span>\n      </p>\n    </div>\n  );\n};\n\nexport default Stats;\n","import React, { useState } from 'react';\nimport { Polar } from 'react-chartjs-2';\nimport {\n  scoresForEachPlayer,\n  averageScoresFromObject,\n} from '../../helpers/scoreCalculations';\nimport { namedColours } from '../../models/agricola/colourScheme';\nimport { GameScore, SinglePlayerScore } from '../../models/game';\nimport './multiplayer-radial.css';\n\ninterface Props {\n  multiplayer: GameScore[];\n  twoPlayer: GameScore[];\n  allGames: GameScore[];\n}\n\nconst MultiplayerRadial = (props: Props) => {\n  const [set, setSet] = useState(props.multiplayer);\n  let allScores = scoresForEachPlayer(set);\n\n  let playerAverages: SinglePlayerScore = averageScoresFromObject(allScores);\n\n  const data = {\n    datasets: [\n      {\n        data: Object.values(playerAverages),\n        backgroundColor: Object.keys(playerAverages).map(\n          (player) => namedColours[player],\n        ),\n        label: '',\n        borderColor: 'black',\n        borderWidth: 1,\n      },\n    ],\n    labels: Object.keys(playerAverages),\n  };\n  const legendOpts = {\n    display: true,\n    position: 'right',\n    fullWidth: false,\n    reverse: false,\n    labels: {\n      fontColor: 'greysmoke',\n    },\n  };\n  return (\n    <div className=\"radial-container container grid-two\">\n      <header className=\"header\">Average Game Scores</header>\n\n      <div className=\"button-container\">\n        <button\n          className={`state-button ${\n            set === props.twoPlayer ? 'highlighted' : ''\n          }`}\n          onClick={() => setSet(props.twoPlayer)}\n        >\n          Two Player\n        </button>\n        <button\n          className={`state-button ${\n            set === props.multiplayer ? 'highlighted' : ''\n          }`}\n          onClick={() => setSet(props.multiplayer)}\n        >\n          Mutliplayer\n        </button>\n        <button\n          className={`state-button ${\n            set === props.allGames ? 'highlighted' : ''\n          }`}\n          onClick={() => setSet(props.allGames)}\n        >\n          All Games\n        </button>\n      </div>\n      <Polar data={data} legend={legendOpts}></Polar>\n    </div>\n  );\n};\n\nexport default MultiplayerRadial;\n","import { GameScore } from '../models/game';\nimport { totalScore } from './scoreCalculations';\n\nexport const dataPointForTopic = (topic: string, games: GameScore[]) => {\n  return games.reduce((acc, game) => {\n    game.players.forEach((player) => {\n      acc.push({\n        y: player.scores.find(\n          (score) => score.category === topic && score.value.toFixed,\n        ).value,\n        x: totalScore(player),\n      });\n    });\n    return acc;\n  }, []);\n};\n","import React, { useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { dataPointForTopic } from '../../helpers/chartDataManipulation';\nimport { colours } from '../../models/agricola/colourScheme';\nimport { GameScore } from '../../models/game';\nimport './scatter.css';\n\ninterface Props {\n  categories: string[];\n  allGames: GameScore[];\n  stylePrefix: string;\n}\n\nconst ScatterRelationships = (props: Props) => {\n  const [topic, setTopic] = useState(props.categories[0]);\n\n  const options = {\n    responsive: true,\n    labels: dataPointForTopic(props.categories[0], props.allGames)\n      .sort((a, b) => (a.x > b.x ? 1 : -1))\n      .map((score) => score.y),\n    tooltips: {\n      mode: 'label',\n    },\n    elements: {\n      line: {\n        fill: false,\n      },\n    },\n    scales: {\n      xAxes: [\n        {\n          display: true,\n          gridLines: {\n            display: false,\n          },\n          labels: dataPointForTopic(props.categories[0], props.allGames)\n            .sort((a, b) => (a.x > b.x ? 1 : -1))\n            .map((score) => score.x),\n        },\n      ],\n      yAxes: [\n        {\n          type: 'linear',\n          display: true,\n          position: 'left',\n          id: 'y-axis-1',\n          gridLines: {\n            display: false,\n          },\n          labels: {\n            show: true,\n          },\n        },\n        {\n          type: 'linear',\n          display: true,\n          position: 'right',\n          id: 'y-axis-2',\n          gridLines: {\n            display: false,\n          },\n          labels: {\n            show: true,\n          },\n        },\n      ],\n    },\n  };\n\n  const data = {\n    datasets: [\n      {\n        label: 'Score',\n        type: 'line',\n        data: dataPointForTopic(topic, props.allGames)\n          .sort((a, b) => (a.x > b.x ? 1 : -1))\n          .map((score) => score.x),\n        fill: false,\n        borderColor: colours.purple,\n        backgroundColor: colours.pink,\n        pointBorderColor: colours.purple,\n        pointBackgroundColor: colours.pink,\n        pointHoverBackgroundColor: colours.orange,\n        pointHoverBorderColor: colours.orange,\n        yAxisID: 'y-axis-2',\n      },\n      {\n        type: 'bar',\n        label: topic,\n        data: dataPointForTopic(topic, props.allGames)\n          .sort((a, b) => (a.x > b.x ? 1 : -1))\n          .map((score) => score.y),\n        fill: false,\n        backgroundColor: colours.yellow,\n        borderColor: 'black',\n        hoverBackgroundColor: colours.purple,\n        hoverBorderColor: colours.purple,\n        yAxisID: 'y-axis-1',\n      },\n    ],\n  };\n\n  return (\n    <div className={`scatter-container grid-five ${props.stylePrefix}-scatter`}>\n      <header className={`header ${props.stylePrefix}-header`}>\n        Scattered Relationships\n      </header>\n      <Bar data={data} options={options}></Bar>\n      <div className=\"button-container\">\n        {props.categories.map((cat) => (\n          <button\n            className={`state-button ${props.stylePrefix}-button ${\n              topic === cat ? 'highlighted' : ''\n            }`}\n            onClick={() => setTopic(cat)}\n          >\n            {cat}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ScatterRelationships;\n","import React from 'react';\nimport './header.css';\n\nconst Header = (props: { imageUrl: string }) => {\n  return (\n    <div className=\"page-header grid-header header\">\n      <div className=\"image-container\">\n        <img src={props.imageUrl} alt=\"header\"></img>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { useEffect, useState } from 'react';\n// Components\nimport PieCharts from './pie-chart/PieCharts';\nimport ScoresOverTime from './scores-over-time/ScoresOverTime';\nimport CategoryScores from './category-scores/CategoryScores';\nimport Stats from './stats/Stats';\nimport MultiplayerRadial from './multiplayer-radial/MultiplayerRadial';\nimport ScatterRelationships from './scatter-relationships/ScatterRelationships';\n// Models\nimport { GamePageProps, GameScore, PlayerAllScores } from '../models/game';\n// Data\nimport agricola from '../images/agricolaheader.png';\n// Helpers\nimport { scoresForEachPlayer } from '../helpers/scoreCalculations';\nimport { dateRegex } from '../helpers/date';\nimport {\n  getGameCategories,\n  divideGamesByPlayerCount,\n} from '../helpers/setData';\nimport Header from './header/header';\n\nconst AgricolaPage = (props: GamePageProps) => {\n  const [totals, setTotals] = useState<PlayerAllScores>();\n  const [tashVsThom, setTashVsThom] = useState<GameScore[]>();\n  const [multiplayer, setMultiplayer] = useState<GameScore[]>();\n  const [categories, setCategories] = useState<string[]>();\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    setIsLoading(true);\n    setTotals(scoresForEachPlayer(props.games));\n    const [twoPlayer, multiplayer] = divideGamesByPlayerCount(props.games);\n    setTashVsThom(twoPlayer);\n    setMultiplayer(multiplayer);\n    setCategories(getGameCategories(props.games[0]));\n\n    setIsLoading(false);\n  }, [props.games]);\n\n  if (!isLoading) {\n    return (\n      <div className=\"page-container agricola-body\">\n        <Header imageUrl={agricola}></Header>\n        <Stats\n          totals={totals}\n          tashVsThom={tashVsThom}\n          multiplayer={multiplayer}\n          allGames={props.games}\n          gameName={'Agricola'}\n          stylePrefix={'agricola'}\n        ></Stats>\n        <PieCharts tashVsThom={tashVsThom} stylePrefix={'agricola'}></PieCharts>\n        <ScoresOverTime\n          games={props.games.filter((game) => game.date.match(dateRegex))}\n          twoPlayer={tashVsThom.filter((game) => game.date.match(dateRegex))}\n          multiplayer={multiplayer.filter((game) => game.date.match(dateRegex))}\n          stylePrefix={'agricola'}\n        ></ScoresOverTime>\n        <CategoryScores\n          games={props.games}\n          stylePrefix={'agricola'}\n        ></CategoryScores>\n        <MultiplayerRadial\n          multiplayer={multiplayer}\n          twoPlayer={tashVsThom}\n          allGames={props.games}\n        ></MultiplayerRadial>\n        <ScatterRelationships\n          allGames={props.games}\n          categories={categories}\n          stylePrefix={'agricola'}\n        ></ScatterRelationships>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"page-container\">\n        <div className=\"page-header header\">\n          <div className=\"image-container\">\n            <img src={agricola} alt=\"agricola header\"></img>\n          </div>\n        </div>\n        <div>loading...</div>\n      </div>\n    );\n  }\n};\n\nexport default AgricolaPage;\n","import { PlayerScore } from '../game';\n\nexport const blankBaseGameScoreSheet: PlayerScore = {\n  name: '',\n  scores: [\n    {\n      category: 'fields',\n      value: 0,\n    },\n    {\n      category: 'pastures',\n      value: 0,\n    },\n    {\n      category: 'grain',\n      value: 0,\n    },\n    {\n      category: 'vegetables',\n      value: 0,\n    },\n    {\n      category: 'sheep',\n      value: 0,\n    },\n    {\n      category: 'wild boar',\n      value: 0,\n    },\n    {\n      category: 'cattle',\n      value: 0,\n    },\n    {\n      category: 'unused spaces',\n      value: 0,\n    },\n    {\n      category: 'fenced stables',\n      value: 0,\n    },\n    {\n      category: 'clay rooms',\n      value: 0,\n    },\n    {\n      category: 'stone rooms',\n      value: 0,\n    },\n    {\n      category: 'family members',\n      value: 0,\n    },\n    {\n      category: 'bonus points',\n      value: 0,\n    },\n    {\n      category: 'points for cards',\n      value: 0,\n    },\n  ],\n};\n\nexport const blankFarmersOfTheMoorScoreSheet: PlayerScore = {\n  name: '',\n  scores: [\n    {\n      category: 'fields',\n      value: 0,\n    },\n    {\n      category: 'pastures',\n      value: 0,\n    },\n    {\n      category: 'grain',\n      value: 0,\n    },\n    {\n      category: 'vegetables',\n      value: 0,\n    },\n    {\n      category: 'sheep',\n      value: 0,\n    },\n    {\n      category: 'wild boar',\n      value: 0,\n    },\n    {\n      category: 'cattle',\n      value: 0,\n    },\n    {\n      category: 'unused spaces',\n      value: 0,\n    },\n    {\n      category: 'fenced stables',\n      value: 0,\n    },\n    {\n      category: 'clay rooms',\n      value: 0,\n    },\n    {\n      category: 'stone rooms',\n      value: 0,\n    },\n    {\n      category: 'family members',\n      value: 0,\n    },\n    {\n      category: 'bonus points',\n      value: 0,\n    },\n    {\n      category: 'points for cards',\n      value: 0,\n    },\n    {\n      category: 'horses',\n      value: 0,\n    },\n  ],\n};\n","import React, { useState } from 'react';\nimport { SinglePlayerScore } from '../../models/game';\n\ninterface PropsInterface {\n  cancel;\n  submit;\n  totals: SinglePlayerScore;\n}\n\nconst ConfirmScoresModal = (props: PropsInterface) => {\n  const [password, setPassword] = useState<string>();\n  const [incorrectPassword, setIncorrectPassword] = useState(false);\n\n  const handleSubmit = () => {\n    if (password === process.env.REACT_APP_SUBMIT_PASSWORD) {\n      setIncorrectPassword(false);\n      props.submit();\n    } else {\n      setIncorrectPassword(true);\n    }\n  };\n  return (\n    <div className=\"confirm-modal modal\">\n      <div>\n        {Object.entries(props.totals).map(([name, total]) => (\n          <p key={name}>\n            {name} scored {total}\n          </p>\n        ))}\n      </div>\n      <input\n        type=\"text\"\n        placeholder=\"Password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n      />\n      <div className=\"confirm-button-container\">\n        <button onClick={() => handleSubmit()}>Confirm</button>\n        <button onClick={props.cancel}>Cancel</button>\n      </div>\n      {incorrectPassword && (\n        <p className=\"error-message\">Oops! Wrong Password</p>\n      )}\n    </div>\n  );\n};\n\nexport default ConfirmScoresModal;\n","import React from 'react';\nimport {\n  blankBaseGameScoreSheet,\n  blankFarmersOfTheMoorScoreSheet,\n} from '../../models/agricola/playerScore';\nimport { PlayerScore } from '../../models/game';\n\ninterface Props {\n  playerScores: PlayerScore;\n  updateForm;\n  baseGame: boolean;\n}\n\nconst AgricolaScoreSheet = (props: Props) => {\n  const scoreSheet = props.baseGame\n    ? blankBaseGameScoreSheet\n    : blankFarmersOfTheMoorScoreSheet;\n  return (\n    <div className=\"form-player\">\n      <label className=\"category-label\">\n        Name:\n        <input\n          type=\"text\"\n          value={props.playerScores.name}\n          onChange={(e) =>\n            props.updateForm({\n              name: e.target.value,\n              scores: props.playerScores.scores,\n            })\n          }\n        />\n      </label>\n      <div className=\"category-scores-grid\">\n        {scoreSheet.scores.map((cat, i) => (\n          <label className=\"category-label\" key={i}>\n            {cat.category[0]\n              .toUpperCase()\n              .concat(cat.category.toString().slice(1))}\n            <input\n              type=\"number\"\n              value={\n                props.playerScores.scores.find(\n                  (sc) => sc.category === cat.category,\n                ).value\n              }\n              className=\"category-input\"\n              onChange={(e) =>\n                props.updateForm({\n                  name: props.playerScores.name,\n                  scores: [\n                    { category: cat.category, value: e.target.value },\n                    ...props.playerScores.scores.filter(\n                      (sc) => sc.category !== cat.category,\n                    ),\n                  ],\n                })\n              }\n            />\n          </label>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default AgricolaScoreSheet;\n","import React, { useState } from 'react';\nimport { dateFromString, dateRegex } from '../../helpers/date';\nimport {\n  AgricolaGameScore,\n  PlayerScore,\n  SinglePlayerScore,\n} from '../../models/game';\nimport {\n  blankBaseGameScoreSheet,\n  blankFarmersOfTheMoorScoreSheet,\n} from '../../models/agricola/playerScore';\nimport ConfirmScoresModal from './ConfirmModal';\nimport AgricolaScoreSheet from './AgricolaScoreSheet';\n\ninterface PropsInterface {\n  hideModal;\n}\n\nconst AgricolaScoreModal = (props: PropsInterface) => {\n  const [gameType, updateGameType] = useState(false);\n  const scoreSheet = gameType\n    ? blankBaseGameScoreSheet\n    : blankFarmersOfTheMoorScoreSheet;\n  const [errors, setErrors] = useState({ date: false });\n  const [playerScores, setPlayerScores] = useState<Record<number, PlayerScore>>(\n    {\n      0: scoreSheet,\n      1: scoreSheet,\n      2: scoreSheet,\n      3: scoreSheet,\n      4: scoreSheet,\n    },\n  );\n  const [numberOfPlayers, setNumberOfPlayers] = useState(2);\n\n  const [date, setDate] = useState<string>();\n  const [location] = useState<string>();\n  const [, setGameData] = useState<AgricolaGameScore>();\n  const [confirmPopup, setConfirmPopup] = useState<boolean>(false);\n  const [totals, setTotals] = useState<SinglePlayerScore>();\n\n  const validateDate = (dateString: string) => {\n    if (!dateString.match(dateRegex)) {\n      setErrors({ date: true });\n    } else {\n      const date = dateFromString(dateString);\n      if (!date.getDate()) {\n        setErrors({ date: true });\n      } else {\n        setErrors({ date: false });\n        setDate(dateString);\n      }\n    }\n  };\n\n  const handleSubmit = () => {\n    if (date === undefined) {\n      setErrors({ date: true });\n    } else if (!errors.date) {\n      Object.entries(playerScores).forEach(([index, player]) => {\n        if (Number(index) < numberOfPlayers) {\n          const playerTotal = player.scores.reduce((total, categoryScore) => {\n            return (total += categoryScore.value);\n          }, 0);\n          setTotals({ [player.name]: playerTotal, ...totals });\n        }\n      });\n\n      const gameData: AgricolaGameScore = {\n        players: Object.values(playerScores),\n        location,\n        date,\n      };\n\n      setGameData(gameData);\n      setConfirmPopup(true);\n    }\n  };\n\n  const handlePlayerScores = (scores: PlayerScore, index: number) => {\n    setPlayerScores({ ...playerScores, [index]: scores });\n  };\n\n  const submitScores = () => {\n    setConfirmPopup(false);\n    props.hideModal();\n  };\n\n  const handleNumberOfPlayers = (numOfPlayers: number) => {\n    setNumberOfPlayers(numOfPlayers);\n  };\n\n  return (\n    <div className=\"agricola-modal modal\">\n      <button onClick={props.hideModal}>CLOSE X</button>\n      {confirmPopup && (\n        <ConfirmScoresModal\n          cancel={() => setConfirmPopup(false)}\n          submit={() => submitScores()}\n          totals={totals}\n        ></ConfirmScoresModal>\n      )}\n      <div className=\"form-container\">\n        <div className=\"form-metadata-container\">\n          <div className=\"game-info-container\">\n            <label>\n              Date:\n              <input\n                type=\"text\"\n                onChange={(e) => validateDate(e.target.value)}\n              ></input>\n            </label>\n            <label>\n              Location: <input type=\"text\"></input>\n            </label>\n          </div>\n          {errors.date && (\n            <p className=\"error-message\">\n              Please enter a date in the format dd/mm/yyyy\n            </p>\n          )}\n          <div className=\"player-radio-container\">\n            <label>\n              <input\n                type=\"radio\"\n                value=\"1player\"\n                checked={numberOfPlayers === 1}\n                onChange={() => handleNumberOfPlayers(1)}\n              />\n              1 Player\n            </label>\n            <label>\n              <input\n                type=\"radio\"\n                value=\"2player\"\n                checked={numberOfPlayers === 2}\n                onChange={() => handleNumberOfPlayers(2)}\n              />\n              2 Player\n            </label>\n            <label>\n              <input\n                type=\"radio\"\n                value=\"3player\"\n                checked={numberOfPlayers === 3}\n                onChange={() => handleNumberOfPlayers(3)}\n              />\n              3 Player\n            </label>\n            <label>\n              <input\n                type=\"radio\"\n                value=\"4player\"\n                checked={numberOfPlayers === 4}\n                onChange={() => handleNumberOfPlayers(4)}\n              />\n              4 Player\n            </label>\n            <label>\n              <input\n                type=\"radio\"\n                value=\"5player\"\n                checked={numberOfPlayers === 5}\n                onChange={() => handleNumberOfPlayers(5)}\n              />\n              5 Player\n            </label>\n          </div>\n        </div>\n        <div className=\"player-radio-container\">\n          <label>\n            <input\n              type=\"radio\"\n              value=\"basegame\"\n              checked={gameType === true}\n              onChange={() => updateGameType(true)}\n            />\n            Base Game\n          </label>\n          <label>\n            <input\n              type=\"radio\"\n              value=\"moors\"\n              checked={gameType === false}\n              onChange={() => updateGameType(false)}\n            />\n            Farmers Of The Moor\n          </label>\n        </div>\n        <div className=\"score-input-container\">\n          {Object.entries(playerScores).map(\n            ([index, playerForm]) =>\n              Number(index) < numberOfPlayers && (\n                <AgricolaScoreSheet\n                  key={index}\n                  playerScores={playerForm}\n                  updateForm={(value) =>\n                    handlePlayerScores(value, Number(index))\n                  }\n                  baseGame={gameType}\n                ></AgricolaScoreSheet>\n              ),\n          )}\n        </div>\n      </div>\n      <button onClick={() => handleSubmit()}>Submit</button>\n    </div>\n  );\n};\n\nexport default AgricolaScoreModal;\n","import React, { useEffect, useState } from 'react';\n// Components\nimport CategoryScores from './category-scores/CategoryScores';\nimport PieCharts from './pie-chart/PieCharts';\nimport ScatterRelationships from './scatter-relationships/ScatterRelationships';\nimport ScoresOverTime from './scores-over-time/ScoresOverTime';\nimport Stats from './stats/Stats';\n// Models\nimport { GamePageProps, GameScore, PlayerAllScores } from '../models/game';\n// Data\nimport tmheader from '../images/tmboxheader.png';\n// Helpers\nimport { dateRegex } from '../helpers/date';\nimport { scoresForEachPlayer } from '../helpers/scoreCalculations';\nimport {\n  getGameCategories,\n  divideGamesByPlayerCount,\n} from '../helpers/setData';\nimport Header from './header/header';\n\nconst TerraformingMarsPage = (props: GamePageProps) => {\n  const [totals, setTotals] = useState<PlayerAllScores>();\n  const [tashVsThom, setTashVsThom] = useState<GameScore[]>();\n  const [multiplayer, setMultiplayer] = useState<GameScore[]>();\n  const [categories, setCategories] = useState<string[]>();\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    setIsLoading(true);\n    setTotals(scoresForEachPlayer(props.games));\n    const [twoPlayer, multiplayer] = divideGamesByPlayerCount(props.games);\n    setTashVsThom(twoPlayer);\n    setMultiplayer(multiplayer);\n    setCategories(getGameCategories(props.games[0]));\n    setIsLoading(false);\n  }, [props.games]);\n\n  if (!isLoading) {\n    return (\n      <div className=\"page-container tm-body\">\n        <Header imageUrl={tmheader}></Header>\n        <div className=\"container\"></div>\n        <Stats\n          totals={totals}\n          tashVsThom={tashVsThom}\n          allGames={props.games}\n          multiplayer={multiplayer}\n          gameName={'Terraforming Mars'}\n          stylePrefix={'tm'}\n        ></Stats>\n        <PieCharts tashVsThom={tashVsThom} stylePrefix={'tm'}></PieCharts>\n        <ScoresOverTime\n          games={props.games.filter((game) => game.date.match(dateRegex))}\n          stylePrefix={'tm'}\n          twoPlayer={tashVsThom.filter((game) => game.date.match(dateRegex))}\n        ></ScoresOverTime>\n        <CategoryScores games={props.games} stylePrefix={'tm'}></CategoryScores>\n        <ScatterRelationships\n          allGames={props.games}\n          stylePrefix={'tm'}\n          categories={categories}\n        ></ScatterRelationships>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"page-container\">\n        <div className=\"page-header header\">\n          <div className=\"image-container\">\n            <img src={tmheader} alt=\"tm-header\"></img>\n          </div>\n        </div>\n        <div>loading...</div>\n      </div>\n    );\n  }\n};\n\nexport default TerraformingMarsPage;\n","import React, { useEffect, useState } from 'react';\n// Components\nimport CategoryScores from './category-scores/CategoryScores';\nimport ScoresOverTime from './scores-over-time/ScoresOverTime';\nimport PieCharts from './pie-chart/PieCharts';\nimport ScatterRelationships from './scatter-relationships/ScatterRelationships';\nimport Stats from './stats/Stats';\n// Models\nimport { GamePageProps, GameScore, PlayerAllScores } from '../models/game';\n// Data\nimport wingspanheader from '../images/wingspanbirdheader.jpeg';\nimport wingspancards from '../images/wingspancards.jpeg';\n// Helpers\nimport { dateRegex } from '../helpers/date';\nimport { scoresForEachPlayer } from '../helpers/scoreCalculations';\nimport {\n  divideGamesByPlayerCount,\n  getGameCategories,\n} from '../helpers/setData';\nimport Header from './header/header';\n\nconst WingspanPage = (props: GamePageProps) => {\n  const [totals, setTotals] = useState<PlayerAllScores>();\n  const [tashVsThom, setTashVsThom] = useState<GameScore[]>();\n  const [categories, setCategories] = useState<string[]>();\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    setIsLoading(true);\n    setTotals(scoresForEachPlayer(props.games));\n    const [twoPlayer] = divideGamesByPlayerCount(props.games);\n    setTashVsThom(twoPlayer);\n    setCategories(getGameCategories(props.games[0]));\n    setIsLoading(false);\n  }, [props.games]);\n\n  if (!isLoading) {\n    return (\n      <div className=\"page-container wingspan-body\">\n        <Header imageUrl={wingspanheader}></Header>\n        <div className=\"container wingspan-photo-container\">\n          <img\n            src={wingspancards}\n            alt=\"cards from the game wingspan\"\n            className=\"photo\"\n          ></img>\n        </div>\n        <Stats\n          totals={totals}\n          tashVsThom={tashVsThom}\n          allGames={props.games}\n          gameName={'Wingspan'}\n          stylePrefix=\"wingspan\"\n        ></Stats>\n        <PieCharts tashVsThom={tashVsThom} stylePrefix=\"wingspan\"></PieCharts>\n        <ScoresOverTime\n          games={props.games.filter((game) => game.date.match(dateRegex))}\n          twoPlayer={tashVsThom.filter((game) => game.date.match(dateRegex))}\n          stylePrefix=\"wingspan\"\n        ></ScoresOverTime>\n        <CategoryScores\n          games={props.games}\n          stylePrefix=\"wingspan\"\n        ></CategoryScores>\n        <ScatterRelationships\n          allGames={props.games}\n          categories={categories}\n          stylePrefix=\"wingspan\"\n        ></ScatterRelationships>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"page-container\">\n        <div className=\"page-header header\">\n          <div className=\"image-container\">\n            <img src={wingspanheader} alt=\"wingspan-header\"></img>\n          </div>\n        </div>\n        <div>loading...</div>\n      </div>\n    );\n  }\n};\n\nexport default WingspanPage;\n","import Axios from 'axios';\n\nexport const fetchData = async (pword, location) => {\n  const result = await Axios(`https://api.jsonbin.io/b/${location}/latest`, {\n    headers: {\n      'secret-key': pword,\n    },\n  });\n  return result.data;\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport './style/wingspan-styles.css';\nimport './style/agricola-styles.css';\nimport './style/tm-styles.css';\nimport AgricolaPage from './Components/AgricolaPage';\nimport AgricolaScoreModal from './Components/score-modal/AgricolaScoreModal';\nimport TerraformingMarsPage from './Components/TerraformingMarsPage';\nimport WingspanPage from './Components/WingspanPage';\nimport { fetchData } from './helpers/fetchData';\nimport { GameScore } from './models/game';\n\nconst App = () => {\n  const [view, setView] = useState('Wingspan');\n  const [showModal, setShowModal] = useState(false);\n  const [agricolaGames, setAgricolaGames] = useState<GameScore[]>();\n  const [wingspanGames, setWingspanGames] = useState<GameScore[]>();\n  const [tmGames, setTmGames] = useState<GameScore[]>();\n\n  useEffect(() => {\n    const pword = `$2b$10$tVk${process.env.REACT_APP_API_KEY}`;\n    const agricolaLocation = process.env.REACT_APP_AGRICOLA_LOCATION;\n    const wingspanLocation = process.env.REACT_APP_WINGSPAN_LOCATION;\n    const tmLocation = process.env.REACT_APP_TM_LOCATION;\n    fetchData(\n      pword,\n      agricolaLocation,\n    ).then((data: { agricolaGames: GameScore[] }) =>\n      setAgricolaGames(data.agricolaGames),\n    );\n    fetchData(pword, wingspanLocation).then((data) =>\n      setWingspanGames(data.wingspanGames),\n    );\n    fetchData(pword, tmLocation).then((data) => setTmGames(data.tmGames));\n  }, []);\n\n  if (wingspanGames && agricolaGames && tmGames) {\n    return (\n      <div className=\"App\">\n        <nav className=\"navbar\">\n          <button onClick={() => setView('Agricola')}>Agricola</button>\n          <button onClick={() => setView('TerraformingMars')}>\n            Terraforming Mars\n          </button>\n          <button onClick={() => setView('Wingspan')}>Wingspan</button>\n        </nav>\n        {view === 'Agricola' && (\n          <AgricolaPage games={agricolaGames}></AgricolaPage>\n        )}\n        {view === 'TerraformingMars' && (\n          <TerraformingMarsPage games={tmGames}></TerraformingMarsPage>\n        )}\n        {view === 'Wingspan' && (\n          <WingspanPage games={wingspanGames}></WingspanPage>\n        )}\n        {showModal && (\n          <AgricolaScoreModal\n            hideModal={() => setShowModal(false)}\n          ></AgricolaScoreModal>\n        )}\n      </div>\n    );\n  } else {\n    return <div>loading...</div>;\n  }\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/agricolaheader.a09a232b.png\";","module.exports = __webpack_public_path__ + \"static/media/tmboxheader.7c6f7153.png\";","module.exports = __webpack_public_path__ + \"static/media/wingspanbirdheader.9d57b42b.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/wingspancards.916892aa.jpeg\";"],"sourceRoot":""}