{"version":3,"sources":["models/agricola/colourScheme.ts","Components/SinglePie.tsx","helpers/scoreCalculations.ts","Components/PieCharts.tsx","helpers/getPlayers.ts","helpers/date.ts","Components/FinalScoresBar.tsx","Components/CategoryAverages.tsx","helpers/scoreSheet.ts","Components/Stats.tsx","Components/MultiplayerRadial.tsx","helpers/chartDataManipulation.ts","Components/ScatterRelationships.tsx","helpers/fetchData.ts","Components/AgricolaPage.tsx","models/agricola/playerScore.ts","Components/AgricolaScoreSheet.tsx","Components/ConfirmModal.tsx","Components/AgricolaScoreModal.tsx","Components/TerraformingMarsPage.tsx","Components/WingspanPage.tsx","App.js","index.js","images/agricolaheader.png","images/wingspanbirdheader.jpeg","images/tmboxheader.png","images/wingspancards.jpeg"],"names":["colours","salmon","green","yellow","turquoise","pink","purple","blue","orange","namedColours","Thom","Jonny","Jeff","Tash","Tom","Rob","James","draw","PieChart","props","labels","Object","keys","scores","map","player","console","log","scoresData","values","data","datasets","backgroundColor","hoverBackgroundColor","borderColor","borderWidth","totalGames","reduce","acc","val","winPercentages","entries","winCount","Math","round","className","legend","display","position","fullWidth","reverse","fontColor","string","index","key","scoresForEachPlayer","games","game","players","forEach","total","find","score","category","value","name","getGameCategories","filter","averageScoreFromArray","scoreArray","average","a","v","length","Number","toFixed","PieCharts","tashVsThom","totalsForGame","totalScoreArray","highScore","max","every","getPlayers","includes","push","dateRegex","dateFromString","date","split","RegExp","day","month","year","Date","FinalScoresBar","useState","twoPlayer","pool","setPool","sets","i","label","hoverBorderColor","toDateString","options","scales","xAxes","type","undefined","multiplayer","onClick","maintainAspectRatio","CategoryAverage","sort","categoryScores","blankScores","categoryScoresForEachPlayer","fields","pastures","grain","vegetables","sheep","cattle","horses","blankScoreSheet","averages","avg","categories","Stats","min","overallTotal","scoreCount","totals","playerBest","playerWorst","averageScore","gameName","allGames","MultiplayerRadial","set","setSet","playerAverages","allScores","averageScoresFromObject","dataPointForTopic","topic","playerScore","y","x","ScatterRelationships","setTopic","responsive","b","tooltips","mode","elements","line","fill","gridLines","yAxes","id","show","pointBorderColor","pointBackgroundColor","pointHoverBackgroundColor","pointHoverBorderColor","yAxisID","cat","fetchData","pword","location","Axios","headers","result","AgricolaPage","setAllGames","setTotals","setTashVsThom","setMultiplayer","setCategories","isLoading","setIsLoading","useEffect","process","then","agricolaGames","src","agricola","alt","match","blankBaseGameScoreSheet","blankFarmersOfTheMoorScoreSheet","AgricolaScoreSheet","scoreSheet","baseGame","playerScores","onChange","e","updateForm","target","toUpperCase","concat","toString","slice","sc","ConfirmScoresModal","password","setPassword","incorrectPassword","setIncorrectPassword","placeholder","REACT_APP_SUBMIT_PASSWORD","submit","cancel","AgricolaScoreModal","gameType","updateGameType","errors","setErrors","0","1","2","3","4","setPlayerScores","numberOfPlayers","setNumberOfPlayers","setDate","setGameData","confirmPopup","setConfirmPopup","handleNumberOfPlayers","numOfPlayers","hideModal","dateString","getDate","checked","playerForm","handlePlayerScores","playerTotal","categoryScore","gameData","handleSubmit","TerraformingMarsPage","tmheader","WingspanPage","wingspanGames","wingspanbirdheader","wingspancards","App","view","setView","showModal","setShowModal","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.533265f3.chunk.js","sourcesContent":["export const colours = {\n  salmon: \"rgb(255, 132, 105)\",\n  green: \"rgb(30, 187, 108)\",\n  yellow: \"rgb(255,205,18)\",\n  turquoise: \"rgb(54, 174, 201)\",\n  pink: \"rgb(255, 99, 216)\",\n  purple: \"rgb(160, 58, 211)\",\n  blue: \"rgb(30, 119, 239)\",\n  orange: \"rgb(252, 130, 15)\",\n};\n\nexport const namedColours = {\n  \"CJ & Jeff\": \"rgb(255, 132, 105)\",\n  Thom: \"rgb(30, 187, 108)\",\n  Jonny: \"rgb(255,205,18)\",\n  Jeff: \"rgb(54, 174, 201)\",\n  Tash: \"rgb(255, 99, 216)\",\n  Tom: \"rgb(160, 58, 211)\",\n  Rob: \"rgb(30, 119, 239)\",\n  James: \"rgb(252, 130, 15)\",\n  draw: \"rgb(255,205,18)\",\n};\n","import React from 'react';\nimport { Doughnut } from 'react-chartjs-2';\nimport { namedColours } from '../models/agricola/colourScheme';\nimport { SinglePlayerScore } from '../models/game';\n\nconst PieChart = (props) => {\n  const labels = Object.keys(props.scores).map((player) => {\n    return player === 'draw' ? 'Draw' : `${player} Wins`;\n  });\n  console.log('tshVsThom', props);\n  const scoresData = Object.values(props.scores);\n  const colours = Object.keys(props.scores).map(\n    (player) => namedColours[player],\n  );\n  const data = {\n    labels,\n    datasets: [\n      {\n        data: scoresData,\n        backgroundColor: colours,\n        hoverBackgroundColor: colours,\n        borderColor: 'black',\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  const legendOpts = {\n    display: true,\n    position: 'right',\n    fullWidth: false,\n    reverse: false,\n    labels: {\n      fontColor: 'greysmoke',\n    },\n  };\n\n  const totalGames = Object.values(props.scores as SinglePlayerScore).reduce(\n    (acc, val) => (acc += val),\n  );\n\n  const winPercentages = Object.entries(props.scores as SinglePlayerScore).map(\n    ([player, winCount]) => {\n      return player === 'draw'\n        ? `${Math.round(\n            (winCount / totalGames) * 100,\n          )}% of games ended in a draw!`\n        : `${player} has won ${Math.round(\n            (winCount / totalGames) * 100,\n          )}% of games`;\n    },\n  );\n\n  return (\n    <div className=\"pie-grid\">\n      <Doughnut data={data} legend={legendOpts}></Doughnut>\n      <div>\n        {winPercentages.map((string, index) => (\n          <p className=\"win-stats\" key={index}>\n            {string}\n          </p>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default PieChart;\n","import {\n  AgricolaGameScore,\n  GameScore,\n  PlayerAllScores,\n  PlayerScore,\n  SinglePlayerScore,\n} from '../models/game';\nimport { PlayerCategoryScores } from './scoreSheet';\n\nexport const totalScoresForGame = (playersArray: PlayerScore[]) => {\n  return playersArray.map((player) => {\n    return {\n      score: player.scores.find((score) => score.category === 'total').value,\n      player: player.name,\n    };\n  });\n};\n\nexport const scoresForEachPlayer = (games: GameScore[]): PlayerAllScores => {\n  return games.reduce((acc, game) => {\n    game.players.forEach((player) => {\n      const total = player.scores.find((score) => score.category === 'total')\n        .value;\n      acc[player.name] = acc[player.name]\n        ? [...acc[player.name], total]\n        : [total];\n    });\n    return acc;\n  }, {});\n};\n\nexport const categoryScoresForEachPlayer = (\n  games: AgricolaGameScore[],\n  blankScores: PlayerCategoryScores,\n): PlayerCategoryScores => {\n  return games.reduce((acc, game) => {\n    game.players.forEach((player) => {\n      for (let category of player.scores) {\n        acc[player.name][category.category]\n          ? acc[player.name][category.category].push(category.value)\n          : (acc[player.name][category.category] = [category.value]);\n      }\n    });\n    return acc;\n  }, blankScores);\n};\n\nexport const getGameCategories = (game: GameScore) => {\n  return game.players[0].scores\n    .map((score) => score['category'])\n    .filter((category) => category !== 'total');\n};\n\nexport const averageScoresFromObject = (\n  allScores: PlayerAllScores,\n): SinglePlayerScore => {\n  return Object.keys(allScores).reduce((acc, player) => {\n    acc[player] = averageScoreFromArray(allScores[player]);\n    return acc;\n  }, {});\n};\n\nexport const totalScore = (playerScore: PlayerScore): number => {\n  return playerScore.scores.find((score) => score.category === 'total').value;\n};\n\nexport const averageScoreFromArray = (scoreArray: number[]): number => {\n  const average = scoreArray.reduce((a, v) => (a += v)) / scoreArray.length;\n  return Number(average.toFixed(2));\n};\n\nexport const winCounts = (games: GameScore[]) =>\n  games.reduce((acc, game): SinglePlayerScore => {\n    let totalsForGame = totalScoresForGame(game.players);\n\n    let totalScoreArray = totalsForGame.map((player) => player.score);\n    let highScore = Math.max(...totalScoreArray.map(Number));\n\n    if (totalScoreArray.every((score) => score === totalScoreArray[0])) {\n      acc['draw'] ? (acc['draw'] += 1) : (acc['draw'] = 1);\n    } else {\n      totalsForGame.forEach((player) => {\n        if (player.score === highScore) {\n          acc[player.player]\n            ? (acc[player.player] += 1)\n            : (acc[player.player] = 1);\n        }\n      });\n    }\n    return acc;\n  }, {});\n","import PieChart from './SinglePie';\nimport React from 'react';\nimport { winCounts } from '../helpers/scoreCalculations';\nimport { colours } from '../models/agricola/colourScheme';\n\nconst PieCharts = (props) => {\n  return (\n    <div className=\"pie-container container\">\n      <header className=\"header\">Win Lose Draw!</header>\n      <PieChart\n        scores={winCounts(props.tashVsThom)}\n        backgroundColor={Object.values(colours)}\n      ></PieChart>\n    </div>\n  );\n};\n\nexport default PieCharts;\n","import { AgricolaGameScore } from '../models/game';\n\nexport const getPlayers = (games: AgricolaGameScore[]): string[] => {\n  return games.reduce((acc, game) => {\n    game.players.forEach((player) => {\n      !acc.includes(player.name) && acc.push(player.name);\n    });\n    return acc;\n  }, []);\n};\n","export const dateRegex = /[0-3]\\d[/|-][0-1]\\d[/|-][1-2]\\d\\d\\d/;\nexport const dateFromString = (date: string): Date => {\n  const [day, month, year] = date.split(new RegExp('/|-'));\n  return new Date(Number(year), Number(month) - 1, Number(day));\n};\n","import React, { useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { getPlayers } from '../helpers/getPlayers';\nimport { scoresForEachPlayer } from '../helpers/scoreCalculations';\nimport { AgricolaGameScore, PlayerAllScores } from '../models/game';\nimport { dateFromString } from '../helpers/date';\nimport { namedColours } from '../models/agricola/colourScheme';\n\nconst FinalScoresBar = (props) => {\n  const [pool, setPool] = useState<AgricolaGameScore[]>(props.twoPlayer);\n\n  const players = getPlayers(pool);\n  const scores: PlayerAllScores = scoresForEachPlayer(pool);\n\n  const sets = players.map((player, i) => {\n    return {\n      label: player,\n      backgroundColor: namedColours[player],\n      borderColor: 'black',\n      borderWidth: 0.5,\n      hoverBackgroundColor: 'rgb(54, 174, 201)',\n      hoverBorderColor: 'black',\n      data: scores[player],\n    };\n  });\n\n  const data = {\n    labels: pool.map((game) => dateFromString(game.date).toDateString()),\n    datasets: sets,\n    options: {\n      scales: {\n        xAxes: [\n          {\n            type: 'time',\n          },\n        ],\n      },\n    },\n  };\n\n  return (\n    <div className=\"bar-container container\">\n      <header className=\"header\">Scores Over Time</header>\n      {props.multiplayer !== undefined && (\n        <div className=\"button-container\">\n          <button\n            className=\"agricola-button\"\n            onClick={() => setPool(props.twoPlayer)}\n          >\n            Two Player\n          </button>\n\n          <button\n            className=\"agricola-button\"\n            onClick={() => setPool(props.multiplayer)}\n          >\n            Multiplayer\n          </button>\n\n          <button\n            className=\"agricola-button\"\n            onClick={() => setPool(props.games)}\n          >\n            All Games\n          </button>\n        </div>\n      )}\n      <Bar data={data} options={{ maintainAspectRatio: false }} />\n    </div>\n  );\n};\n\nexport default FinalScoresBar;\n","import React, { useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { getPlayers } from '../helpers/getPlayers';\nimport { blankScoreSheet, PlayerCategoryScores } from '../helpers/scoreSheet';\nimport { categoryScoresForEachPlayer } from '../helpers/scoreCalculations';\nimport { namedColours } from '../models/agricola/colourScheme';\n\nconst CategoryAverage = (props) => {\n  const [pool, setPool] = useState(props.games);\n  const players = getPlayers(pool).sort();\n\n  const blankScores: PlayerCategoryScores = blankScoreSheet(players);\n  const categoryScores: PlayerCategoryScores = categoryScoresForEachPlayer(\n    pool,\n    blankScores,\n  );\n\n  let averages: PlayerCategoryScores = players.reduce((acc, player) => {\n    acc[player] = {};\n    return acc;\n  }, {});\n\n  for (let player in categoryScores) {\n    for (let category in categoryScores[player]) {\n      if (categoryScores[player][category].length > 0) {\n        let total = categoryScores[player][category].reduce(\n          (acc, score) => (acc += score),\n        );\n\n        let avg = total / categoryScores[player][category].length;\n        averages[player][category] = avg.toFixed(2);\n      }\n    }\n  }\n\n  const categories = Object.keys(averages.Thom);\n  const getAverages = (name) => {\n    return Object.entries(averages[name])\n      .filter(([category, _]) => category !== 'total')\n      .map(([_, value]) => value);\n  };\n\n  const sets = players.map((player, i) => {\n    return {\n      label: player,\n      backgroundColor: namedColours[player],\n      borderColor: 'black',\n      borderWidth: 0.5,\n      hoverBackgroundColor: namedColours[player],\n      hoverBorderColor: 'black',\n      data: getAverages(player),\n    };\n  });\n  const data = {\n    labels: categories.filter((category) => category !== 'total'),\n    datasets: sets,\n  };\n  const legendOpts = {\n    display: true,\n    position: 'top',\n    fullWidth: false,\n    reverse: false,\n    labels: {\n      fontColor: 'greysmoke',\n    },\n  };\n\n  return (\n    <div className=\"category-container container\">\n      <header className=\"header\">Category Averages</header>\n      {props.multiplayer && (\n        <div className=\"button-container\">\n          <button\n            className=\"agricola-button\"\n            onClick={() => setPool(props.twoPlayer)}\n          >\n            Two Player\n          </button>\n          <button\n            className=\"agricola-button\"\n            onClick={() => setPool(props.multiplayer)}\n          >\n            Multiplayer\n          </button>\n          <button\n            className=\"agricola-button\"\n            onClick={() => setPool(props.games)}\n          >\n            All Games\n          </button>\n        </div>\n      )}\n      <Bar data={data} legend={legendOpts}></Bar>\n    </div>\n  );\n};\n\nexport default CategoryAverage;\n","export interface ScoreSheet {\n  fields: number[];\n  pastures: number[];\n  grain: number[];\n  vegetables: number[];\n  sheep: number[];\n  \"wild boar\": number[];\n  cattle: number[];\n  \"unused spaces\": number[];\n  \"fenced stables\": number[];\n  \"clay rooms\": number[];\n  \"stone rooms\": number[];\n  \"family members\": number[];\n  \"points for cards\": number[];\n  \"bonus points\": number[];\n  total: number[];\n  horses?: number[];\n}\n\nexport interface PlayerCategoryScores {\n  [player: string]: ScoreSheet;\n}\n\nexport const blankScoreSheet = (players: string[]): PlayerCategoryScores => {\n  return players.reduce((acc, player) => {\n    acc[player] = {\n      fields: [],\n      pastures: [],\n      grain: [],\n      vegetables: [],\n      sheep: [],\n      \"wild boar\": [],\n      cattle: [],\n      \"unused spaces\": [],\n      \"fenced stables\": [],\n      \"clay rooms\": [],\n      \"stone rooms\": [],\n      \"family members\": [],\n      \"points for cards\": [],\n      \"bonus points\": [],\n      horses: [],\n    };\n    return acc;\n  }, {});\n};\n","import React from 'react';\n\nconst Stats = (props) => {\n  let max = { name: '', score: 0 };\n  let min = { name: '', score: 100 };\n  let overallTotal: number = 0;\n  let scoreCount: number = 0;\n  for (let player in props.totals) {\n    let playerBest = Math.max(...props.totals[player]);\n    let playerWorst = Math.min(...props.totals[player]);\n    if (playerBest > max.score) {\n      max.name = player;\n      max.score = playerBest;\n    }\n    if (playerWorst < min.score) {\n      min.name = player;\n      min.score = playerWorst;\n    }\n\n    let playerTotal = props.totals[player].reduce((a, v) => (a += v));\n\n    overallTotal += playerTotal;\n    scoreCount += props.totals[player].length;\n  }\n\n  let averageScore = overallTotal / scoreCount;\n  return (\n    <div className=\"stats-container container\">\n      <header className=\"header stats-header\">\n        Some stats from our {props.gameName} Games\n      </header>\n      <p>\n        Total Games Recorded:\n        <span className=\"stat-text\"> {props.allGames.length}</span>\n      </p>\n      <p>\n        Of those games,\n        <span className=\"stat-text\"> {props.tashVsThom.length}</span> were 2\n        player\n      </p>\n\n      {props.multiplayer !== undefined && (\n        <p>\n          And <span className=\"stat-text\"> {props.multiplayer.length}</span>{' '}\n          were multiplayer.\n        </p>\n      )}\n\n      <p>\n        The Highest score from all games was\n        <span className=\"stat-text\"> {max.score}</span> scored by the\n        indefatigable\n        <span className=\"stat-text\"> {max.name}</span>!\n      </p>\n      <p>\n        And the lowest score of all time was\n        <span className=\"stat-text\"> {min.score}</span> scored by the\n        unstoppable\n        <span className=\"stat-text\"> {min.name}</span>!\n      </p>\n      <p>\n        The average score across all games is as respectable\n        <span className=\"stat-text\"> {averageScore.toFixed(2)}</span>\n      </p>\n    </div>\n  );\n};\n\nexport default Stats;\n","import React, { useState } from 'react';\nimport { Polar } from 'react-chartjs-2';\nimport {\n  scoresForEachPlayer,\n  averageScoresFromObject,\n} from '../helpers/scoreCalculations';\nimport { namedColours } from '../models/agricola/colourScheme';\nimport { SinglePlayerScore } from '../models/game';\n\nconst MultiplayerRadial = (props) => {\n  const [set, setSet] = useState(props.multiplayer);\n  let allScores = scoresForEachPlayer(set);\n\n  let playerAverages: SinglePlayerScore = averageScoresFromObject(allScores);\n\n  const data = {\n    datasets: [\n      {\n        data: Object.values(playerAverages),\n        backgroundColor: Object.keys(playerAverages).map(\n          (player) => namedColours[player],\n        ),\n        label: '',\n        borderColor: 'black',\n        borderWidth: 1,\n      },\n    ],\n    labels: Object.keys(playerAverages),\n  };\n  const legendOpts = {\n    display: true,\n    position: 'right',\n    fullWidth: false,\n    reverse: false,\n    labels: {\n      fontColor: 'greysmoke',\n    },\n  };\n  return (\n    <div className=\"radial-container container\">\n      <header className=\"header\">Average Game Scores</header>\n\n      <div className=\"button-container\">\n        <button\n          className=\"agricola-button\"\n          onClick={() => setSet(props.twoPlayer)}\n        >\n          Two Player\n        </button>\n        <button\n          className=\"agricola-button\"\n          onClick={() => setSet(props.multiplayer)}\n        >\n          Mutliplayer\n        </button>\n        <button\n          className=\"agricola-button\"\n          onClick={() => setSet(props.allGames)}\n        >\n          All Games\n        </button>\n      </div>\n      <Polar data={data} legend={legendOpts}></Polar>\n    </div>\n  );\n};\n\nexport default MultiplayerRadial;\n","import { AgricolaGameScore } from '../models/game';\nimport { totalScore } from './scoreCalculations';\n\nexport const dataPointForTopic = (\n  topic: string,\n  games: AgricolaGameScore[],\n) => {\n  return games.reduce((acc, game) => {\n    game.players.forEach((player) => {\n      acc.push({\n        y: player.scores.find(\n          (score) => score.category === topic && score.value.toFixed,\n        ).value,\n        x: totalScore(player),\n      });\n    });\n    return acc;\n  }, []);\n};\n","import React, { useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { dataPointForTopic } from '../helpers/chartDataManipulation';\nimport { colours } from '../models/agricola/colourScheme';\n\nconst ScatterRelationships = (props) => {\n  const [topic, setTopic] = useState(props.categories[0]);\n\n  const options = {\n    responsive: true,\n    labels: dataPointForTopic(props.categories[0], props.allGames)\n      .sort((a, b) => (a.x > b.x ? 1 : -1))\n      .map((score) => score.y),\n    tooltips: {\n      mode: 'label',\n    },\n    elements: {\n      line: {\n        fill: false,\n      },\n    },\n    scales: {\n      xAxes: [\n        {\n          display: true,\n          gridLines: {\n            display: false,\n          },\n          labels: dataPointForTopic(props.categories[0], props.allGames)\n            .sort((a, b) => (a.x > b.x ? 1 : -1))\n            .map((score) => score.x),\n        },\n      ],\n      yAxes: [\n        {\n          type: 'linear',\n          display: true,\n          position: 'left',\n          id: 'y-axis-1',\n          gridLines: {\n            display: false,\n          },\n          labels: {\n            show: true,\n          },\n        },\n        {\n          type: 'linear',\n          display: true,\n          position: 'right',\n          id: 'y-axis-2',\n          gridLines: {\n            display: false,\n          },\n          labels: {\n            show: true,\n          },\n        },\n      ],\n    },\n  };\n\n  const data = {\n    datasets: [\n      {\n        label: 'Score',\n        type: 'line',\n        data: dataPointForTopic(topic, props.allGames)\n          .sort((a, b) => (a.x > b.x ? 1 : -1))\n          .map((score) => score.x),\n        fill: false,\n        borderColor: colours.purple,\n        backgroundColor: colours.pink,\n        pointBorderColor: colours.purple,\n        pointBackgroundColor: colours.pink,\n        pointHoverBackgroundColor: colours.orange,\n        pointHoverBorderColor: colours.orange,\n        yAxisID: 'y-axis-2',\n      },\n      {\n        type: 'bar',\n        label: topic,\n        data: dataPointForTopic(topic, props.allGames)\n          .sort((a, b) => (a.x > b.x ? 1 : -1))\n          .map((score) => score.y),\n        fill: false,\n        backgroundColor: colours.yellow,\n        borderColor: 'black',\n        hoverBackgroundColor: colours.purple,\n        hoverBorderColor: colours.purple,\n        yAxisID: 'y-axis-1',\n      },\n    ],\n  };\n\n  return (\n    <div className=\"scatter-container container\">\n      <header className=\"header\">Scattered Relationships</header>\n      <Bar data={data} options={options}></Bar>\n      <div className=\"button-container\">\n        {props.categories.map((cat) => (\n          <button className=\"agricola-button\" onClick={() => setTopic(cat)}>\n            {cat}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ScatterRelationships;\n","import Axios from \"axios\";\n\nexport const fetchData = async (pword, location) => {\n\n    const result = await Axios(\n      `https://api.jsonbin.io/b/${location}/latest`,\n      {\n        headers: {\n          \"secret-key\": pword,\n        },\n      }\n    )\n    return result.data;\n  };","import React, { useState, useEffect } from 'react';\nimport PieCharts from './PieCharts';\nimport FinalScoresBar from './FinalScoresBar';\nimport CategoryAverage from './CategoryAverages';\nimport Stats from './Stats';\nimport MultiplayerRadial from './MultiplayerRadial';\nimport ScatterRelationships from './ScatterRelationships';\nimport {\n  getGameCategories,\n  scoresForEachPlayer,\n} from '../helpers/scoreCalculations';\nimport { AgricolaGameScore, PlayerAllScores } from '../models/game';\nimport agricola from '../images/agricolaheader.png';\nimport { dateRegex } from '../helpers/date';\nimport { fetchData } from '../helpers/fetchData';\n\ninterface apiData {\n  agricolaGames: AgricolaGameScore[];\n}\n\nconst AgricolaPage = () => {\n  const [allGames, setAllGames] = useState<AgricolaGameScore[]>();\n  const [totals, setTotals] = useState<PlayerAllScores>();\n  const [tashVsThom, setTashVsThom] = useState<AgricolaGameScore[]>();\n  const [multiplayer, setMultiplayer] = useState<AgricolaGameScore[]>();\n  const [categories, setCategories] = useState<string[]>();\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const pword = `$2b$10$tVk${process.env.REACT_APP_API_KEY}`;\n    const location = process.env.REACT_APP_AGRICOLA_LOCATION;\n    setIsLoading(true);\n    fetchData(pword, location).then((data: apiData) => {\n      setAllGames(data.agricolaGames);\n      setTotals(scoresForEachPlayer(data.agricolaGames));\n      setTashVsThom(\n        data.agricolaGames.filter((game) => game.players.length === 2),\n      );\n      setMultiplayer(\n        data.agricolaGames.filter((game) => game.players.length > 2),\n      );\n      setCategories(getGameCategories(data.agricolaGames[0]));\n      setIsLoading(false);\n    });\n  }, []);\n\n  if (!isLoading) {\n    return (\n      <div className=\"page-container\">\n        <div className=\"page-header header\">\n          <div className=\"image-container\">\n            <img src={agricola} alt=\"agricola-header\"></img>\n          </div>\n        </div>\n        <Stats\n          totals={totals}\n          tashVsThom={tashVsThom}\n          multiplayer={multiplayer}\n          allGames={allGames}\n          gameName={'Agricola'}\n        ></Stats>\n        <PieCharts tashVsThom={tashVsThom}></PieCharts>\n        <FinalScoresBar\n          games={allGames.filter((game) => game.date.match(dateRegex))}\n          twoPlayer={tashVsThom.filter((game) => game.date.match(dateRegex))}\n          multiplayer={multiplayer.filter((game) => game.date.match(dateRegex))}\n        ></FinalScoresBar>\n        <CategoryAverage\n          games={allGames}\n          twoPlayer={tashVsThom}\n          multiplayer={multiplayer}\n        ></CategoryAverage>\n        <MultiplayerRadial\n          multiplayer={multiplayer}\n          twoPlayer={tashVsThom}\n          allGames={allGames}\n        ></MultiplayerRadial>\n        <ScatterRelationships\n          allGames={allGames}\n          categories={categories}\n        ></ScatterRelationships>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"page-container\">\n        <div className=\"page-header header\">\n          <div className=\"image-container\">\n            <img src={agricola} alt=\"agricola header\"></img>\n          </div>\n        </div>\n        <div>loading...</div>\n      </div>\n    );\n  }\n};\n\nexport default AgricolaPage;\n","import { PlayerScore } from '../game';\n\nexport const blankBaseGameScoreSheet: PlayerScore = {\n  name: '',\n  scores: [\n    {\n      category: 'fields',\n      value: 0,\n    },\n    {\n      category: 'pastures',\n      value: 0,\n    },\n    {\n      category: 'grain',\n      value: 0,\n    },\n    {\n      category: 'vegetables',\n      value: 0,\n    },\n    {\n      category: 'sheep',\n      value: 0,\n    },\n    {\n      category: 'wild boar',\n      value: 0,\n    },\n    {\n      category: 'cattle',\n      value: 0,\n    },\n    {\n      category: 'unused spaces',\n      value: 0,\n    },\n    {\n      category: 'fenced stables',\n      value: 0,\n    },\n    {\n      category: 'clay rooms',\n      value: 0,\n    },\n    {\n      category: 'stone rooms',\n      value: 0,\n    },\n    {\n      category: 'family members',\n      value: 0,\n    },\n    {\n      category: 'bonus points',\n      value: 0,\n    },\n    {\n      category: 'points for cards',\n      value: 0,\n    },\n  ],\n};\n\nexport const blankFarmersOfTheMoorScoreSheet: PlayerScore = {\n  name: '',\n  scores: [\n    {\n      category: 'fields',\n      value: 0,\n    },\n    {\n      category: 'pastures',\n      value: 0,\n    },\n    {\n      category: 'grain',\n      value: 0,\n    },\n    {\n      category: 'vegetables',\n      value: 0,\n    },\n    {\n      category: 'sheep',\n      value: 0,\n    },\n    {\n      category: 'wild boar',\n      value: 0,\n    },\n    {\n      category: 'cattle',\n      value: 0,\n    },\n    {\n      category: 'unused spaces',\n      value: 0,\n    },\n    {\n      category: 'fenced stables',\n      value: 0,\n    },\n    {\n      category: 'clay rooms',\n      value: 0,\n    },\n    {\n      category: 'stone rooms',\n      value: 0,\n    },\n    {\n      category: 'family members',\n      value: 0,\n    },\n    {\n      category: 'bonus points',\n      value: 0,\n    },\n    {\n      category: 'points for cards',\n      value: 0,\n    },\n    {\n      category: 'horses',\n      value: 0,\n    },\n  ],\n};\n","import React from 'react';\nimport {\n  blankBaseGameScoreSheet,\n  blankFarmersOfTheMoorScoreSheet,\n} from '../models/agricola/playerScore';\nimport { PlayerScore } from '../models/game';\n\ninterface Props {\n  playerScores: PlayerScore;\n  updateForm;\n  baseGame: boolean;\n}\n\nconst AgricolaScoreSheet = (props: Props) => {\n  const scoreSheet = props.baseGame\n    ? blankBaseGameScoreSheet\n    : blankFarmersOfTheMoorScoreSheet;\n  return (\n    <div className=\"form-player\">\n      <label className=\"category-label\">\n        Name:\n        <input\n          type=\"text\"\n          value={props.playerScores.name}\n          onChange={(e) =>\n            props.updateForm({\n              name: e.target.value,\n              scores: props.playerScores.scores,\n            })\n          }\n        />\n      </label>\n      <div className=\"category-scores-grid\">\n        {scoreSheet.scores.map((cat, i) => (\n          <label className=\"category-label\" key={i}>\n            {cat.category[0]\n              .toUpperCase()\n              .concat(cat.category.toString().slice(1))}\n            <input\n              type=\"number\"\n              value={\n                props.playerScores.scores.find(\n                  (sc) => sc.category === cat.category,\n                ).value\n              }\n              className=\"category-input\"\n              onChange={(e) =>\n                props.updateForm({\n                  name: props.playerScores.name,\n                  scores: [\n                    { category: cat.category, value: e.target.value },\n                    ...props.playerScores.scores.filter(\n                      (sc) => sc.category !== cat.category,\n                    ),\n                  ],\n                })\n              }\n            />\n          </label>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default AgricolaScoreSheet;\n","import React, { useState } from 'react';\nimport { SinglePlayerScore } from '../models/game';\n\ninterface PropsInterface {\n  cancel;\n  submit;\n  totals: SinglePlayerScore;\n}\n\nconst ConfirmScoresModal = (props: PropsInterface) => {\n  const [password, setPassword] = useState<string>();\n  const [incorrectPassword, setIncorrectPassword] = useState(false);\n\n  const handleSubmit = () => {\n    if (password === process.env.REACT_APP_SUBMIT_PASSWORD) {\n      setIncorrectPassword(false);\n      props.submit();\n    } else {\n      setIncorrectPassword(true);\n    }\n  };\n  return (\n    <div className=\"confirm-modal modal\">\n      <div>\n        {Object.entries(props.totals).map(([name, total]) => (\n          <p key={name}>\n            {name} scored {total}\n          </p>\n        ))}\n      </div>\n      <input\n        type=\"text\"\n        placeholder=\"Password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n      />\n      <div className=\"confirm-button-container\">\n        <button onClick={() => handleSubmit()}>Confirm</button>\n        <button onClick={props.cancel}>Cancel</button>\n      </div>\n      {incorrectPassword && (\n        <p className=\"error-message\">Oops! Wrong Password</p>\n      )}\n    </div>\n  );\n};\n\nexport default ConfirmScoresModal;\n","import React, { useState } from 'react';\nimport { dateFromString, dateRegex } from '../helpers/date';\nimport {\n  AgricolaGameScore,\n  PlayerScore,\n  SinglePlayerScore,\n} from '../models/game';\nimport {\n  blankBaseGameScoreSheet,\n  blankFarmersOfTheMoorScoreSheet,\n} from '../models/agricola/playerScore';\nimport AgricolaScoreSheet from './AgricolaScoreSheet';\nimport ConfirmScoresModal from './ConfirmModal';\n\ninterface PropsInterface {\n  hideModal;\n}\n\nconst AgricolaScoreModal = (props: PropsInterface) => {\n  const [gameType, updateGameType] = useState(false);\n  const scoreSheet = gameType\n    ? blankBaseGameScoreSheet\n    : blankFarmersOfTheMoorScoreSheet;\n  const [errors, setErrors] = useState({ date: false });\n  const [playerScores, setPlayerScores] = useState<Record<number, PlayerScore>>(\n    {\n      0: scoreSheet,\n      1: scoreSheet,\n      2: scoreSheet,\n      3: scoreSheet,\n      4: scoreSheet,\n    },\n  );\n  const [numberOfPlayers, setNumberOfPlayers] = useState(2);\n\n  const [date, setDate] = useState<string>();\n  const [location] = useState<string>();\n  const [, setGameData] = useState<AgricolaGameScore>();\n  const [confirmPopup, setConfirmPopup] = useState<boolean>(false);\n  const [totals, setTotals] = useState<SinglePlayerScore>();\n\n  const validateDate = (dateString: string) => {\n    if (!dateString.match(dateRegex)) {\n      setErrors({ date: true });\n    } else {\n      const date = dateFromString(dateString);\n      if (!date.getDate()) {\n        setErrors({ date: true });\n      } else {\n        setErrors({ date: false });\n        setDate(dateString);\n      }\n    }\n  };\n\n  const handleSubmit = () => {\n    if (date === undefined) {\n      setErrors({ date: true });\n    } else if (!errors.date) {\n      Object.entries(playerScores).forEach(([index, player]) => {\n        if (Number(index) < numberOfPlayers) {\n          const playerTotal = player.scores.reduce((total, categoryScore) => {\n            return (total += categoryScore.value);\n          }, 0);\n          setTotals({ [player.name]: playerTotal, ...totals });\n        }\n      });\n\n      const gameData: AgricolaGameScore = {\n        players: Object.values(playerScores),\n        location,\n        date,\n      };\n\n      setGameData(gameData);\n      setConfirmPopup(true);\n    }\n  };\n\n  const handlePlayerScores = (scores: PlayerScore, index: number) => {\n    setPlayerScores({ ...playerScores, [index]: scores });\n  };\n\n  const submitScores = () => {\n    setConfirmPopup(false);\n    props.hideModal();\n  };\n\n  const handleNumberOfPlayers = (numOfPlayers: number) => {\n    setNumberOfPlayers(numOfPlayers);\n  };\n\n  return (\n    <div className=\"agricola-modal modal\">\n      <button onClick={props.hideModal}>CLOSE X</button>\n      {confirmPopup && (\n        <ConfirmScoresModal\n          cancel={() => setConfirmPopup(false)}\n          submit={() => submitScores()}\n          totals={totals}\n        ></ConfirmScoresModal>\n      )}\n      <div className=\"form-container\">\n        <div className=\"form-metadata-container\">\n          <div className=\"game-info-container\">\n            <label>\n              Date:\n              <input\n                type=\"text\"\n                onChange={(e) => validateDate(e.target.value)}\n              ></input>\n            </label>\n            <label>\n              Location: <input type=\"text\"></input>\n            </label>\n          </div>\n          {errors.date && (\n            <p className=\"error-message\">\n              Please enter a date in the format dd/mm/yyyy\n            </p>\n          )}\n          <div className=\"player-radio-container\">\n            <label>\n              <input\n                type=\"radio\"\n                value=\"1player\"\n                checked={numberOfPlayers === 1}\n                onChange={() => handleNumberOfPlayers(1)}\n              />\n              1 Player\n            </label>\n            <label>\n              <input\n                type=\"radio\"\n                value=\"2player\"\n                checked={numberOfPlayers === 2}\n                onChange={() => handleNumberOfPlayers(2)}\n              />\n              2 Player\n            </label>\n            <label>\n              <input\n                type=\"radio\"\n                value=\"3player\"\n                checked={numberOfPlayers === 3}\n                onChange={() => handleNumberOfPlayers(3)}\n              />\n              3 Player\n            </label>\n            <label>\n              <input\n                type=\"radio\"\n                value=\"4player\"\n                checked={numberOfPlayers === 4}\n                onChange={() => handleNumberOfPlayers(4)}\n              />\n              4 Player\n            </label>\n            <label>\n              <input\n                type=\"radio\"\n                value=\"5player\"\n                checked={numberOfPlayers === 5}\n                onChange={() => handleNumberOfPlayers(5)}\n              />\n              5 Player\n            </label>\n          </div>\n        </div>\n        <div className=\"player-radio-container\">\n          <label>\n            <input\n              type=\"radio\"\n              value=\"basegame\"\n              checked={gameType === true}\n              onChange={() => updateGameType(true)}\n            />\n            Base Game\n          </label>\n          <label>\n            <input\n              type=\"radio\"\n              value=\"moors\"\n              checked={gameType === false}\n              onChange={() => updateGameType(false)}\n            />\n            Farmers Of The Moor\n          </label>\n        </div>\n        <div className=\"score-input-container\">\n          {Object.entries(playerScores).map(\n            ([index, playerForm]) =>\n              Number(index) < numberOfPlayers && (\n                <AgricolaScoreSheet\n                  key={index}\n                  playerScores={playerForm}\n                  updateForm={(value) =>\n                    handlePlayerScores(value, Number(index))\n                  }\n                  baseGame={gameType}\n                ></AgricolaScoreSheet>\n              ),\n          )}\n        </div>\n      </div>\n      <button onClick={() => handleSubmit()}>Submit</button>\n    </div>\n  );\n};\n\nexport default AgricolaScoreModal;\n","import React from 'react';\nimport tmheader from '../images/tmboxheader.png';\n\nconst TerraformingMarsPage = () => {\n  return (\n    <div className=\"page-container\">\n      <div className=\"page-header header\">\n        <div className=\"image-container\">\n          <img src={tmheader} alt=\"terraforming-mars-header\"></img>\n        </div>\n      </div>\n      <div>Coming soon...</div>\n    </div>\n  );\n};\n\nexport default TerraformingMarsPage;\n","import React, { useEffect, useState } from 'react';\nimport { dateRegex } from '../helpers/date';\nimport {\n  getGameCategories,\n  scoresForEachPlayer,\n} from '../helpers/scoreCalculations';\nimport wingspanbirdheader from '../images/wingspanbirdheader.jpeg';\nimport wingspancards from '../images/wingspancards.jpeg';\nimport { GameScore, PlayerAllScores } from '../models/game';\nimport CategoryAverage from './CategoryAverages';\nimport FinalScoresBar from './FinalScoresBar';\nimport PieCharts from './PieCharts';\nimport ScatterRelationships from './ScatterRelationships';\nimport Stats from './Stats';\nimport { fetchData } from '../helpers/fetchData';\n\ninterface apiData {\n  wingspanGames: GameScore[];\n}\n\nconst WingspanPage = () => {\n  const [allGames, setAllGames] = useState<GameScore[]>();\n  const [totals, setTotals] = useState<PlayerAllScores>();\n  const [tashVsThom, setTashVsThom] = useState<GameScore[]>();\n  const [categories, setCategories] = useState<string[]>();\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const pword = `$2b$10$tVk${process.env.REACT_APP_API_KEY}`;\n    const location = process.env.REACT_APP_WINGSPAN_LOCATION;\n    setIsLoading(true);\n    fetchData(pword, location).then((data: apiData) => {\n      setAllGames(data.wingspanGames);\n      setTotals(scoresForEachPlayer(data.wingspanGames));\n      setTashVsThom(\n        data.wingspanGames.filter((game) => game.players.length === 2),\n      );\n      setCategories(getGameCategories(data.wingspanGames[0]));\n      setIsLoading(false);\n    });\n  }, []);\n\n  if (!isLoading) {\n    return (\n      <div className=\"page-container\">\n        <div className=\"page-header header\">\n          <div className=\"image-container\">\n            <img src={wingspanbirdheader} alt=\"wingspan-header\"></img>\n          </div>\n        </div>\n        <div className=\"container photo-container\">\n          <img\n            src={wingspancards}\n            alt=\"cards from the game wingspan\"\n            className=\"photo\"\n          ></img>\n        </div>\n        <Stats\n          totals={totals}\n          tashVsThom={tashVsThom}\n          allGames={allGames}\n          gameName={'Wingspan'}\n        ></Stats>\n        <PieCharts tashVsThom={tashVsThom}></PieCharts>\n        <FinalScoresBar\n          games={allGames.filter((game) => game.date.match(dateRegex))}\n          twoPlayer={tashVsThom.filter((game) => game.date.match(dateRegex))}\n        ></FinalScoresBar>\n        <CategoryAverage\n          games={allGames}\n          twoPlayer={tashVsThom}\n        ></CategoryAverage>\n        <ScatterRelationships\n          allGames={allGames}\n          categories={categories}\n        ></ScatterRelationships>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"page-container\">\n        <div className=\"page-header header\">\n          <div className=\"image-container\">\n            <img src={wingspanbirdheader} alt=\"wingspan-header\"></img>\n          </div>\n        </div>\n        <div>loading...</div>\n      </div>\n    );\n  }\n};\n\nexport default WingspanPage;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport AgricolaPage from \"./Components/AgricolaPage\";\nimport AgricolaScoreModal from \"./Components/AgricolaScoreModal\";\nimport TerraformingMarsPage from \"./Components/TerraformingMarsPage\";\nimport WingspanPage from \"./Components/WingspanPage\";\n\nconst App = () => {\n  const [view, setView] = useState(\"Wingspan\");\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <nav className=\"navbar\">\n        <div>\n          <button onClick={() => setView(\"Agricola\")}>Agricola</button>\n          <button onClick={() => setView(\"TerraformingMars\")}>\n            Terraforming Mars\n          </button>\n          <button onClick={() => setView(\"Wingspan\")}>Wingspan</button>\n        </div>\n      </nav>\n      {view === \"Agricola\" && <AgricolaPage></AgricolaPage>}\n      {view === \"TerraformingMars\" &&\n        <TerraformingMarsPage></TerraformingMarsPage>\n      }\n      {view === \"Wingspan\" && <WingspanPage></WingspanPage>}\n      {showModal && (\n        <AgricolaScoreModal\n          hideModal={() => setShowModal(false)}\n        ></AgricolaScoreModal>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/agricolaheader.a09a232b.png\";","module.exports = __webpack_public_path__ + \"static/media/wingspanbirdheader.9d57b42b.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/tmboxheader.7c6f7153.png\";","module.exports = __webpack_public_path__ + \"static/media/wingspancards.916892aa.jpeg\";"],"sourceRoot":""}